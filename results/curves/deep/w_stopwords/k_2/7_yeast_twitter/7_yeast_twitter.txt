Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.152
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.15226658215833588;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6734276913906498;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06182065058369696;  // std dev = 0.233, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07732343974796131;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.194153625647738;  // std dev = 2.134, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5885259098463359;  // std dev = 0.157, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8452551572688061;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5783594582304307;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5783594582304307;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06353931998392258;  // std dev = 1.849, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | | else return 0.03081632789178548;  // std dev = 2.118, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5301906003944736;  // std dev = 1.439, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12174933135875171;  // std dev = 0.098, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.12942973733096597;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16437316593903895;  // std dev = 0.113, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.23970744406631495;  // std dev = 1.300, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.311630484794448;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6374972635105095;  // std dev = 0.172, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07433375794003459;  // std dev = 1.188, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else return -0.09481214857777602;  // std dev = 0.196, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05653070634530548;  // std dev = 1.327, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24896533817085664;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5395852284445174;  // std dev = 0.516, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12588412180020922;  // std dev = 0.067, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.11956214166207633;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25393436494917837;  // std dev = 1.107, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return -0.0631439263628382;  // std dev = 1.140, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02617469188020157;  // std dev = 0.802, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2033969860136362;  // std dev = 0.038, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.052962653839969134;  // std dev = 0.136, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.01888655529596106;  // std dev = 1.075, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return 0.03257353375293912;  // std dev = 1.179, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19529526774704126;  // std dev = 0.068, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3683766646781262;  // std dev = 0.450, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09466740352749466;  // std dev = 0.061, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3794995223632772;  // std dev = 0.404, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11630690858318168;  // std dev = 0.117, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17318329566763904;  // std dev = 0.288, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.1302554053871091;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08311147670005084;  // std dev = 0.015, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10281868613125901;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06849555847545472;  // std dev = 0.727, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.014222194048979989;  // std dev = 0.425, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10124577019874005;  // std dev = 0.867, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.195', 'seconds']
Parameter learned model CLL:-0.112856 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.976, 1, 20], 'true,false,true': [3.49e-08, 35, 0], 'true,false,false': [0.373, 10, 2], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,false': [0.456, 12, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.972, 1, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.233, 35, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.247, 7, 2], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.134, 14, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.157, 0, 16], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.849, 56, 5], 'false,false,false,false': [2.118, 23, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.439, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.098, 38, 0], 'false,true,false,false': [0.033, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.113, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.3, 2, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.172, 0, 8], 'false,false,true,false': [1.188, 44, 2], 'false,false,false': [0.196, 17, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.327, 28, 18], 'false,true': [0.0, 0, 2], 'false,false,true': [0.516, 0, 11], 'false,false,false,true': [0.067, 14, 0], 'false,false,false,false': [0.016, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.107, 1, 26], 'true,false': [1.14, 42, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.802, 6, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.038, 0, 17], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.136, 31, 3], 'false,false,false,true': [1.075, 22, 6], 'false,false,false,false': [1.179, 13, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.068, 0, 18], 'false,true,true,true': [0.45, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.061, 54, 0], 'false,false,true': [0.404, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.117, 26, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.288, 0, 19], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.015, 32, 0], 'true,false,false,true': [0.013, 4, 0], 'true,false,false,false': [0.727, 5, 2], 'false,true': [0.425, 10, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.867, 6, 5]}]
{'': [0.21885813148789018, 0.21811224489795927], 'true': [0.04535147392290242, 0.040742417383431394], 'false': [0.2314049586776858, 0.20761245674740467], 'false,true': [0.0, -7.93016446160826e-18], 'true,false': [3.489272363107635e-17, 0.13888888888888892], 'false,true,true': [0.0, nan]}
{'': [0.05246913580246964, 0.13646901520439234], 'false': [0.05414494276214944, 0.20308210058684895], 'false,false': [0.1728395061728395, 0.20942960226642457], 'false,false,false': [0.0, 0.20695083059196148], 'false,false,true': [nan, 0.1728395061728395], 'false,true': [nan, 0.05414494276214944]}
{'': [0.004946567576053212, 0.09578216009488917], 'false': [nan, 0.09578216009488905], 'false,false': [0.0, 0.08978181576442765], 'false,false,false': [0.056033539144196426, 0.15473532241847227], 'true': [0.0015503510768781759, 0.021008867571546186], 'true,false': [0.0, 0.0], 'true,true': [0.0015503510768781759, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.06471604221707966, 0.0007529775508996655], 'false': [0.0002558049125406738, 0.0007130835297818697], 'false,false': [nan, 0.0007130835297818697], 'false,false,false': [nan, 0.0007130835297818697], 'false,true': [nan, 0.0002558049125406738], 'false,true,false': [0.0002541929449954221, 0.00021592637369574063]}
{'': [0.08444843291655474, 0.08088977648167872], 'true': [0.08444843291655474, nan], 'false': [0.0, 0.08050593906888281], 'false,false': [0.09060896716257488, 0.03830216717211803], 'false,false,true': [0.003698536276026565, 0.030656653878532236], 'false,true': [0.0, nan]}
{'': [0.03828495877160805, 0.0913552781250454], 'false': [0.0, 0.09421348767341838], 'false,false': [0.024215297187092952, 0.00017482734968165338], 'true': [nan, 0.03828495877160814], 'true,false': [nan, 0.03828495877160805], 'false,false,false': [0.0003239847529348131, 1.63191505486641e-05]}
{'': [0.058623212381975, 0.08040487298918078], 'false': [nan, 0.08040487298918078], 'false,false': [nan, 0.08040487298918078], 'false,false,false': [nan, 0.08040487298918078], 'true': [0.0453918505461203, 0.028860038425482293]}
{'': [8.379696143119156e-05, 0.04074413657488084], 'false': [nan, 0.040744136574880865], 'false,false': [0.01842762722082914, 0.055989867746742875], 'false,false,false': [0.041282446753466484, 0.07725616641077665], 'true': [8.379696143119156e-05, nan]}
{'': [0.004640573036716728, 0.03155462548449585], 'false': [0.020120514746405298, 0.049422279859485455], 'false,false': [0.020364739570080614, 0.0005221163180850197], 'false,true': [0.04044418986897891, 6.83701706769887e-05], 'false,true,true': [0.04044418986897891, nan], 'false,false,false': [nan, 0.0005221163180850197]}
{'': [0.023564518142625623, 0.04058061730997923], 'false': [0.012901486767389747, 0.06834220520710416], 'false,false': [nan, 0.06834220520710416], 'false,false,false': [nan, 0.06834220520710416], 'true': [0.004234097347367505, 0.015571178595946426], 'true,false': [6.9491836222485e-06, 0.05491297773019817], 'true,false,false': [4.050006626019412e-05, 0.07559647183238702], 'true,true': [0.0043648043879794705, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.381
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.060450942317672465;  // std dev = 0.225, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return 0.015375036594832933;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.0832054912315484;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.14373553773922018;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.09964159874392214;  // std dev = 2.159, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5689160139126817;  // std dev = 0.169, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.8213194034071188;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return -0.10374537899857406;  // std dev = 0.856, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | | else return 0.05371855580272714;  // std dev = 1.133, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.21682314853064222;  // std dev = 1.743, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.015076739337615669;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.426087447218151;  // std dev = 0.102, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5644226487501718;  // std dev = 0.185, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.6871467407519093;  // std dev = 0.092, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7840492882364877;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11261715940406279;  // std dev = 0.110, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.12843611480047323;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.16032313205967477;  // std dev = 0.036, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.315911365082906;  // std dev = 2.58e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3754101034394945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.430568794938664;  // std dev = 0.179, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.31884685999035656;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11559909335980574;  // std dev = 0.300, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.021985969883744724;  // std dev = 1.127, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.06425221002534033;  // std dev = 1.428, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return 0.032992546625351074;  // std dev = 0.758, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.008928032466991967;  // std dev = 1.337, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return 0.13261595027452602;  // std dev = 0.570, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.016062402309978133;  // std dev = 0.289, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.29224896351072915;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.03340302356770995;  // std dev = 0.217, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2538992535332327;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4497917097641508;  // std dev = 0.271, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6196497108993536;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14150814370326667;  // std dev = 0.021, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(C, A), follows(C, E) )
%   | | then return 0.2500936783259903;  // std dev = 0.001, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.31138674091141944;  // std dev = 0.080, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.21287439766320534;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, I) )
%   | | | then return 0.4286753232795531;  // std dev = 0.272, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3221384604172983;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10485674392985866;  // std dev = 0.025, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( follows(A, L), follows(L, J) )
%   | | | then return -0.11248285642946686;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.09643692039631718;  // std dev = 0.902, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.10469252106536453;  // std dev = 0.654, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.20084191302049054;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.1897461439195163;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.22392526159978346;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3731681670134715;  // std dev = 0.236, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09972385608472267;  // std dev = 0.140, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0750050706489053;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.05763907920139523;  // std dev = 0.630, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.17452770443869078;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.21371630343976447;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15277743894508616;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2760997067319198;  // std dev = 0.279, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.08824655023427652;  // std dev = 0.086, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.06238298921175676;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.29428615394490143;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.10910024181660594;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.12881906770994117;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16715541329360387;  // std dev = 0.061, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.07305835799415779;  // std dev = 0.007, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.062466339357039206;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.02913226097705649;  // std dev = 0.359, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, F) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.07749384564594071;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.00775407876313267;  // std dev = 0.288, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.07556876971230066;  // std dev = 0.154, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else if ( tweets(A, I) )
%   | | then return -0.08432883028813613;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0028443587473027084;  // std dev = 0.530, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.483', 'seconds']
Refined model CLL: -0.106764


******************************************
Best model found
******************************************
Results 

CLL : -0.110309 

AUC ROC : 0.992697 

AUC PR : 0.328456 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 3.381 

Total Inference Time : 3.08811616897583 

Total revision time: 10.367526062011718
Best scored revision CLL: -0.106764


Results 

CLL : -0.110309 

AUC ROC : 0.992697 

AUC PR : 0.328456 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 10.384977348327636 

Total Inference Time : 3.08811616897583 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.544
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970727;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.038402789038418816;  // std dev = 0.305, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.21529179224236947;  // std dev = 0.479, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6990282073613475;  // std dev = 0.999, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03923159199257645;  // std dev = 0.257, 69.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005840197510229491;  // std dev = 1.527, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7546686895771393;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14987126240982904;  // std dev = 3.065, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5778378845874499;  // std dev = 0.226, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7286800374485128;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3912174557455451;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5664085979227815;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5664085979227815;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.056064026658463224;  // std dev = 2.641, 120.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=10 */
%   | | | else return 0.09293021504665497;  // std dev = 2.868, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5325627033475556;  // std dev = 1.873, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11891637030015821;  // std dev = 0.063, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.13443933125524915;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16328571258904964;  // std dev = 0.201, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3268319606125395;  // std dev = 0.410, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0.46957061195563055;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30327343646309846;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6482365045780795;  // std dev = 0.139, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1005712740212949;  // std dev = 1.235, 91.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=2 */
%   | | else return 0.031682630787683054;  // std dev = 0.329, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.039116322870044254;  // std dev = 1.822, 94.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=34 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2566524478311212;  // std dev = 0.113, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.519989984587857;  // std dev = 0.659, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12523594517998754;  // std dev = 0.140, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.13018493609593065;  // std dev = 0.117, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26584213897619363;  // std dev = 1.224, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else return -0.08606700702561168;  // std dev = 1.205, 100.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.012257821513670324;  // std dev = 1.316, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.09959051235739992;  // std dev = 1.656, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | else if ( follows(A, E) )
%   | | then return 0.24713831651302487;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.056252489165736434;  // std dev = 0.155, 73.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0366464423286847;  // std dev = 1.707, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
%   | | | else return 0.06652217508968629;  // std dev = 1.592, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1875208855820038;  // std dev = 0.061, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3535266592312356;  // std dev = 0.545, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09124714788069124;  // std dev = 0.068, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38004354670501994;  // std dev = 0.436, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11938978285794515;  // std dev = 0.253, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12683410912067328;  // std dev = 1.373, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | else return 0.19063819213815536;  // std dev = 0.183, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08217256610886957;  // std dev = 0.037, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09482103155363841;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.016019476632034825;  // std dev = 1.166, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.0023820820245794437;  // std dev = 0.663, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013828836305902972;  // std dev = 1.300, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.105', 'seconds']
Parameter learned model CLL:-0.110548 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 40], 'true,false,true': [5.37e-08, 50, 0], 'true,false,false': [0.305, 26, 3], 'false,true,true,true': [1.279, 2, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.479, 18, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.999, 1, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 62, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.527, 17, 3], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.065, 33, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.226, 0, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.212, 0, 3], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.641, 110, 10], 'false,false,false,false': [2.868, 31, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.873, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.063, 77, 0], 'false,true,false,false': [0.028, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.201, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.41, 0, 35], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.139, 0, 16], 'false,false,true,false': [1.235, 89, 2], 'false,false,false': [0.329, 15, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.822, 60, 34], 'false,true': [0.113, 0, 6], 'false,false,true': [0.659, 0, 22], 'false,false,false,true': [0.14, 31, 0], 'false,false,false,false': [0.117, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.224, 1, 52], 'true,false': [1.205, 97, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.316, 23, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.656, 3, 32], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 66, 7], 'false,false,false,true': [1.707, 36, 11], 'false,false,false,false': [1.592, 20, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.061, 0, 36], 'false,true,true,true': [0.545, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.068, 85, 0], 'false,false,true': [0.436, 0, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 53, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.373, 2, 36], 'true,true,false': [0.183, 0, 4], 'true,false,true': [0.037, 66, 0], 'true,false,false,true': [0.032, 12, 0], 'true,false,false,false': [1.166, 8, 3], 'false,true': [0.663, 20, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.3, 21, 10]}]
{'': [0.22993055555555658, 0.21445847890352004], 'true': [0.023795359904820054, 0.03653260695401372], 'false': [0.19834710743801665, 0.22959183673469394], 'false,true': [0.14876033057851218, 5.046468293750712e-18], 'false,true,true': [0.14876033057851218, nan], 'true,false': [5.773159728050814e-17, 0.0927467300832341]}
{'': [0.02933286278189396, 0.1370183256864934], 'false': [0.0658323917664529, 0.1889046909943951], 'false,false': [0.11664655859801946, 0.20660994550522865], 'false,false,false': [0.0, 0.1956905234325982], 'false,false,true': [nan, 0.11664655859801946], 'false,true': [nan, 0.0658323917664529]}
{'': [0.030601445025257676, 0.1031645503212243], 'false': [nan, 0.1031645503212247], 'false,false': [0.0, 0.09755046612801271], 'false,false,false': [0.05811807649320581, 0.19125131296787642], 'true': [0.0017634860144530556, 0.13231065256322422], 'true,false': [0.0149861188875778, 0.15999999999999998], 'true,true': [0.0017634860144530556, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.05482078530202156, 0.0007121987736787823], 'false': [8.754096198412684e-05, 0.0011936305242474308], 'false,false': [nan, 0.0011936305242474308], 'false,false,false': [nan, 0.0011936305242474308], 'false,true': [nan, 8.754096198412684e-05], 'false,true,false': [5.194106853912727e-05, 4.452309616368197e-05]}
{'': [0.00521308004757099, 0.08888947562183867], 'false': [0.0, 0.08914477663784182], 'false,false': [0.08574904107773279, 0.10791877808049795], 'false,false,true': [0.0012101456058707383, 0.016768074767804963], 'true': [0.0047960717865860505, 0.0], 'false,true': [0.0, nan]}
{'': [0.03530681002070972, 0.08610896040199792], 'false': [0.00212746123355681, 0.0894434268834666], 'false,false': [0.019725897939813143, 0.0005819358620636723], 'true': [nan, 0.0353068100207098], 'true,false': [nan, 0.03530681002070972], 'false,false,false': [0.0006358102642989806, 0.0005069892420138255]}
{'': [0.04733096367245747, 0.05774686212595508], 'false': [nan, 0.05774686212595512], 'false,false': [nan, 0.05774686212595508], 'false,false,false': [nan, 0.05774686212595508], 'true': [0.02828548209378372, 0.014526229084937694]}
{'': [0.07673618944973552, 0.049894219596474845], 'true': [0.07832391993568819, 0.0], 'false': [nan, 0.04989421959647465], 'false,false': [0.023977003145869674, 0.07237417171014152], 'false,false,false': [0.0619677735514558, 0.081738064206161], 'true,false': [0.0, nan]}
{'': [0.003687158737496205, 0.03315912174234971], 'false': [0.023217436852227852, 0.04662962291492892], 'false,false': [0.01269526194551256, 0.0012115585141289223], 'false,true': [0.02705018852409496, 5.413021113772947e-05], 'false,true,true': [0.02705018852409496, nan], 'false,false,false': [nan, 0.0012115585141289223]}
{'': [0.03499269644744623, 0.03553489646004617], 'false': [0.015145057141335015, 0.05454593198559545], 'false,false': [nan, 0.05454593198559547], 'false,false,false': [nan, 0.05454593198559545], 'true': [0.04602477820779889, 0.015833840738553522], 'true,true': [0.04960465445594668, 0.00833270341304563], 'true,false': [2.110573731605439e-05, 0.06074457603123435], 'true,false,false': [8.6399059040639e-05, 0.12367729704570554]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.203
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970727;  // std dev = 0.154, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.10814893509951223;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7279178375554164;  // std dev = 0.115, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.048188791632661085;  // std dev = 0.244, 66.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=6 */
%   | | else return 0.044518224642215325;  // std dev = 0.760, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.17479229827352713;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.08460874256231045;  // std dev = 0.831, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.0988648099358912;  // std dev = 2.930, 56.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5713408523048248;  // std dev = 0.238, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(E, A) )
%   | | then return 0.6984570534362197;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5593004538421277;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5593004538421277;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.750454488483741;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12515322378526084;  // std dev = 0.157, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( follows(K, A), follows(A, L) )
%   | | | then return -0.038339829278986305;  // std dev = 0.800, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.11307354513128788;  // std dev = 2.933, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then return 0.4165541655025873;  // std dev = 0.006, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.4554259914184667;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5391839923560796;  // std dev = 0.231, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.631422698516112;  // std dev = 0.170, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6808296525891189;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7905821225886966;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10807242108717796;  // std dev = 0.008, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.1265743699376383;  // std dev = 0.000955, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.15277636163443156;  // std dev = 0.008, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.2720075212318456;  // std dev = 0.975, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.3209146658504442;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4096934410005973;  // std dev = 0.087, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.44703023577641254;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3172077959642099;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49391333090564954;  // std dev = 0.203, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09902054306177202;  // std dev = 0.900, 97.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.09451728569136907;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.08549361536955734;  // std dev = 1.323, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.262186658230973;  // std dev = 0.004, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.3358911377095932;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.29705519384271184;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08929398227601136;  // std dev = 2.58e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.09561866247885636;  // std dev = 0.197, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2654443068073064;  // std dev = 0.083, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.25870332515156325;  // std dev = 1.296, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.5907753647158193;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12533577390367234;  // std dev = 0.020, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then return 0.21400202042202096;  // std dev = 0.005, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return -0.0330901044765024;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.21144835501662973;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2566691633719024;  // std dev = 0.065, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then return -0.05623239558952607;  // std dev = 0.138, 103.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3420602108193116;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10846843712726727;  // std dev = 0.000706, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.038067129678891774;  // std dev = 0.879, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.07672406456215963;  // std dev = 1.005, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.18376601712208188;  // std dev = 0.015, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.21534139179187547;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.234724970184644;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.27965320849224234;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16836789769378457;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3264991526142697;  // std dev = 0.246, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08350708502721056;  // std dev = 0.114, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.014771038171711114;  // std dev = 0.724, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.04622238392642106;  // std dev = 1.313, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15910689695059774;  // std dev = 0.014, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.06553398567547668;  // std dev = 0.654, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17272792176855795;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.21697294689794192;  // std dev = 0.138, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.25064831070996646;  // std dev = 0.205, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07617130809925016;  // std dev = 0.010, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.30009340998219464;  // std dev = 0.093, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4725563985004284;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11327425266741283;  // std dev = 0.024, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15316376382094077;  // std dev = 0.041, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.07015383615115818;  // std dev = 0.005, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.07196125687930292;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.012417148408149512;  // std dev = 0.509, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(F, H) )
%   | | | then return 0.1799080290291848;  // std dev = 0.165, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2376274438124777;  // std dev = 0.078, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.09708337579439758;  // std dev = 0.009, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( tweets(A, I) )
%   | | then return -0.0879396113680997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.004053687777212661;  // std dev = 0.237, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.475', 'seconds']
Refined model CLL: -0.101253


******************************************
Best model found
******************************************
Results 

CLL : -0.101835 

AUC ROC : 0.992963 

AUC PR : 0.340398 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 6.203 

Total Inference Time : 10.79410457611084 

Total revision time: 22.98013331604004
Best scored revision CLL: -0.101253


Results 

CLL : -0.101835 

AUC ROC : 0.992963 

AUC PR : 0.340398 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 22.997584602355957 

Total Inference Time : 10.79410457611084 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.989
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.0607699838194067;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284227413443275;  // std dev = 0.138, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04721433613250507;  // std dev = 0.252, 105.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05687901483058868;  // std dev = 1.596, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6137084604249932;  // std dev = 0.815, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.12296072827771087;  // std dev = 3.752, 77.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5730174668095782;  // std dev = 0.291, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7296713585792323;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.45969729264708203;  // std dev = 0.958, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5608662244794678;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5608662244794678;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.053074438720062844;  // std dev = 3.049, 162.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=14 */
%   | | | else return 0.061459908491032694;  // std dev = 3.507, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5305775779232876;  // std dev = 2.134, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11710670083566972;  // std dev = 0.043, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return -0.12923367384130383;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16188186129469828;  // std dev = 0.250, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29187692861012077;  // std dev = 1.244, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | else return 0.4680680953813021;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.20920272111712765;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6497258561993794;  // std dev = 0.248, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10509499931145674;  // std dev = 1.262, 173.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=2 */
%   | | else return 0.014391985096441379;  // std dev = 0.307, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02437888569406766;  // std dev = 2.524, 149.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=51 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2628097066956201;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.52483752847555;  // std dev = 0.835, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12296527343785561;  // std dev = 0.158, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.13056222684454075;  // std dev = 0.175, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27819297384281694;  // std dev = 1.136, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else return -0.09003080070157715;  // std dev = 1.243, 169.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03638163571358781;  // std dev = 1.686, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19003738047314792;  // std dev = 0.075, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E) )
%   | | then return 0.24287665271459102;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.049337211535063166;  // std dev = 0.154, 100.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01684918689227683;  // std dev = 1.388, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | | | else return 0.07343234003843108;  // std dev = 2.088, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17906341156798758;  // std dev = 0.063, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30233930609608195;  // std dev = 0.695, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08958683357094438;  // std dev = 0.096, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3862229419146636;  // std dev = 0.579, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11588430470275886;  // std dev = 0.219, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17224258391935496;  // std dev = 0.551, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.06027463780305496;  // std dev = 0.924, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.07930300896926777;  // std dev = 0.030, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09218738301149954;  // std dev = 0.018, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.0244770310889259;  // std dev = 0.929, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.006926916102146168;  // std dev = 0.751, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20703868426400374;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04715308926903398;  // std dev = 1.534, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.147', 'seconds']
Parameter learned model CLL:-0.108671 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 62], 'true,false,true': [7.3e-08, 114, 0], 'true,false,false': [0.273, 34, 3], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [2.98e-08, 32, 0], 'false,false': [0.471, 32, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.138, 0, 52], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 95, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.596, 32, 3], 'false,false,false,true': [0.815, 1, 6], 'false,false,false,false': [3.752, 55, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.291, 0, 43], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.958, 1, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [3.049, 148, 14], 'false,false,false,false': [3.507, 57, 17]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.134, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.043, 105, 0], 'false,true,false,false': [0.017, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.25, 68, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.244, 2, 51], 'true,false': [0.0, 0, 1], 'false,true,true': [0.953, 1, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.248, 0, 22], 'false,false,true,false': [1.262, 171, 2], 'false,false,false': [0.307, 33, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.524, 98, 51], 'false,true': [0.106, 0, 11], 'false,false,true': [0.835, 0, 31], 'false,false,false,true': [0.158, 42, 0], 'false,false,false,false': [0.175, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.136, 1, 76], 'true,false': [1.243, 166, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.686, 32, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.075, 0, 51], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 90, 10], 'false,false,false,true': [1.388, 54, 14], 'false,false,false,false': [2.088, 27, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.063, 0, 52], 'false,true,true,true': [0.695, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.096, 129, 0], 'false,false,true': [0.579, 0, 22], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.219, 48, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.551, 0, 54], 'true,true,false': [0.924, 1, 8], 'true,false,true': [0.03, 112, 0], 'true,false,false,true': [0.018, 17, 0], 'true,false,false,false': [0.929, 23, 3], 'false,true': [0.751, 23, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.534, 25, 15]}]
{'': [0.21092482422931344, 0.21172022684310143], 'false': [0.19834710743801603, 0.22222222222222174], 'true': [0.030273437499999334, 0.019472830139028896], 'false,true': [-1.4802973661668753e-16, 2.7755575615628914e-17], 'true,false': [4.674623261579606e-17, 0.07450693937180408], 'false,true,true': [-1.6148698540002277e-16, 0.0]}
{'': [0.000367825841987673, 0.12445846179490268], 'false': [0.06330286252339272, 0.16840706847791354], 'false,false': [0.07280608979851587, 0.19391018863126386], 'false,false,false': [0.09487079609407985, 0.18284432505369827], 'false,false,true': [nan, 0.07280608979851587], 'false,true': [nan, 0.06330286252339272]}
{'': [0.02290973906175917, 0.10354064231962004], 'false': [nan, 0.10354064231962005], 'false,false': [8.881784197001253e-17, 0.09434602196349166], 'false,false,false': [0.057402908484476184, 0.16621667769168452], 'true': [0.0019687025355333712, 0.11210828753421218], 'true,false': [0.016474976039063227, 0.1312281935779234], 'true,true': [0.0019687025355333712, nan], 'false,false,true': [3.700743415417188e-17, 6.344131569286608e-17]}
{'': [0.04792306039325271, 0.0007582595376436853], 'false': [3.762152969502487e-05, 0.000918102986014573], 'false,false': [nan, 0.000918102986014573], 'false,false,false': [nan, 0.000918102986014573], 'false,true': [nan, 3.7621529695026615e-05], 'false,true,false': [1.7280330629616747e-05, 1.3116613428855576e-05]}
{'': [0.02922748437713205, 0.07322749592483152], 'false': [0.08264462809917358, 0.07055714382757959], 'false,true': [0.08264462809917358, nan], 'false,false': [0.06551380692996017, 0.09416559692687773], 'false,false,true': [0.0027969540132617835, 0.009209362910263705], 'true': [0.029204069915989887, 0.0]}
{'': [0.04275559557403301, 0.0849196031605702], 'false': [0.0010217313444281179, 0.08867004440684874], 'false,false': [0.022513402703296204, 0.0006549385818046691], 'true': [nan, 0.04275559557403276], 'true,false': [nan, 0.04275559557403301], 'false,false,false': [0.0005945136919468254, 0.0006834733589517066]}
{'': [0.040691648224265624, 0.0618101653906574], 'false': [nan, 0.06181016539065732], 'false,false': [nan, 0.0618101653906574], 'false,false,false': [nan, 0.0618101653906574], 'true': [0.016772955629181747, 0.009149133565919041]}
{'': [0.0001611943455422371, 0.04296400044205531], 'false': [nan, 0.042964000442055186], 'false,false': [0.02359024979107162, 0.0580836966615859], 'false,false,false': [0.028322098956514302, 0.099130220979736], 'true': [0.0001106629287726067, 0.0], 'true,false': [0.0, nan]}
{'': [0.003929947220142705, 0.034561809968454794], 'false': [0.020509582825414964, 0.059796744147527], 'false,false': [0.01521435163423575, 0.0009952390543183018], 'false,true': [0.02538659611750729, 7.156114542607506e-05], 'false,true,true': [0.02538659611750729, nan], 'false,false,false': [nan, 0.0009952390543183018]}
{'': [0.020699952216945698, 0.03919495468252551], 'false': [0.016097925761942408, 0.058015245257293895], 'false,false': [0.0, 0.058842128742704516], 'false,false,false': [nan, 0.058842128742704405], 'true': [0.01990267090795229, 0.006031840376416743], 'true,true': [0.005622181939459271, 0.09483975818390827], 'true,false': [7.989590015406484e-06, 0.02115306764787909], 'true,false,false': [1.9616661368783347e-05, 0.03315854073762276]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.069
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return -0.03470820775763064;  // std dev = 0.309, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.6872153476948255;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.7194734122109542;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7324596159740332;  // std dev = 0.136, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.10960338144132868;  // std dev = 0.124, 92.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=2 */
%   | | else if ( follows(A, H), follows(F, H) )
%   | | | then return -0.02524463155642967;  // std dev = 1.847, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | | else return 0.09852005740621808;  // std dev = 1.842, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5766162693538115;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08632753438640223;  // std dev = 2.963, 64.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=16 */
%   | | | else return 0.29553760905459353;  // std dev = 1.735, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5731003317374668;  // std dev = 0.283, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(E, A) )
%   | | then return 0.7227100233041067;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5903070371782125;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5532271003072692;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5521574320877617;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.09235471925407755;  // std dev = 1.448, 99.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=3 */
%   | | | else return 0.04007945031250126;  // std dev = 1.879, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0656444325280875;  // std dev = 2.957, 67.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=16 */
%   | | | else return 0.24715982299538639;  // std dev = 1.737, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.3914183941154907;  // std dev = 1.307, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.5751169201925519;  // std dev = 0.272, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.44396827578182807;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11063494244849474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4153754265426737;  // std dev = 0.000892, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6965140110269613;  // std dev = 0.097, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.7418481177276335;  // std dev = 0.201, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.11537844564937909;  // std dev = 0.014, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return -0.16281442627564763;  // std dev = 0.039, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.34502151212967713;  // std dev = 0.064, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.19809202178180052;  // std dev = 0.945, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.24686124934453088;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.4512606733426904;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.42305887863608566;  // std dev = 0.305, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.09980508334318586;  // std dev = 0.009, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.3189982893350272;  // std dev = 0.000290, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.045737507724484414;  // std dev = 1.771, 65.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=8 */
%   | | | else return 0.1254010047924741;  // std dev = 2.216, 40.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2567515478435034;  // std dev = 0.003, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.4220886344862575;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4163296093695076;  // std dev = 0.212, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09011414955983013;  // std dev = 0.074, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.055178614686739576;  // std dev = 0.135, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2565715146997359;  // std dev = 0.033, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2064452527438;  // std dev = 0.935, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5286292765216735;  // std dev = 0.293, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.14056169420485298;  // std dev = 0.040, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(C, F) )
%   | | then if ( tweets(A, E), follows(C, D) )
%   | | | then return 0.1288765225327434;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.20842140247460067;  // std dev = 0.055, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.10315401139464098;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.3232106597111841;  // std dev = 0.069, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.05014653558857805;  // std dev = 0.119, 100.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.38220603220473953;  // std dev = 0.380, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11393841305341328;  // std dev = 0.095, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.04086621025691473;  // std dev = 0.805, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | | | else return 0.03460155970380989;  // std dev = 1.210, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18472104063510436;  // std dev = 0.017, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return 0.3099706476429568;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return -0.24389837637390296;  // std dev = 0.992, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.38414892949140406;  // std dev = 0.249, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08532610573393257;  // std dev = 0.013, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.23283688575167602;  // std dev = 0.953, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.0974412155231592;  // std dev = 0.667, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029058371140641796;  // std dev = 0.395, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.016618458783347067;  // std dev = 1.168, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1747758207162257;  // std dev = 0.044, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.005302439291032838;  // std dev = 0.345, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.17010980819089874;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.30750726687016894;  // std dev = 0.197, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08030751218964402;  // std dev = 0.014, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.24871243290948558;  // std dev = 0.061, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.40767762777067723;  // std dev = 0.106, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.09442816302324553;  // std dev = 0.054, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.17358706845315158;  // std dev = 0.180, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.1443440121171336;  // std dev = 0.067, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.013547104145383307;  // std dev = 1.324, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.2341154783449432;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06567422191766556;  // std dev = 0.057, 126.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.02391556389147386;  // std dev = 0.134, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else return -0.06815613392414874;  // std dev = 0.104, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2332634954616145;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.017724138646614034;  // std dev = 0.789, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | | else return -0.07470002968337618;  // std dev = 1.010, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.265', 'seconds']
Refined model CLL: -0.102639


******************************************
Best model found
******************************************
Results 

CLL : -0.09987 

AUC ROC : 0.99322 

AUC PR : 0.377383 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 8.069 

Total Inference Time : 10.568515539169312 

Total revision time: 26.786492259979248
Best scored revision CLL: -0.102639


Results 

CLL : -0.09987 

AUC ROC : 0.99322 

AUC PR : 0.377383 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 26.803943546295166 

Total Inference Time : 10.568515539169312 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.262
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8220043567862592;  // std dev = 1.700, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.07802127766644519;  // std dev = 0.244, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.16697246451127667;  // std dev = 0.462, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7018023084249334;  // std dev = 1.310, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04616284084271567;  // std dev = 0.252, 136.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06107281134040664;  // std dev = 1.601, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7456963231095642;  // std dev = 0.098, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15459311404124151;  // std dev = 4.503, 108.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5628000289682413;  // std dev = 0.881, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7357108642040476;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5834176617942439;  // std dev = 0.135, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5686127232405465;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5686127232405465;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01852275183720703;  // std dev = 3.876, 186.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=24 */
%   | | | else return 0.08340068124986297;  // std dev = 3.917, 90.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=22 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.520342814893494;  // std dev = 2.849, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12002844056793388;  // std dev = 0.048, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | | else return -0.13064072097176263;  // std dev = 0.012, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16784581084924968;  // std dev = 0.285, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28404311197692733;  // std dev = 1.599, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | else return 0.48005191647103274;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3073021994596412;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6406477319201941;  // std dev = 0.285, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.10017948399125468;  // std dev = 1.650, 199.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=4 */
%   | | else return 0.028982985607535806;  // std dev = 0.325, 53.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03227911787737179;  // std dev = 2.778, 194.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=67 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25306685177339044;  // std dev = 0.118, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4747799075888774;  // std dev = 1.775, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12382237228891324;  // std dev = 0.151, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.12536378167949963;  // std dev = 0.164, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29522947037189035;  // std dev = 0.900, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | else return -0.08802207397482728;  // std dev = 1.571, 182.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04385295617849737;  // std dev = 2.091, 61.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17803979226147218;  // std dev = 0.993, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.2482097983043754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04269341353249303;  // std dev = 0.146, 120.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.008499929217131053;  // std dev = 1.741, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | | | else return 0.0660294253095562;  // std dev = 2.435, 62.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1508145069029133;  // std dev = 0.169, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29792336386111473;  // std dev = 0.747, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09383776304838203;  // std dev = 0.117, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36994595188157253;  // std dev = 1.153, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1263857641054582;  // std dev = 0.266, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15287483201371702;  // std dev = 1.453, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.15613185157607692;  // std dev = 0.239, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.08271222325189592;  // std dev = 0.028, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0999231690341121;  // std dev = 0.019, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -2.8457760258320875E-4;  // std dev = 0.932, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.018173468197366687;  // std dev = 1.104, 55.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18432346658942567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.056411482263791245;  // std dev = 1.844, 53.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=20 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.025', 'seconds']
Parameter learned model CLL:-0.114985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.7, 3, 80], 'true,false,true': [6.32e-08, 116, 0], 'true,false,false': [0.244, 44, 3], 'false,true,true,true': [0.972, 1, 17], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.94e-08, 47, 0], 'false,false': [0.462, 47, 21]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.31, 2, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 123, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.601, 35, 3], 'false,false,false,true': [0.098, 0, 7], 'false,false,false,false': [4.503, 74, 34]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.881, 1, 56], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.135, 0, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [3.876, 162, 24], 'false,false,false,false': [3.917, 68, 22]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.849, 5, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.048, 137, 0], 'false,true,false,false': [0.012, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.285, 99, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.599, 3, 65], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.285, 0, 31], 'false,false,true,false': [1.65, 195, 4], 'false,false,false': [0.325, 42, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.778, 127, 67], 'false,true': [0.118, 0, 13], 'false,false,true': [1.775, 2, 44], 'false,false,false,true': [0.151, 51, 0], 'false,false,false,false': [0.164, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.9, 0, 99], 'true,false': [1.571, 177, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.091, 41, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 66], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 107, 13], 'false,false,false,true': [1.741, 57, 22], 'false,false,false,false': [2.435, 40, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.169, 2, 66], 'false,true,true,true': [0.747, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.117, 179, 0], 'false,false,true': [1.153, 1, 34], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.266, 84, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.453, 2, 70], 'true,true,false': [0.239, 0, 10], 'true,false,true': [0.028, 131, 0], 'true,false,false,true': [0.019, 18, 0], 'true,false,false,false': [0.932, 14, 3], 'false,true': [1.104, 35, 20], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.844, 33, 20]}]
{'': [0.22356071121686888, 0.21058607266436108], 'true': [0.034838147771809706, 0.01806616733787486], 'false': [0.2076124567474044, 0.21345155709342578], 'false,true': [0.04535147392290242, 5.196788625904988e-17], 'false,true,true': [0.05246913580246885, 1.4802973661668753e-16], 'true,false': [3.4455197315953135e-17, 0.05975554549569926]}
{'': [0.024861203317777754, 0.1306949962067817], 'false': [0.06344896582301313, 0.17618307307415132], 'false,false': [0.06746656012059599, 0.196378821360561], 'false,false,false': [0.0013767603865155742, 0.18774983490591676], 'false,false,true': [nan, 0.06746656012059599], 'false,true': [nan, 0.06344896582301313]}
{'': [0.013847216680772302, 0.11987512890611168], 'false': [nan, 0.11987512890611257], 'false,false': [-3.700743415417188e-17, 0.11230356032613079], 'false,false,false': [0.08078431469449077, 0.17044246566239005], 'true': [0.013605577981659971, 0.011484309371009572], 'true,true': [0.013605577981659971, nan], 'true,false': [0.015977022149806192, 0.0026008951871695656], 'false,false,true': [3.700743415417188e-17, 0.0]}
{'': [0.06293376542578183, 0.0008122575594191175], 'false': [3.188342921530939e-05, 0.000821186925222904], 'false,false': [nan, 0.000821186925222904], 'false,false,false': [nan, 0.000821186925222904], 'false,true': [nan, 3.188342921531464e-05], 'false,true,false': [1.6882736463667318e-05, 4.809240528050318e-06]}
{'': [0.03759488481765353, 0.08208587431181012], 'false': [0.0, 0.08185307530398983], 'false,false': [0.07619235913773319, 0.1057201703953618], 'false,false,true': [0.002615026445863497, 0.013682094339705157], 'true': [0.03759094712680783, 0.0], 'false,true': [0.0, nan]}
{'': [0.03976772060618902, 0.09116967116662225], 'false': [0.001064207773549234, 0.09563734880616657], 'false,false': [0.06850035053914534, 0.00045652320394452356], 'true': [nan, 0.03976772060618885], 'true,false': [nan, 0.03976772060618902], 'false,false,false': [0.00044561962540960704, 0.0004649991536360009]}
{'': [0.04518123608919556, 0.07165197942804148], 'false': [nan, 0.07165197942804137], 'false,false': [nan, 0.07165197942804148], 'false,false,false': [nan, 0.07165197942804148], 'true': [0.008179045019595644, 0.013560428329197963]}
{'': [0.014579935740542798, 0.04605547662990387], 'false': [nan, 0.04605547662990417], 'false,false': [0.02140926684941142, 0.0643409880199417], 'false,false,false': [0.038349288629850736, 0.09560510475305631], 'true': [0.014725137460744038, 0.0], 'true,false': [0.0, nan]}
{'': [0.028513204346842843, 0.03616122291832221], 'false': [0.018816306278595065, 0.06290983721145954], 'false,false': [0.03798042080212703, 0.0008426316090842075], 'false,true': [0.023248235955233787, 7.704297509805057e-05], 'false,true,true': [0.023248235955233787, nan], 'false,false,false': [nan, 0.0008426316090842075]}
{'': [0.024357948619168616, 0.04293671419161168], 'false': [0.02215699395904859, 0.06326922600139809], 'false,false': [0.0, 0.06415999469118382], 'false,false,false': [nan, 0.06415999469118391], 'true': [0.026439523951760517, 0.005928327864916246], 'true,true': [0.02931513205323159, 0.005725831124791733], 'true,false': [6.008882411665037e-06, 0.027327266497509477], 'true,false,false': [1.939267557285154e-05, 0.051135734974261715]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.972
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8434430527465715;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12677568801606612;  // std dev = 0.122, 199.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.3966104735610508;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.6938644736280019;  // std dev = 0.181, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.6251417807271945;  // std dev = 0.296, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5100469663795841;  // std dev = 0.736, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05497715365487676;  // std dev = 2.438, 106.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=9 */
%   | | | else return -0.08167105078478157;  // std dev = 0.886, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.054710289435501484;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.09345097268053308;  // std dev = 0.892, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.10268692974390442;  // std dev = 4.342, 125.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5721499403494309;  // std dev = 0.210, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(E, A) )
%   | | then return 0.24079485785454624;  // std dev = 0.510, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.4303664367462843;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5652980458920214;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.583947472166326;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11418713792528107;  // std dev = 0.864, 119.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=1 */
%   | | | else return 0.025959940326683726;  // std dev = 2.664, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.13380311506327988;  // std dev = 3.364, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
%   | | | else return 0.2108860181906079;  // std dev = 2.280, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(D, F) )
%   | | | then return 0.42636469763368107;  // std dev = 0.048, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.6299039056439714;  // std dev = 0.249, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.4481894436436951;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2184772230229716;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.43554311468729107;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.7523615577323066;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6551174197590466;  // std dev = 1.019, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( follows(J, A) )
%   | then return -0.11454435351344827;  // std dev = 0.009, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return -0.173515055082678;  // std dev = 0.038, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3082159664069137;  // std dev = 0.994, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return -0.004485152997993546;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.4008288356997417;  // std dev = 0.128, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5077137300385662;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3329854227611599;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09102697709258813;  // std dev = 0.687, 101.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=1 */
%   | | | else return -0.025716661356235886;  // std dev = 2.225, 85.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=11 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.04055122305894193;  // std dev = 1.830, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | | else return 0.07148476650919489;  // std dev = 2.767, 69.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2557446019348949;  // std dev = 0.097, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.18289426269846432;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then return -0.03814655476659079;  // std dev = 0.185, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | else return -0.06199210093048467;  // std dev = 0.163, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.07829857978746194;  // std dev = 0.927, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.26632913466462593;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.39070774451759677;  // std dev = 1.394, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.5633367549384158;  // std dev = 0.291, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1356203507929186;  // std dev = 0.039, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.19981647936315486;  // std dev = 0.997, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.08297337127361104;  // std dev = 1.292, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.432033031399951;  // std dev = 0.112, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return -0.10437581271254283;  // std dev = 0.015, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.1051838006799356;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.07881992903507527;  // std dev = 0.022, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(H, A) )
%   | | then return 0.09529745689734945;  // std dev = 0.542, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.004637102998723275;  // std dev = 0.701, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.015137046867885357;  // std dev = 1.527, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.1608663280627803;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.20073864225095056;  // std dev = 0.008, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.2714678633401515;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.06796266976433768;  // std dev = 0.071, 100.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=2 */
%   | | else if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.4565549405477921;  // std dev = 0.236, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09561553294990291;  // std dev = 0.027, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1948368481997637;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 9.647434841593052E-4;  // std dev = 1.627, 77.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=21 */
%   | | | else return 0.04553918187143067;  // std dev = 1.594, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then return 0.17061500168484925;  // std dev = 0.035, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else return 0.07740411303798411;  // std dev = 0.238, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16616701886070395;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.31995738114621564;  // std dev = 0.838, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.07990378854478566;  // std dev = 0.008, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.29801830926212586;  // std dev = 0.074, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.40920919397347494;  // std dev = 0.161, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.1135855843011859;  // std dev = 0.018, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.19949385925811722;  // std dev = 0.117, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.11311154780423767;  // std dev = 0.170, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | else return 0.22412521538217658;  // std dev = 0.091, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.07002118226145353;  // std dev = 0.056, 180.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2138053612173475;  // std dev = 0.196, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1008708894402476;  // std dev = 0.006, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.0709751547009082;  // std dev = 0.280, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14149487648916204;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01165901294088642;  // std dev = 0.935, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | | | else return 0.08455247899298804;  // std dev = 1.021, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.893', 'seconds']
Refined model CLL: -0.107445


******************************************
Best model found
******************************************
Results 

CLL : -0.10307 

AUC ROC : 0.993251 

AUC PR : 0.35229 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 10.972 

Total Inference Time : 15.789959192276001 

Total revision time: 37.532911809921266
Best scored revision CLL: -0.107445


Results 

CLL : -0.10307 

AUC ROC : 0.993251 

AUC PR : 0.35229 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 37.550363096237184 

Total Inference Time : 15.789959192276001 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.735
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return -0.08302753548872299;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0.2291166770349954;  // std dev = 0.483, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6906317490339331;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03114449286812474;  // std dev = 0.268, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04966670683308535;  // std dev = 1.775, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7594908663704243;  // std dev = 0.112, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14221035977423527;  // std dev = 4.901, 128.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5476297472416085;  // std dev = 1.453, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7351785221832983;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.48369870773859514;  // std dev = 0.984, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5985440122305952;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5648189597015768;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.022724229066678675;  // std dev = 4.632, 272.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=34 */
%   | | | else return 0.061727588101072144;  // std dev = 4.065, 97.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5433815277837634;  // std dev = 2.371, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12071456003846345;  // std dev = 0.042, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | | else return -0.129412399714982;  // std dev = 0.010, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16604407484365316;  // std dev = 0.296, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2876672494878468;  // std dev = 1.718, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4784722514774399;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.298208082652564;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.512614883956294;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6303664125742758;  // std dev = 0.275, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10317782849918375;  // std dev = 1.798, 243.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=5 */
%   | | else return 0.018186302323467737;  // std dev = 0.309, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031221137841461712;  // std dev = 3.104, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25100312211920034;  // std dev = 0.186, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5001092080355845;  // std dev = 1.346, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12378590941690991;  // std dev = 0.189, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return -0.1310343454895135;  // std dev = 0.227, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26174548055835883;  // std dev = 2.217, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.09011084565581047;  // std dev = 1.685, 276.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018780381361722553;  // std dev = 2.332, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18195956978964306;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26395371426631437;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05341425163497527;  // std dev = 0.152, 191.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0031651322080196004;  // std dev = 2.056, 125.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=28 */
%   | | | else return 0.029632919332397985;  // std dev = 2.564, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14801389063837234;  // std dev = 0.190, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28304574718611003;  // std dev = 0.878, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09191985052747992;  // std dev = 0.096, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3914439953155158;  // std dev = 0.760, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1191268850261321;  // std dev = 0.270, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15380108165374812;  // std dev = 1.815, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.15973786324307457;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08262004560743229;  // std dev = 0.029, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09166191876005098;  // std dev = 0.035, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.043794400301300475;  // std dev = 1.134, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.004813256019550059;  // std dev = 1.571, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19110338871169819;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012156233108881496;  // std dev = 2.018, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.012', 'seconds']
Parameter learned model CLL:-0.111453 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 158, 0], 'true,false,false': [0.235, 64, 4], 'false,true,true,true': [1.351, 2, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.08e-08, 39, 0], 'false,false': [0.483, 39, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 150, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.775, 41, 4], 'false,false,false,true': [0.112, 0, 8], 'false,false,false,false': [4.901, 88, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.453, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.984, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.632, 238, 34], 'false,false,false,false': [4.065, 74, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.371, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.042, 164, 0], 'false,true,false,false': [0.01, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.296, 88, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.718, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.275, 0, 39], 'false,false,true,false': [1.798, 238, 5], 'false,false,false': [0.309, 54, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.104, 154, 82], 'false,true': [0.186, 0, 22], 'false,false,true': [1.346, 1, 52], 'false,false,false,true': [0.189, 67, 0], 'false,false,false,false': [0.227, 66, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.217, 4, 121], 'true,false': [1.685, 269, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.332, 62, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 172, 19], 'false,false,false,true': [2.056, 97, 28], 'false,false,false,false': [2.564, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.19, 3, 78], 'false,true,true,true': [0.878, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.096, 222, 0], 'false,false,true': [0.76, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.27, 90, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.815, 3, 85], 'true,true,false': [0.365, 0, 19], 'true,false,true': [0.029, 150, 0], 'true,false,false,true': [0.035, 26, 0], 'true,false,false,false': [1.134, 29, 4], 'false,true': [1.571, 52, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.018, 47, 21]}]
{'': [0.21982274714542804, 0.23437500000000056], 'false': [0.2353076216712593, 0.23335067637877316], 'false,true': [0.06858710562414343, 4.2700885562506023e-17], 'true': [0.009433106575965852, 0.01738585637089816], 'false,true,true': [0.07939508506616269, 0.0], 'true,false': [-1.4053456007913375e-16, 0.055363321799307884]}
{'': [0.03363296511214411, 0.13143080504800592], 'false': [0.07187055693817593, 0.17574889473455033], 'false,false': [0.07002986101276498, 0.1977839718713118], 'false,false,false': [0.0015603696487251906, 0.18763411031471477], 'false,true': [nan, 0.07187055693817593], 'false,false,true': [nan, 0.07002986101276498]}
{'': [0.040404479614943055, 0.11564973049409889], 'false': [nan, 0.11564973049410093], 'false,false': [0.001856945580547318, 0.10432416787028426], 'false,false,false': [0.07889351076949912, 0.1703776033709945], 'true': [0.030610343696875895, 0.0967198020410454], 'true,false': [0.016397238769768546, 0.10768346552985214], 'true,true': [0.030610343696875895, nan], 'false,false,true': [0.0056868958404252545, -5.921189464667501e-17]}
{'': [0.03534955056316024, 0.0007158070993323808], 'false': [2.1008071474332908e-05, 0.000996943716057211], 'false,false': [nan, 0.000996943716057211], 'false,false,false': [nan, 0.000996943716057211], 'false,true': [nan, 2.1008071474332908e-05], 'false,true,false': [1.0735800970917162e-05, 2.3057723702202272e-06]}
{'': [0.03688152598689235, 0.08026243368839711], 'false': [0.002093654226719387, 0.07964024131194912], 'false,false': [0.07585598298433545, 0.09524749842149348], 'false,false,true': [0.001946102688731271, 0.013301754059690385], 'true': [0.03689308149649091, 0.0], 'false,true': [9.276154945980775e-06, 0.0]}
{'': [0.04081260150993527, 0.08481124771147132], 'false': [0.001573929387874555, 0.09044331363544222], 'false,false': [0.03417869108905946, 0.0006680228248854231], 'true': [nan, 0.040812601509935195], 'true,false': [nan, 0.04081260150993527], 'false,false,false': [0.0005337788276753773, 0.0007778333911629056]}
{'': [0.04590311521145579, 0.060416208099518746], 'false': [nan, 0.06041620809951884], 'false,false': [nan, 0.060416208099518746], 'false,false,false': [nan, 0.060416208099518746], 'true': [0.03932479961361115, 0.010290506390191773]}
{'': [0.011685033019535211, 0.03982739289041148], 'false': [nan, 0.039827392890411456], 'false,false': [0.02311771872949055, 0.053713376727541125], 'false,false,false': [0.03380587419633638, 0.08536508748578724], 'true': [0.011804539925938842, 9.905298324781875e-05], 'true,false': [9.905298324781875e-05, nan]}
{'': [0.03593744517034681, 0.03512664582061353], 'false': [0.020546124396192567, 0.060528780021501985], 'false,false': [0.014423655305073946, 0.0008099084535688775], 'false,true': [0.020285444054119934, 4.16315871429073e-05], 'false,true,true': [0.020285444054119934, nan], 'false,false,false': [nan, 0.0008099084535688775]}
{'': [0.02717399595798822, 0.044947337457818155], 'false': [0.032048808951553494, 0.059054451976574815], 'false,false': [0.0, 0.05987643092299218], 'false,false,false': [nan, 0.05987643092299214], 'true': [0.03204199299017053, 0.006382668379578841], 'true,true': [0.03744184582548529, 0.007003161428245904], 'true,false': [5.734064140535308e-06, 0.022369563335106032], 'true,false,false': [4.705778047029515e-05, 0.03894726682834436]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.25
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else return -0.06185106490048773;  // std dev = 0.271, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.14981560176617903;  // std dev = 0.455, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7038484122109543;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7327496982712521;  // std dev = 0.197, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0531819105046313;  // std dev = 2.913, 152.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=13 */
%   | | | else return -0.09630953333048288;  // std dev = 0.830, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.01684038230224274;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return -0.0811148877922267;  // std dev = 1.169, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5267390036963515;  // std dev = 1.262, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.12424390535839361;  // std dev = 4.667, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.5472236730488046;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.7250731573352672;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then return 0.4702914395207824;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2689796861125375;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.562120128048828;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6832326608707382;  // std dev = 0.990, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12094062162683583;  // std dev = 0.083, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10981052246918771;  // std dev = 3.513, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return 0.1417256555351135;  // std dev = 2.923, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), follows(F, D) )
%   | | | then return 0.4068638982760841;  // std dev = 0.992, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.4993963534028172;  // std dev = 0.220, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.35015057122049453;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.4886222949619346;  // std dev = 0.094, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.251769604516999;  // std dev = 0.942, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.5120562954926545;  // std dev = 0.957, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.6457663709624384;  // std dev = 1.465, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   else if ( follows(J, A) )
%   | then return -0.10896215711511811;  // std dev = 0.004, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.16235816582696028;  // std dev = 0.163, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.32880992764649325;  // std dev = 0.044, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.4150761531286218;  // std dev = 0.106, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.4761760179938861;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3273284964051525;  // std dev = 0.035, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.516889792801381;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.47184997827593245;  // std dev = 0.981, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.0951435468320727;  // std dev = 1.456, 234.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07715172907062999;  // std dev = 0.726, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return 0.08497969359330744;  // std dev = 2.143, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2596129636775908;  // std dev = 0.024, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.05206892494785991;  // std dev = 0.153, 156.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=18 */
%   | | else return -0.0710643469549162;  // std dev = 0.079, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.2857819501517331;  // std dev = 0.161, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2612445196152854;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.30240996733556236;  // std dev = 1.759, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.5688494916233835;  // std dev = 0.355, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.11961614117950539;  // std dev = 0.076, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return -0.11950716949268021;  // std dev = 0.264, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.2149168228143721;  // std dev = 0.020, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.21519959478029252;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.014267620978031803;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.21095285245432027;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A) )
%   | then return -0.04197919163648758;  // std dev = 0.135, 224.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2156601539087115;  // std dev = 1.632, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | | else return -0.11347522583545644;  // std dev = 0.056, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0074191725284062735;  // std dev = 1.514, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.1463288951488068;  // std dev = 1.440, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18355504399696598;  // std dev = 0.017, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.07766993628438265;  // std dev = 0.439, 116.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=1 */
%   | | | else return -0.05533331152638549;  // std dev = 0.361, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.36108167628555143;  // std dev = 0.298, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08280338912868583;  // std dev = 0.036, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.1795303418925532;  // std dev = 1.449, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.10012544460541475;  // std dev = 0.005, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03711431592651571;  // std dev = 1.417, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.0564898171389214;  // std dev = 1.557, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then return 0.166824265740773;  // std dev = 0.044, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, F) )
%   | | then return 0.17236323820239283;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0918523460890549;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16148263451380349;  // std dev = 0.100, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2365515149216582;  // std dev = 1.001, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07638465837087344;  // std dev = 0.043, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.2696134903538029;  // std dev = 0.085, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.37247387508487034;  // std dev = 0.320, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.11909740241726015;  // std dev = 0.038, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14509300217470555;  // std dev = 0.107, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.06392001349346092;  // std dev = 0.055, 201.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.13565164253270726;  // std dev = 0.994, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.0753786336986606;  // std dev = 0.287, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.052132225444948485;  // std dev = 0.374, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.003112046963959137;  // std dev = 0.575, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.26646015791617617;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.012030576112767826;  // std dev = 1.082, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0.02443915397690811;  // std dev = 1.183, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.728', 'seconds']
Refined model CLL: -0.103455


******************************************
Best model found
******************************************
Results 

CLL : -0.101319 

AUC ROC : 0.993919 

AUC PR : 0.408542 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 9.25 

Total Inference Time : 12.90705418586731 

Total revision time: 35.524246797561645
Best scored revision CLL: -0.103455


Results 

CLL : -0.101319 

AUC ROC : 0.993919 

AUC PR : 0.408542 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 35.54169808387756 

Total Inference Time : 12.90705418586731 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.115
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.10814893509951219;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6142102543162175;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.055034800966779235;  // std dev = 0.234, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.19574091233851854;  // std dev = 1.243, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5157437487059806;  // std dev = 0.983, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5811852392386014;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5811852392386014;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019338519513494586;  // std dev = 1.745, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | | else return -0.057355648565102536;  // std dev = 0.918, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.45075251458304344;  // std dev = 1.451, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11608851124793572;  // std dev = 0.014, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.11362450093050122;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15180464813800787;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.35901293703970655;  // std dev = 0.155, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3135141112461338;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3308602296677879;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6659802954912248;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08238066789719194;  // std dev = 0.961, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else return -0.09950625300631807;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0724613856703507;  // std dev = 1.316, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2620855009519434;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5134262654783934;  // std dev = 0.304, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11407488579610814;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.1067176374253358;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2545858689070628;  // std dev = 0.966, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return -0.07628775690910372;  // std dev = 0.851, 54.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0957804573562359;  // std dev = 0.325, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.10175109541987477;  // std dev = 1.334, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.048277888219937656;  // std dev = 0.145, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.03180433629876673;  // std dev = 0.749, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.014268826708463078;  // std dev = 0.483, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20099221258983613;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.258597690863356;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09249248164724014;  // std dev = 0.024, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46182899217011447;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10929467669643024;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.2018446520366434;  // std dev = 0.311, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.15336953518590565;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08566312934012481;  // std dev = 0.006, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08518828742747879;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09841433051659941;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, G) )
%   | then return 0.06750881665069623;  // std dev = 0.537, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024670629160836934;  // std dev = 0.379, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.777', 'seconds']
Parameter learned model CLL:-0.110328 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [5.05e-08, 48, 0], 'true,false,false': [0.0, 3, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,false': [0.433, 3, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.338, 2, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.234, 44, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.243, 5, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.983, 1, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [1.745, 35, 5], 'false,false,false,false': [0.918, 11, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.451, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.014, 25, 0], 'false,true,false,false': [0.0, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.025, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.155, 0, 12], 'true,false': [0.0, 0, 1], 'false,true,true': [1.05e-08, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.098, 0, 4], 'false,false,true,false': [0.961, 44, 2], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.316, 23, 16], 'false,true': [0.0, 0, 5], 'false,false,true': [0.304, 0, 4], 'false,false,false,true': [0.044, 5, 0], 'false,false,false,false': [0.051, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.966, 1, 19], 'true,false': [0.851, 51, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.325, 2, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.334, 2, 17], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.145, 35, 4], 'false,false,false,true': [0.749, 8, 3], 'false,false,false,false': [0.483, 4, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.047, 0, 13], 'false,true,true,true': [0.315, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.024, 45, 0], 'false,false,true': [0.05, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.019, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.311, 0, 17], 'true,true,false': [0.02, 0, 4], 'true,false,true': [0.006, 29, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.537, 4, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.379, 4, 1]}]
{'': [0.20659722222222243, 0.23999999999999985], 'false': [0.24999999999999992, 0.18750000000000003], 'false,true': [1.4802973661668753e-16, 0.0], 'true': [0.0, 5.659960517696876e-17], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [5.3198186596622086e-17, 0.0]}
{'': [0.09418282548476484, 0.08498259949828044], 'false': [0.054532997479978855, 0.16833265415602633], 'false,false': [0.0, 0.19886171927769988], 'false,false,false': [0.0, 0.1932421306960088], 'false,true': [nan, 0.054532997479978855], 'false,false,true': [nan, 0.0]}
{'': [0.06914734987950147, 0.1016804015248589], 'false': [nan, 0.10168040152485887], 'false,false': [0.0, 0.07500833168562618], 'false,false,false': [0.07610788950412406, 0.07023136811012569], 'true': [0.07435423697848507, 0.0], 'true,true': [0.07435423697848507, nan], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0]}
{'': [0.07794951343057556, 0.00017751489549191958], 'false': [7.351717541490693e-06, 0.00012975048663921572], 'false,false': [nan, 0.00012975048663921572], 'false,false,false': [nan, 0.00012975048663921572], 'false,true': [nan, 7.351717541490693e-06], 'false,true,false': [8.082091330883223e-06, -5.9476233462061954e-18]}
{'': [0.0019996219865820665, 0.06104664064079211], 'false': [1.850371707708594e-17, 0.054932408889334795], 'false,false': [0.05988672730495761, -1.3877787807814458e-18], 'false,false,true': [0.00239632667155798, 0.02008236205553593], 'true': [0.002007015371469504, 0.0], 'false,true': [1.850371707708594e-17, nan]}
{'': [0.04442190659768686, 0.06857604472853977], 'false': [0.0, 0.07889066651775771], 'false,false': [0.023101485536754063, 0.00038956393095312264], 'true': [nan, 0.04442190659768692], 'true,false': [nan, 0.04442190659768686], 'false,false,false': [0.0003815020178370876, 0.00037276864715953776]}
{'': [0.044001265095335196, 0.021187619645943796], 'true': [0.04666573826186181, 0.01342594851674284], 'false': [nan, 0.021187619645943796], 'false,false': [nan, 0.021187619645943796], 'false,false,false': [nan, 0.021187619645943796]}
{'': [0.09364807247492496, 0.030465764075828478], 'true': [0.09364807247492496, nan], 'false': [nan, 0.030465764075828523], 'false,false': [0.021161291419525573, 0.05008608933331918], 'false,false,false': [0.05096239700472243, 0.04669883121595704]}
{'': [0.0021982316333677933, 0.028282354317304574], 'false': [0.018971823377915285, 0.07279852016001519], 'false,false': [0.000817068615712809, 6.183088563882731e-05], 'false,true': [0.011047606431627844, 1.2615228252762142e-05], 'false,true,true': [0.011047606431627844, nan], 'false,false,false': [nan, 6.183088563882731e-05]}
{'': [0.020395512717387473, 0.0381100899095002], 'false': [0.04124032777070902, 0.02877114426957041], 'false,false': [nan, 0.02877114426957041], 'false,false,false': [nan, 0.02877114426957041], 'true': [0.004996872638340715, 6.058595958428934e-06], 'true,true': [0.005701704442395587, 9.908850859439641e-05], 'true,false': [1.398337751560592e-06, 3.2799040461611514e-05], 'true,false,false': [-1.1564823173178713e-18, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.323
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.636140078877621;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.30218644326469374;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5741320526539807;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.028856026326120013;  // std dev = 1.082, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | | else return -0.11687949860659842;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15395906487949182;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.04928995467580642;  // std dev = 1.015, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.42991308092527486;  // std dev = 0.024, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5250993581104181;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20913770432527043;  // std dev = 0.722, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.6160899361921586;  // std dev = 0.248, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return -0.1086423330946266;  // std dev = 0.014, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.1011805894056332;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.10578660402846861;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.19323936341251874;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32898571463208515;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.2790701365143432;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.34285480870821217;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.481705532775133;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09030520991536559;  // std dev = 0.872, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | else return -0.09234307185607177;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.26360403461204435;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2586236303496934;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2973159405501124;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09058819886222833;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.08752087417393581;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27475308648924474;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.2476388437676839;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1469431226591463;  // std dev = 0.092, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.10237904607330688;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C), recursion_accounttype(C, B) )
%   | | | then return 0.21588396951750446;  // std dev = 0.001, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2044494407143491;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24488563295617302;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.08441381832396667;  // std dev = 0.000212, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.07928695728714494;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.22360018844116575;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return -0.07552189637726234;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11941790386747402;  // std dev = 0.640, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.042586596150558924;  // std dev = 0.501, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( tweets(A, E), follows(D, C) )
%   | | then return 0.1849409333898692;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.139379275505622;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1606891529517589;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.1992737279521844;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3395206301141355;  // std dev = 0.209, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08629228952400501;  // std dev = 0.022, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.07725095722857436;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.029455950177734624;  // std dev = 0.504, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.13596955561229554;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.15322616115574247;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.17797125715782058;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.17366286522909302;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.05008961125460387;  // std dev = 0.807, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.07181029574979715;  // std dev = 0.026, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.06452080986405283;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.37456804064128696;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1390981918177726;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14140548831161884;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1719272749826258;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15320203502276647;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.06694657538463915;  // std dev = 0.008, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.06574646796150155;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.059743620262052745;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0706409745579012;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, I) )
%   | then return 0.08230787776356671;  // std dev = 0.381, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.06260977446057231;  // std dev = 0.448, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.456', 'seconds']
Refined model CLL: -0.103355


******************************************
Best model found
******************************************
Results 

CLL : -0.108329 

AUC ROC : 0.993875 

AUC PR : 0.315371 

Precision : 0.34878 

Recall : 0.916667 

F1 : 0.5053 

Total Learning Time : 4.323 

Total Inference Time : 7.1358256340026855 

Total revision time: 14.858264959335328
Best scored revision CLL: -0.103355


Results 

CLL : -0.108329 

AUC ROC : 0.993875 

AUC PR : 0.315371 

Precision : 0.34878 

Recall : 0.916667 

F1 : 0.5053 

Total Learning Time : 14.875716245651246 

Total Inference Time : 7.1358256340026855 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.459
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8081489350995117;  // std dev = 1.378, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17064893509951234;  // std dev = 0.464, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7338922139996341;  // std dev = 0.135, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.037762789731220506;  // std dev = 0.259, 78.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13294298333209426;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7473839334745775;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.18190705270314889;  // std dev = 2.286, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5973472662145783;  // std dev = 0.347, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7579168065818436;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5835404111048867;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5641344661106589;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5641344661106589;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05354619349653654;  // std dev = 2.144, 85.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=7 */
%   | | | else return 0.06525588627268078;  // std dev = 1.899, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4642639963744132;  // std dev = 2.052, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.115740247796306;  // std dev = 0.034, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.1282287718327052;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1790717443998448;  // std dev = 0.108, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3438385069739277;  // std dev = 0.368, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.14899036983421973;  // std dev = 0.635, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.21638401712305538;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6600477670592582;  // std dev = 0.097, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07487969769742885;  // std dev = 1.735, 105.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=5 */
%   | | else return -0.1017971502879034;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018355880152638317;  // std dev = 1.873, 100.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=30 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.29056682402438405;  // std dev = 0.161, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5513943691833578;  // std dev = 0.528, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11948879843901904;  // std dev = 0.089, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12825270498032512;  // std dev = 0.130, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.292511808950621;  // std dev = 0.563, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return -0.061043859332562185;  // std dev = 1.488, 88.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.042644709813025206;  // std dev = 0.513, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1934915071856189;  // std dev = 0.068, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, E) )
%   | | then return 0.3072606028341728;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04761298221322254;  // std dev = 0.165, 66.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.013854518164543682;  // std dev = 0.926, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.19878478056832732;  // std dev = 1.048, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13696330268913873;  // std dev = 0.229, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23735508816018558;  // std dev = 0.377, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0925773713199297;  // std dev = 0.043, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43464218878773386;  // std dev = 0.400, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13740462851338936;  // std dev = 0.129, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18986860851016674;  // std dev = 0.480, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.15019479076334888;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08402573395752726;  // std dev = 0.024, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07991210785865477;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.016357080994480116;  // std dev = 0.252, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.036929336366005386;  // std dev = 0.697, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05273181890753828;  // std dev = 0.946, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.010', 'seconds']
Parameter learned model CLL:-0.111908 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.378, 2, 38], 'true,false,true': [8.16e-08, 90, 0], 'true,false,false': [0.249, 14, 1], 'false,true,true,true': [0.926, 1, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.464, 11, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.135, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 70, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 10, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.286, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.347, 0, 26], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [2.11e-08, 0, 5], 'false,false,false,true': [2.144, 78, 7], 'false,false,false,false': [1.899, 17, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.052, 3, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 79, 0], 'false,true,false,false': [0.003, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.108, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.368, 0, 27], 'true,false': [0.635, 1, 2], 'false,true,true': [0.949, 1, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.097, 0, 7], 'false,false,true,false': [1.735, 100, 5], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.873, 70, 30], 'false,true': [0.161, 0, 9], 'false,false,true': [0.528, 0, 11], 'false,false,false,true': [0.089, 14, 0], 'false,false,false,false': [0.13, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.563, 0, 39], 'true,false': [1.488, 82, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.513, 7, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.068, 0, 30], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.165, 58, 8], 'false,false,false,true': [0.926, 17, 6], 'false,false,false,false': [1.048, 5, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.229, 2, 29], 'false,true,true,true': [0.377, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.043, 72, 0], 'false,false,true': [0.4, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.129, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.48, 0, 32], 'true,true,false': [0.012, 0, 6], 'true,false,true': [0.024, 62, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.252, 2, 1], 'false,true': [0.697, 10, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.946, 8, 5]}]
{'': [0.19662306777645788, 0.23852040816326484], 'false': [0.25, 0.2148437499999998], 'false,true': [0.12244897959183662, -2.7755575615628915e-18], 'true': [0.04750000000000139, 0.009433106575963787], 'false,true,true': [0.12244897959183662, nan], 'true,false': [7.401486830834377e-17, 0.06222222222222227]}
{'': [0.0005910954889899706, 0.10953082169575498], 'false': [0.06727093282428719, 0.17761684506115483], 'false,false': [0.0, 0.20784186945697058], 'false,false,false': [0.0, 0.2009894125199749], 'false,true': [nan, 0.06727093282428719], 'false,false,true': [nan, 0.0]}
{'': [0.005034886664088624, 0.09803425814279201], 'false': [nan, 0.09803425814279197], 'false,false': [1.4802973661668753e-16, 0.07897363499904106], 'false,false,false': [0.05409485637782067, 0.1638841849928774], 'true': [0.004632978381120363, 0.006757139399896861], 'true,false': [0.0, 0.0], 'true,true': [0.004632978381120363, nan], 'false,false,true': [0.0, 8.881784197001253e-17]}
{'': [0.07946752274230796, 0.0005782048394449651], 'false': [3.079193717135588e-05, 0.0008387245805547204], 'false,false': [nan, 0.0008387245805547204], 'false,false,false': [nan, 0.0008387245805547204], 'false,true': [nan, 3.079193717135588e-05], 'false,true,false': [1.4786796772741422e-05, 7.624589788308526e-07]}
{'': [0.0213681053805737, 0.06133450053674795], 'false': [0.09, 0.054200570758874356], 'false,true': [0.09, nan], 'false,false': [0.05860489238717154, 0.0], 'false,false,true': [0.0013390824930841205, 0.02866521439342168], 'true': [0.005003635691781042, 0.13447911568757473]}
{'': [0.03508810631447914, 0.08953567009578396], 'false': [0.0028961825460623375, 0.10012323055904457], 'false,false': [0.02530931951283605, 0.0009038248103839321], 'true': [nan, 0.035088106314479124], 'true,false': [nan, 0.03508810631447914], 'false,false,false': [0.0005619586440898601, 0.0012072879477456253]}
{'': [0.04652980608847459, 0.02196259848136868], 'true': [0.008132825947436757, 0.02516032820234212], 'false': [nan, 0.02196259848136868], 'false,false': [nan, 0.02196259848136868], 'false,false,false': [nan, 0.02196259848136868]}
{'': [0.0005510730993604971, 0.04334194317399546], 'false': [nan, 0.04334194317399547], 'false,false': [0.027154877198827244, 0.06651081585800056], 'false,false,false': [0.03727223757256595, 0.10992373849289885], 'true': [0.0001519129405857485, 0.0], 'true,false': [0.0, nan]}
{'': [0.0523489098724327, 0.032981814705558436], 'false': [0.015046605600584356, 0.08407263729153543], 'false,false': [0.017808328508912168, 0.0011171371169801344], 'false,true': [0.011864906159493807, 2.611343810925611e-05], 'false,true,true': [0.011864906159493807, nan], 'false,false,false': [nan, 0.0011171371169801344]}
{'': [0.018473605004411593, 0.04768026532607075], 'false': [0.030383490794742226, 0.06883082751176178], 'false,false': [nan, 0.06883082751176178], 'false,false,false': [nan, 0.06883082751176178], 'true': [0.006284308631059998, 0.0012541793456345893], 'true,true': [0.007209305138334003, 2.5510292244841175e-05], 'true,false': [9.608884461361337e-06, 0.0070190790454666375], 'true,false,false': [0.0, 0.021125498640036145]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.622
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7237136902852321;  // std dev = 0.129, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.03583211799543051;  // std dev = 2.114, 66.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=7 */
%   | | | else return -0.1254446385283914;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08703927258569386;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.13069648940795903;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10810247947603513;  // std dev = 2.379, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5543191212474833;  // std dev = 6.66e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.7286587555172732;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.7346096238641344;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5543191212474835;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.48125647259947346;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.12027638966946756;  // std dev = 0.059, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04774974691916721;  // std dev = 1.473, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.2716197885093056;  // std dev = 1.650, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.41673727358104345;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.16673727358104323;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.46796181105427265;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5650770554929738;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.46565451099435134;  // std dev = 0.118, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6803199182673032;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7424240338239542;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(L, A) )
%   | then return -0.1080298816400989;  // std dev = 0.004, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return -0.179479714181565;  // std dev = 0.041, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.18685226054291834;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.31742416293934345;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3582866918558392;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.42774186066351905;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.35160152357451874;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.331551477892378;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5216582339478621;  // std dev = 0.180, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.06589975454381668;  // std dev = 1.510, 83.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=5 */
%   | | else return -0.09105227222932118;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2832861126027816;  // std dev = 0.028, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.31110215199217833;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09314517464773152;  // std dev = 0.010, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.08922810861241516;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2754858386124173;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2494234576965387;  // std dev = 0.858, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5963501257079377;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14426801902619904;  // std dev = 0.136, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11270308514838064;  // std dev = 0.142, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(C, E) )
%   | then if ( follows(D, A), follows(C, D) )
%   | | then return 0.21833062874603198;  // std dev = 0.056, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.26084978813400905;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20204741047597327;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then return -0.02665087163092192;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2535687665975488;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), follows(A, H) )
%   | | | then return -0.06295046536113942;  // std dev = 0.589, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   | | | else return -0.0820104504409992;  // std dev = 0.024, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.01464860410547356;  // std dev = 0.834, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.06017249123389584;  // std dev = 1.145, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18232175257454986;  // std dev = 0.012, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.25368462972567307;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.07500493276419452;  // std dev = 0.755, 57.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=2 */
%   | | | else return -1.5498641987537364E-4;  // std dev = 0.711, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | else return -0.30129644933527394;  // std dev = 0.483, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.17153025528137325;  // std dev = 0.878, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.1014519283954749;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0551980986354776;  // std dev = 0.654, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07232854393079219;  // std dev = 0.898, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then return 0.16039484596994397;  // std dev = 0.032, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.053185952432630024;  // std dev = 0.466, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.16452788375952404;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.21414883091499418;  // std dev = 0.174, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.017902317979900866;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.0751724700211158;  // std dev = 0.045, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.12875020811784502;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.438628560507811;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11369268241804077;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1378118737688537;  // std dev = 0.046, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.24791763130573968;  // std dev = 0.078, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.14556944803701055;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.0709069027160711;  // std dev = 0.021, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.04718482048191564;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.24380710035769537;  // std dev = 0.190, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08310568111248713;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.14220672570746185;  // std dev = 0.389, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.007643329267387662;  // std dev = 0.248, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.108', 'seconds']
Refined model CLL: -0.103216


******************************************
Best model found
******************************************
Results 

CLL : -0.110467 

AUC ROC : 0.994512 

AUC PR : 0.36564 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 4.622 

Total Inference Time : 5.767549991607666 

Total revision time: 15.794611364364624
Best scored revision CLL: -0.103216


Results 

CLL : -0.110467 

AUC ROC : 0.994512 

AUC PR : 0.36564 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 15.812062650680542 

Total Inference Time : 5.767549991607666 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.806
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.809761838325319;  // std dev = 1.690, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.09837280403092258;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.26991364098186527;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.692675594253665;  // std dev = 1.397, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04901882066894465;  // std dev = 0.244, 123.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1302927516979357;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7615122216522997;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18572046735826764;  // std dev = 2.482, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5735821763520124;  // std dev = 0.913, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7695367345831234;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.4166955893243055;  // std dev = 0.826, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5738465583177498;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5738465583177498;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.058988729610826414;  // std dev = 2.712, 141.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=11 */
%   | | | else return -0.02739449053076279;  // std dev = 2.171, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49493653313781544;  // std dev = 1.933, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11396923107350247;  // std dev = 0.034, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return -0.11729857738572505;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16834556118185168;  // std dev = 0.146, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3191888704123113;  // std dev = 0.914, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return 0.23304087513059552;  // std dev = 0.701, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3162151415636424;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6512930671680824;  // std dev = 0.124, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0793809996474955;  // std dev = 1.712, 136.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=5 */
%   | | else return -0.09960479151957947;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028788140028869983;  // std dev = 2.354, 154.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=49 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26805216162050827;  // std dev = 0.167, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5125994062988171;  // std dev = 0.584, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11628870668290063;  // std dev = 0.116, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.1095294936175309;  // std dev = 0.113, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2626283338119378;  // std dev = 1.513, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else return -0.07502509669183331;  // std dev = 1.553, 143.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01342085558800384;  // std dev = 0.621, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1795684696740187;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return 0.3052337824525496;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0529187429960147;  // std dev = 0.150, 118.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.009549170711547211;  // std dev = 1.033, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | | else return 0.06145041245419994;  // std dev = 1.360, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17603698624697778;  // std dev = 0.154, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25235189232300487;  // std dev = 0.525, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08744702404921953;  // std dev = 0.032, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4317298997319312;  // std dev = 0.458, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12311248623456235;  // std dev = 0.119, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12634394926406514;  // std dev = 1.800, 55.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=51 */
%   | | else return 0.14313826295466334;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08134370176871117;  // std dev = 0.008, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07625640400405863;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.04623902195981179;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.024043776481335564;  // std dev = 0.778, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.2774040556724054;  // std dev = 0.759, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07322857747621164;  // std dev = 1.026, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.795', 'seconds']
Parameter learned model CLL:-0.108243 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.69, 3, 59], 'true,false,true': [8.16e-08, 109, 0], 'true,false,false': [0.204, 22, 1], 'false,true,true,true': [0.943, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.492, 10, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.397, 2, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.244, 112, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 17, 0], 'false,false,false,true': [0.07, 0, 4], 'false,false,false,false': [2.482, 20, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 40], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.826, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [2.712, 130, 11], 'false,false,false,false': [2.171, 40, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.933, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 104, 0], 'false,true,false,false': [0.0, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.146, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.914, 1, 42], 'true,false': [0.701, 1, 3], 'false,true,true': [2.98e-08, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.124, 0, 12], 'false,false,true,false': [1.712, 131, 5], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.354, 105, 49], 'false,true': [0.167, 0, 11], 'false,false,true': [0.584, 0, 15], 'false,false,false,true': [0.116, 24, 0], 'false,false,false,false': [0.113, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.513, 2, 61], 'true,false': [1.553, 136, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.621, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.99, 1, 48], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 107, 11], 'false,false,false,true': [1.033, 30, 8], 'false,false,false,false': [1.36, 15, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.154, 1, 45], 'false,true,true,true': [0.525, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.032, 126, 0], 'false,false,true': [0.458, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.119, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.8, 4, 51], 'true,true,false': [0.01, 0, 8], 'true,false,true': [0.008, 92, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.279, 7, 1], 'false,true': [0.778, 15, 8], 'false,false,true': [0.759, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.026, 9, 6]}]
{'': [0.21362525241789806, 0.21975425330812803], 'false': [0.19976218787158156, 0.24221453287197234], 'true': [0.04604578563995787, 0.007518365472910895], 'false,true': [0.09876543209876527, 2.7755575615628915e-18], 'false,true,true': [0.09876543209876527, nan], 'true,false': [6.111319401606367e-17, 0.041587901701323295]}
{'': [0.03827386295423145, 0.09972328887551486], 'false': [0.05947103919766917, 0.17323311661342028], 'false,false': [-1.6326809185664067e-17, 0.20971444245840723], 'false,false,false': [0.0012203546935424248, 0.19872706033146673], 'false,true': [nan, 0.05947103919766917], 'false,false,true': [nan, -1.6326809185664067e-17]}
{'': [0.03551407930733111, 0.08427730408856236], 'false': [nan, 0.08427730408856242], 'false,false': [-1.3664283380001927e-16, 0.06474037409831784], 'false,false,false': [0.05217850200718667, 0.10249259248244336], 'true': [0.020325610989338133, 0.13091035110936558], 'true,false': [0.0, 0.1363429423666463], 'true,true': [0.020325610989338133, nan], 'false,false,true': [-1.1102230246251565e-16, -1.2688263138573217e-16]}
{'': [0.048512341437111126, 0.0005150627761707032], 'false': [1.0563453059374536e-05, 0.0009627677646508585], 'false,false': [nan, 0.0009627677646508585], 'false,false,false': [nan, 0.0009627677646508585], 'false,true': [nan, 1.0563453059372786e-05], 'false,true,false': [1.0892163710576672e-05, -7.240584943207542e-18]}
{'': [0.0288073096320898, 0.062301084083818174], 'false': [6.832141690000964e-17, 0.058612517053549036], 'false,false': [0.0596751429525435, -1.1564823173178713e-18], 'false,false,true': [0.00127334016578932, 0.021540303313286074], 'true': [0.01943668970087823, 0.12275161187313477], 'false,true': [6.832141690000964e-17, nan]}
{'': [0.035973220503694184, 0.07587516269204299], 'false': [0.002544246660405112, 0.08242978533102832], 'false,false': [0.02271178613790372, 0.0006352429967242681], 'true': [nan, 0.035973220503694406], 'true,false': [nan, 0.035973220503694184], 'false,false,false': [0.0005612185537589506, 0.0007078354190038617]}
{'': [0.0470373558572905, 0.018346423730487154], 'true': [0.03635871617757349, 0.0168748446560041], 'false': [nan, 0.018346423730487154], 'false,false': [nan, 0.018346423730487154], 'false,false,false': [nan, 0.018346423730487154]}
{'': [0.019925493099264696, 0.03269055262223335], 'false': [nan, 0.03269055262223333], 'false,false': [0.022379138472230505, 0.04977654595430195], 'false,false,false': [0.028063525428051777, 0.08408825828985736], 'true': [0.02001630039886169, 0.0], 'true,false': [0.0, nan]}
{'': [0.023573653651390792, 0.028164211225924527], 'false': [0.015053124046045118, 0.07894771988905926], 'false,false': [0.019055595509902587, 0.0007437474903549226], 'false,true': [0.014492060632673089, 8.054585874096876e-06], 'false,true,true': [0.014492060632673089, nan], 'false,false,false': [nan, 0.0007437474903549226]}
{'': [0.029292415909285267, 0.06128486895281533], 'false': [0.026313143116599352, 0.10856336242941085], 'false,false': [0.2877317806445654, 0.07021032900910798], 'false,false,false': [nan, 0.07021032900910798], 'true': [0.05148285424888945, 0.000798777499138914], 'true,true': [0.0589334918513831, 1.3487501926527645e-05], 'true,false': [7.122069964627797e-07, 0.004806147864859051], 'true,false,false': [0.0, 0.00973604132911299]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.104
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.1334477035559499;  // std dev = 0.091, 119.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.3581489350995123;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7314538288733297;  // std dev = 0.157, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.03370821936344922;  // std dev = 2.421, 83.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | | | else return 0.042799112585745355;  // std dev = 0.757, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.0906996377618748;  // std dev = 0.171, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12636946232055693;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7417903431046245;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08465915448502481;  // std dev = 2.543, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5900500941614076;  // std dev = 0.060, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(E, A) )
%   | | then return 0.768879292796987;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.579437078896972;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5524061296545414;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.42740612965454133;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), follows(A, H) )
%   | | | then return -0.0688758478456156;  // std dev = 2.016, 90.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=6 */
%   | | | else return -0.11863579627557383;  // std dev = 0.141, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19981103599268496;  // std dev = 1.588, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.03310018758157501;  // std dev = 1.852, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.4252076347147665;  // std dev = 0.196, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.32804010619395935;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.33625612200913;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5544764421458883;  // std dev = 0.181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6979384445199184;  // std dev = 0.137, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7519586775788228;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(K, A) )
%   | then if ( tweets(A, L) )
%   | | then return -0.11379836409640005;  // std dev = 0.051, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.1046927433806456;  // std dev = 0.004, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.16673154214407915;  // std dev = 0.115, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.3200420767764777;  // std dev = 5.58e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.34983900855146643;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5045676167682275;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.1320833617490979;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3206489235225835;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.36701383986748887;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5362584302841285;  // std dev = 0.162, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08549373806177711;  // std dev = 1.562, 144.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=5 */
%   | | else return -0.09176673925204824;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2977221198236063;  // std dev = 0.076, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.09710795727560532;  // std dev = 0.015, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.27233846076493473;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07708067716305878;  // std dev = 0.061, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.01859520253633351;  // std dev = 0.960, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2846024450817478;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.33488827866237797;  // std dev = 0.111, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5695011507813442;  // std dev = 0.262, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1140143630052491;  // std dev = 0.030, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.2046210276937456;  // std dev = 0.011, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, E), tweets(C, F) )
%   | | then return 0.27665251866165685;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23043097721435377;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.3160434303325575;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22750324049962814;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.07646670557582083;  // std dev = 0.654, 95.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=2 */
%   | | | else return -0.028883504784893047;  // std dev = 0.866, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.011235136778116923;  // std dev = 0.881, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.10575895278898684;  // std dev = 1.038, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.08615696839792159;  // std dev = 1.655, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return 0.18569712183229026;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.19268514929405534;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3117590478627633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.05263167129839271;  // std dev = 0.128, 134.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return -0.0865586417541671;  // std dev = 0.693, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.021861627000178328;  // std dev = 0.804, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.23423587675133328;  // std dev = 0.409, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.045408719551074825;  // std dev = 0.979, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.15983506410356044;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.2600973735317072;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.009137371607308587;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16450213507173955;  // std dev = 0.045, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.4006676605029648;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07765827521661374;  // std dev = 0.005, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.27288175299367096;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.42910920277049625;  // std dev = 0.151, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14377738079895794;  // std dev = 0.027, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1400816121169418;  // std dev = 0.043, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.26662658157803615;  // std dev = 0.168, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.14259853539027284;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0700940135380952;  // std dev = 0.026, 116.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.12158373087838177;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22873391259481593;  // std dev = 0.077, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10555231380188694;  // std dev = 0.010, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.13031602207796036;  // std dev = 0.283, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.0068708871160970365;  // std dev = 0.236, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.586', 'seconds']
Refined model CLL: -0.106173


******************************************
Best model found
******************************************
Results 

CLL : -0.106471 

AUC ROC : 0.994853 

AUC PR : 0.389531 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 6.104 

Total Inference Time : 8.609668493270874 

Total revision time: 21.76773229598999
Best scored revision CLL: -0.106173


Results 

CLL : -0.106471 

AUC ROC : 0.994853 

AUC PR : 0.389531 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 21.78518358230591 

Total Inference Time : 8.609668493270874 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.098
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7875606998053944;  // std dev = 2.361, 85.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=79 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.1795775065280838;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7203459695480614;  // std dev = 1.003, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05618882189207912;  // std dev = 0.235, 184.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07198744112577214;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7618013418261186;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09487693755578736;  // std dev = 3.123, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5615369441910182;  // std dev = 1.242, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0.7443359350494552;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.815814772599041;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6010893311631242;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5725085375202523;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5725085375202523;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05888621614904584;  // std dev = 3.076, 187.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=14 */
%   | | | else return 0.0054804420677552045;  // std dev = 2.644, 58.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5009562527024735;  // std dev = 2.188, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11463785958557698;  // std dev = 0.037, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return -0.12054203512355588;  // std dev = 0.009, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1544492834927174;  // std dev = 0.127, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29895573794644725;  // std dev = 1.551, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return 0.4137754467161723;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3140243804207653;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5944181999619252;  // std dev = 1.017, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.07459212732724199;  // std dev = 2.231, 187.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=8 */
%   | | else return -0.10838327408707303;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03316208542485091;  // std dev = 2.932, 200.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=68 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25945784129976557;  // std dev = 0.102, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49927377082938545;  // std dev = 1.301, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1115311206500305;  // std dev = 0.080, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.10824126146857632;  // std dev = 0.109, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24988615153919377;  // std dev = 2.229, 87.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=83 */
%   | else return -0.07331843520214927;  // std dev = 2.106, 189.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0045388797977366085;  // std dev = 0.995, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18808814908153143;  // std dev = 0.993, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.225650776909246;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04678523867899302;  // std dev = 0.159, 145.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.014405953286994748;  // std dev = 1.415, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0.08744956564451979;  // std dev = 1.691, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11307181840558513;  // std dev = 0.287, 68.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23185579778512364;  // std dev = 1.022, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08940252323226486;  // std dev = 0.029, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47906491531529544;  // std dev = 0.541, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10452097261548152;  // std dev = 0.094, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17234876511356514;  // std dev = 1.625, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | else return 0.14660540634176494;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08318896446095687;  // std dev = 0.114, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08290447725037277;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.022368222972531996;  // std dev = 0.481, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.0015393533170026906;  // std dev = 0.964, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21692503508659067;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07087038618245181;  // std dev = 1.323, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.773', 'seconds']
Parameter learned model CLL:-0.109261 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.361, 6, 79], 'true,false,true': [0.0, 141, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.953, 1, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.467, 19, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.003, 1, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.235, 169, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.084, 0, 4], 'false,false,false,false': [3.123, 44, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.242, 2, 55], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.117, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.076, 173, 14], 'false,false,false,false': [2.644, 49, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.188, 3, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.037, 128, 0], 'false,true,false,false': [0.009, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.127, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.551, 3, 58], 'true,false': [0.128, 0, 4], 'false,true,true': [2.11e-08, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.017, 1, 15], 'false,false,true,false': [2.231, 179, 8], 'false,false,false': [2.28e-09, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.932, 132, 68], 'false,true': [0.102, 0, 12], 'false,false,true': [1.301, 1, 20], 'false,false,false,true': [0.08, 25, 0], 'false,false,false,false': [0.109, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.229, 4, 83], 'true,false': [2.106, 179, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.995, 9, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 63], 'true,false,true': [0.034, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 130, 15], 'false,false,false,true': [1.415, 28, 11], 'false,false,false,false': [1.691, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.287, 6, 62], 'false,true,true,true': [1.022, 1, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 166, 0], 'false,false,true': [0.541, 0, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.094, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.625, 2, 71], 'true,true,false': [0.008, 0, 8], 'true,false,true': [0.114, 139, 0], 'true,false,false,true': [5.27e-09, 14, 0], 'true,false,false,false': [0.481, 10, 2], 'false,true': [0.964, 30, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.323, 15, 8]}]
{'': [0.21856795923874275, 0.2222222222222217], 'false': [0.22592152199762194, 0.21811224489795927], 'false,true': [0.0826446280991734, -3.0839528461809902e-18], 'true': [0.06560553633217969, 0.011903033822034967], 'false,true,true': [0.0826446280991734, nan], 'true,false': [-8.188879046880587e-17, 0.07360000000000004]}
{'': [0.015242620128515702, 0.09273081696254962], 'false': [0.05545697414425748, 0.16358562101442461], 'false,false': [0.058593749999999986, 0.18138575414441402], 'false,false,false': [0.0017788671783582899, 0.16532197408435775], 'false,false,true': [nan, 0.058593749999999986], 'false,true': [nan, 0.05545697414425748]}
{'': [0.026876706370243475, 0.08462046483337951], 'false': [nan, 0.08462046483337943], 'false,false': [1.1842378929335003e-16, 0.06789846160846423], 'false,false,false': [0.05060542152896395, 0.12049134900625447], 'true': [0.027152854559198854, 0.01364150513813415], 'true,true': [0.02705309161729867, 0.0], 'true,false': [0.003347652709614901, 0.003419426285777072], 'false,false,true': [0.0, 0.0]}
{'': [0.046489713514678, 0.0002902788989978524], 'false': [1.4181851929933463e-05, 0.0006251323954916976], 'false,false': [nan, 0.0006251323954916976], 'false,false,false': [nan, 0.0006251323954916976], 'false,true': [nan, 1.4181851929933463e-05], 'false,true,false': [1.0562217210871236e-05, 3.5510551279482883e-06]}
{'': [0.038046681317932006, 0.06180815556363579], 'false': [2.960594732333751e-17, 0.05854176219263712], 'false,false': [0.062096164603910715, 5.9476233462061954e-18], 'false,false,true': [0.06459076827134086, 0.026605889631535814], 'true': [0.0394609924876741, 0.0041061667972129845], 'false,true': [2.960594732333751e-17, nan]}
{'': [0.04297376328518539, 0.08552664311077408], 'false': [0.0008623795287196293, 0.09231337890021653], 'false,false': [0.08056452647911316, 0.00030720015890290384], 'true': [nan, 0.042973763285185346], 'true,false': [nan, 0.04297376328518539], 'false,false,false': [0.0002589795624851621, 0.00033713378646096676]}
{'': [0.05662633101880453, 0.06184751416059325], 'false': [nan, 0.06184751416059325], 'false,false': [nan, 0.06184751416059325], 'false,false,false': [nan, 0.06184751416059325], 'true': [0.05711048205101696, 0.023475479347108575]}
{'': [0.014986889827226055, 0.042530093112655196], 'false': [nan, 0.04253009311265515], 'false,false': [0.02539661747494861, 0.07385652194228871], 'false,false,false': [0.05134511402046062, 0.10210603453148182], 'true': [0.01539388158742741, 0.0005949585826508438], 'true,false': [0.0005949585826508438, nan]}
{'': [0.08251010354960134, 0.033544605671287996], 'false': [0.01689661084112901, 0.0920035164624797], 'false,false': [0.01947607621033501, 0.0004394586836081862], 'false,true': [0.04356020495236548, 4.97121215874927e-06], 'false,true,true': [0.04356020495236548, nan], 'false,false,false': [nan, 0.0004394586836081862]}
{'': [0.025552205871056492, 0.04363534078021563], 'false': [0.0232224154950203, 0.07380593295265421], 'false,false': [0.0, 0.07612605487318672], 'false,false,false': [nan, 0.07612605487318672], 'true': [0.03264335158620657, 0.0017302316233448608], 'true,true': [0.03615433108211515, 8.39704379012804e-06], 'true,false': [9.294812901584474e-05, 0.009812316711031593], 'true,false,false': [1.982541115402065e-18, 0.019286752881034645]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.415
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8427643197148973;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.7956489350995123;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.12958112625018134;  // std dev = 0.110, 163.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.6543861828592387;  // std dev = 0.252, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | else return 0.7314288862528782;  // std dev = 0.146, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.5003457788188339;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.03597183942416499;  // std dev = 2.693, 104.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=11 */
%   | | | else return -0.004124073252571363;  // std dev = 0.795, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.03796486693681891;  // std dev = 0.262, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.08331868948840353;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7774892556239501;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10720326091938055;  // std dev = 2.947, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5747531769104831;  // std dev = 0.913, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.488136679577345;  // std dev = 0.989, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.7392966194461548;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6861633610696858;  // std dev = 0.259, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5848992669623637;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.738186510008513;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12217308897487365;  // std dev = 0.024, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11645170495726588;  // std dev = 1.843, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.253878828439974;  // std dev = 1.959, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), follows(D, F) )
%   | | | then return 0.42083132023261305;  // std dev = 1.354, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.6635844461288872;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24488186179931287;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4402178182141301;  // std dev = 0.103, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5740504494393243;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6908265337650964;  // std dev = 0.159, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11046115970829067;  // std dev = 0.035, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else return -0.10987031985827875;  // std dev = 0.006, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.19073341157865845;  // std dev = 0.285, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.3040131706617467;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.33475692564881077;  // std dev = 0.004, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5135739704979702;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.18564676970955835;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.12020553358230268;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3429285680907663;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.07250151565985827;  // std dev = 1.464, 156.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=8 */
%   | | | else return 0.05188158907826044;  // std dev = 2.220, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
%   | | else return -0.0957353840919395;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.282231638899718;  // std dev = 0.038, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.015538910715235416;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.060632336736668714;  // std dev = 1.397, 123.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=8 */
%   | | | else return -0.028971676688389264;  // std dev = 0.504, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.052795261723270565;  // std dev = 0.129, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2762134348810121;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.38400384559456285;  // std dev = 0.179, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5169675662003202;  // std dev = 0.189, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1401192593454242;  // std dev = 0.054, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.15320780361555078;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.2299260754635866;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2168225512339607;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.30175296087245557;  // std dev = 0.051, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.3049302165053522;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.194904329713394;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10872978478579176;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.05926304009066425;  // std dev = 0.120, 159.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=8 */
%   | | else return 0.021304902191973105;  // std dev = 0.249, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.16769906422203731;  // std dev = 0.987, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return -0.04948948498077341;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.20780419931185942;  // std dev = 0.029, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.23022366530473287;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.07301591786617632;  // std dev = 0.073, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   | | else return 0.016359957380067448;  // std dev = 0.191, 62.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=14 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.21045294151723942;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.022542946739297073;  // std dev = 1.275, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return -0.038068824121245536;  // std dev = 1.473, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.16471661834768575;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.03341051909294335;  // std dev = 1.209, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.07455933859704879;  // std dev = 0.871, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.21039577130315737;  // std dev = 0.173, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17725743270078528;  // std dev = 0.099, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.47947187670767466;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07970255132877047;  // std dev = 0.005, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3930306286264686;  // std dev = 0.048, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1348599625403183;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15515252469645435;  // std dev = 0.176, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | else return 0.15224525301725356;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07463416344389374;  // std dev = 0.063, 147.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2216208210269421;  // std dev = 0.185, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10590541471134021;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.054891017191843805;  // std dev = 0.313, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17379941981700753;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.05566296095493362;  // std dev = 0.894, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.06717312589675385;  // std dev = 0.901, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.313', 'seconds']
Refined model CLL: -0.108914


******************************************
Best model found
******************************************
Results 

CLL : -0.106558 

AUC ROC : 0.994161 

AUC PR : 0.356014 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 7.415 

Total Inference Time : 8.091071128845215 

Total revision time: 24.79404543685913
Best scored revision CLL: -0.108914


Results 

CLL : -0.106558 

AUC ROC : 0.994161 

AUC PR : 0.356014 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 24.811496723175047 

Total Inference Time : 8.091071128845215 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.635
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.70121428134866;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03694975957350428;  // std dev = 0.259, 211.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.076485955888411;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7593516840964301;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09479570044646826;  // std dev = 3.293, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5529272713513929;  // std dev = 1.361, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7306353467109331;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.820876983218854;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.59846877852863;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645587093895966;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5645587093895966;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04714265337621102;  // std dev = 3.706, 234.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=21 */
%   | | | else return 0.028822434155488248;  // std dev = 2.820, 61.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5154814703682163;  // std dev = 1.956, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11691493837895384;  // std dev = 0.031, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | | else return -0.1246616343097032;  // std dev = 0.003, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15772752957237335;  // std dev = 0.162, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29961529092277234;  // std dev = 1.521, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.4080905246557732;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3056881434954808;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.635729416370501;  // std dev = 0.170, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08341412042896176;  // std dev = 2.336, 248.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=9 */
%   | | else return -0.10682685729937476;  // std dev = 2.28e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027775066266993265;  // std dev = 3.292, 279.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1818951988842415;  // std dev = 0.979, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5397479560268527;  // std dev = 0.776, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11777461621930554;  // std dev = 0.119, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.1126135259330655;  // std dev = 0.163, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2637460114292148;  // std dev = 2.019, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07401474124787412;  // std dev = 2.036, 234.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021633417048174546;  // std dev = 0.678, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1858632503314473;  // std dev = 0.996, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23118039585075284;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04787351769587646;  // std dev = 0.151, 209.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03348737226463201;  // std dev = 1.845, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
%   | | | else return 0.07885932262181317;  // std dev = 1.643, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14982129594816995;  // std dev = 0.202, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28295925742840383;  // std dev = 0.677, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08998926905433342;  // std dev = 0.044, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.454207364752057;  // std dev = 0.585, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10986536832549548;  // std dev = 0.177, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1300522863392739;  // std dev = 2.521, 100.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=94 */
%   | | else return 0.14338658063719312;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08344621766637794;  // std dev = 0.028, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07981563084940699;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.06938434715557176;  // std dev = 0.765, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.02740022657494909;  // std dev = 1.020, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.31424037342435496;  // std dev = 0.732, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007507512669982254;  // std dev = 1.387, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.724', 'seconds']
Parameter learned model CLL:-0.109125 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 189, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.085, 0, 4], 'false,false,false,false': [3.293, 49, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.361, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.118, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.706, 213, 21], 'false,false,false,false': [2.82, 50, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.956, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 196, 0], 'false,true,false,false': [0.003, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.162, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.521, 2, 73], 'true,false': [0.128, 0, 4], 'false,true,true': [1.49e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.17, 0, 23], 'false,false,true,false': [2.336, 239, 9], 'false,false,false': [2.28e-09, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.292, 188, 91], 'false,true': [0.979, 1, 13], 'false,false,true': [0.776, 0, 22], 'false,false,false,true': [0.119, 34, 0], 'false,false,false,false': [0.163, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.019, 3, 107], 'true,false': [2.036, 223, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.678, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 80], 'true,false,true': [0.051, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 187, 22], 'false,false,false,true': [1.845, 56, 13], 'false,false,false,false': [1.643, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.202, 3, 77], 'false,true,true,true': [0.677, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 212, 0], 'false,false,true': [0.585, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 48, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.521, 6, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.028, 170, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.765, 14, 2], 'false,true': [1.02, 25, 12], 'false,false,true': [0.732, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.387, 25, 8]}]
{'': [0.22222222222222435, 0.21869822485207113], 'true': [0.01868480725623786, 0.009433106575963555], 'false': [0.21606648199445933, 0.2222222222222223], 'false,true': [0.07100591715976314, 1.3322676295501878e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.8924256101565169e-16, 0.05536332179930797]}
{'': [0.023570783845887348, 0.09794695180259062], 'false': [0.0672783609379254, 0.16011461830582221], 'false,false': [0.052469135802469084, 0.17883820952080123], 'false,false,false': [0.001818128276117048, 0.16433043327006533], 'false,true': [nan, 0.0672783609379254], 'false,false,true': [nan, 0.052469135802469084]}
{'': [0.02588004903235235, 0.08870699762477632], 'false': [nan, 0.08870699762477638], 'false,false': [0.0, 0.07446464170654911], 'false,false,false': [0.058698114600241665, 0.13036864129071793], 'true': [0.025785253718639555, 0.014331417689327441], 'true,true': [0.0257107773103453, 0.0], 'true,false': [0.0030917278804204473, 0.0034627927559380822], 'false,false,true': [-4.9343245538895844e-17, -5.551115123125783e-17]}
{'': [0.030130650974010423, 0.00028616630421132553], 'false': [1.2437220867248013e-05, 0.0007268941675821052], 'false,false': [nan, 0.0007268941675821052], 'false,false,false': [nan, 0.0007268941675821052], 'false,true': [nan, 1.2437220867248013e-05], 'false,true,false': [4.760520543194061e-06, 2.1316102593316177e-07]}
{'': [0.03006166302132189, 0.05938994140025944], 'false': [1.3061447348531253e-17, 0.056706868702917745], 'false,false': [0.06040175335300913, 6.938893903907228e-18], 'false,false,true': [0.0012599694852732065, 0.02199423844369772], 'true': [0.030849820797874572, 0.004112619584288296], 'false,true': [1.3061447348531253e-17, nan]}
{'': [0.038853765579357345, 0.07823913990728576], 'false': [0.06845532993209198, 0.07651591913052123], 'false,false': [0.027389284764523566, 0.0004888346437580722], 'true': [nan, 0.03885376557935733], 'true,false': [nan, 0.038853765579357345], 'false,false,false': [0.0004132565478212074, 0.0005294461656612159]}
{'': [0.048715684160760886, 0.020889636040431123], 'true': [0.03705655465278532, 0.01771665797412714], 'false': [nan, 0.020889636040431123], 'false,false': [nan, 0.020889636040431123], 'false,false,false': [nan, 0.020889636040431123]}
{'': [0.01203428357309173, 0.03688614267062782], 'false': [nan, 0.03688614267062783], 'false,false': [0.0229138904707463, 0.06549432572251572], 'false,false,false': [0.04931099867968184, 0.09639628788150012], 'true': [0.012249697330839991, 0.0013058680961014063], 'true,false': [0.0013058680961014063, nan]}
{'': [0.04086676952077349, 0.02916994618740331], 'false': [0.017733511466350393, 0.06720486248699274], 'false,false': [0.020164564082543034, 0.000649170949950271], 'false,true': [0.014307508936002675, 9.253313184931291e-06], 'false,true,true': [0.014307508936002675, nan], 'false,false,false': [nan, 0.000649170949950271]}
{'': [0.033037156016748954, 0.051665012209877015], 'false': [0.028104333650325865, 0.07581905044975376], 'false,false': [0.2675978903110415, 0.058280564617807784], 'false,false,false': [nan, 0.058280564617807784], 'true': [0.058318662799028906, 0.0029745491247799654], 'true,true': [0.06355136853979561, 1.4365512241475296e-05], 'true,false': [4.505031613945847e-06, 0.02092797543563229], 'true,false,false': [-2.3129646346357427e-18, 0.03657732343542735]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.024
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13271864480916423;  // std dev = 0.095, 219.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17393840878372288;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.709452021251863;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6594281704122605;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(A, G) )
%   | | | then return -0.0338742180730802;  // std dev = 3.327, 155.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=17 */
%   | | | else return -0.1264499724948461;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0051385397741832315;  // std dev = 0.306, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12355002750515387;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13286983146543774;  // std dev = 0.151, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.42485874204018564;  // std dev = 1.129, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.11506191487538214;  // std dev = 3.109, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5631481514224717;  // std dev = 0.038, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.6067644231595605;  // std dev = 0.925, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7449750994533202;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7133284281770848;  // std dev = 0.225, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5630127011425605;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7251092289528333;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12292699265052186;  // std dev = 0.078, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12954560925195693;  // std dev = 2.062, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.08956262728016043;  // std dev = 2.279, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.4052943322358178;  // std dev = 0.982, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.5495471172244308;  // std dev = 0.407, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.4234761504176358;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.03007359273447115;  // std dev = 1.184, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.3946429418934444;  // std dev = 0.887, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5209688336184208;  // std dev = 0.253, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6675763466014376;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7571231543169228;  // std dev = 0.177, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12049789378790181;  // std dev = 0.023, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.23473372772425377;  // std dev = 1.904, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.3258214384197198;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.31944034604626226;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3528354465114008;  // std dev = 0.171, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.4908102987199681;  // std dev = 0.261, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3228123335549062;  // std dev = 0.048, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.46030655985315017;  // std dev = 0.159, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08554755082702849;  // std dev = 2.127, 237.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=9 */
%   | | else return -0.0903792241887292;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(A, E) )
%   | | | then return 0.25362281877590875;  // std dev = 0.988, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.052779943436817314;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3984360718205671;  // std dev = 0.044, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.2610077639283448;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.05690455759342886;  // std dev = 0.117, 179.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26371257443067114;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.37594757203366497;  // std dev = 0.219, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5165206266671352;  // std dev = 0.914, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.1210436774982236;  // std dev = 0.031, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.20974655317883292;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2175021000925763;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.031062285990483024;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2078592344846941;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.08094470016423506;  // std dev = 0.075, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | else return 0.0020572139724837845;  // std dev = 0.187, 87.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25856006003496546;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0155035568999106;  // std dev = 1.210, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.07094539492857165;  // std dev = 1.552, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.177056208820848;  // std dev = 0.107, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.21941370759703538;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07424140208647437;  // std dev = 0.078, 161.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=3 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.3252294190838238;  // std dev = 0.071, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08680643851578534;  // std dev = 0.672, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21338433455589678;  // std dev = 1.157, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11811710035222757;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09516233774939753;  // std dev = 0.505, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.12510845124807782;  // std dev = 1.239, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.11970316400795511;  // std dev = 1.379, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.16393788425419;  // std dev = 0.067, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.26320261610021045;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.02151335601653139;  // std dev = 0.930, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22017965477407656;  // std dev = 0.080, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07624296282799832;  // std dev = 0.069, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.27319529097335754;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.43184688206279404;  // std dev = 0.260, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12487494182767185;  // std dev = 0.200, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13101939130064363;  // std dev = 0.176, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.1278585314930919;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06807098371178456;  // std dev = 0.035, 222.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.06931314238177352;  // std dev = 0.915, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.24077250183089355;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.09470398366805464;  // std dev = 0.018, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2298771812472683;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10817382622083896;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11292276472601724;  // std dev = 0.272, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.050', 'seconds']
Refined model CLL: -0.104112


******************************************
Best model found
******************************************
Results 

CLL : -0.102603 

AUC ROC : 0.994938 

AUC PR : 0.381058 

Precision : 0.337719 

Recall : 0.987179 

F1 : 0.503268 

Total Learning Time : 10.024 

Total Inference Time : 10.959394931793213 

Total revision time: 31.81427892112732
Best scored revision CLL: -0.104112


Results 

CLL : -0.102603 

AUC ROC : 0.994938 

AUC PR : 0.381058 

Precision : 0.337719 

Recall : 0.987179 

F1 : 0.503268 

Total Learning Time : 31.831730207443236 

Total Inference Time : 10.959394931793213 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.142
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.10814893509951223;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7362502874578738;  // std dev = 0.134, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06754524384602875;  // std dev = 0.227, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13294298333209423;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7611380874192215;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10354762843214906;  // std dev = 2.023, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5629688502630544;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.757483886712829;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6024437669660494;  // std dev = 0.141, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5629688502630545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5629688502630545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012705265484652195;  // std dev = 2.070, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | | | else return -0.04906159305020839;  // std dev = 1.315, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5242666953704844;  // std dev = 0.821, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11692722533511847;  // std dev = 0.000288, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11326426574989298;  // std dev = 9.01e-05, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15334962713722425;  // std dev = 0.058, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30880533848852265;  // std dev = 0.150, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.4643564453671074;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30279663731277984;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6369298508799475;  // std dev = 0.198, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11301367313426557;  // std dev = 0.093, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.07365818934490555;  // std dev = 0.164, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014944008665998565;  // std dev = 1.375, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26486574988773215;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43448971465088926;  // std dev = 0.433, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11502752451782985;  // std dev = 0.065, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.10638101483354306;  // std dev = 0.045, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28473322644818466;  // std dev = 0.499, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.09978786416245686;  // std dev = 0.057, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.035564977075135;  // std dev = 0.644, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13681830776540482;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( follows(A, E) )
%   | | then return 0.2392543437611807;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.07501343546669184;  // std dev = 0.156, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0189623031947491;  // std dev = 0.810, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return 0.038564157441046354;  // std dev = 0.706, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16951944829997967;  // std dev = 0.022, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24953249265845315;  // std dev = 0.299, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08409711246897272;  // std dev = 0.031, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3394464025066495;  // std dev = 0.247, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09643370440345903;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1262887532876541;  // std dev = 0.838, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.13900319378763215;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07563527119539072;  // std dev = 0.005, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08602307596592752;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.01967987241990069;  // std dev = 0.223, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03209473268307604;  // std dev = 0.626, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1927702326780092;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05321219591624731;  // std dev = 0.607, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.601', 'seconds']
Parameter learned model CLL:-0.100496 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.976, 1, 20], 'true,false,true': [2.79e-08, 31, 0], 'true,false,false': [0.249, 14, 1], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 10, 0], 'false,false': [0.433, 9, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.134, 0, 19], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.227, 25, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 8, 0], 'false,false,false,true': [0.102, 0, 3], 'false,false,false,false': [2.023, 19, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [4.21e-08, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.141, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.07, 44, 7], 'false,false,false,false': [1.315, 18, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.821, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.000288, 31, 0], 'false,true,false,false': [9.01e-05, 2, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.058, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.15, 0, 17], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.198, 0, 8], 'false,false,true,false': [0.093, 44, 0], 'false,false,false': [0.164, 16, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.375, 33, 16], 'false,true': [0.098, 0, 5], 'false,false,true': [0.433, 0, 10], 'false,false,false,true': [0.065, 18, 0], 'false,false,false,false': [0.045, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.499, 0, 27], 'true,false': [0.057, 44, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.644, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.972, 1, 18], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 31, 2], 'false,false,false,true': [0.81, 15, 7], 'false,false,false,false': [0.706, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.022, 0, 18], 'false,true,true,true': [0.299, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 42, 0], 'false,false,true': [0.247, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.045, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.838, 1, 17], 'true,true,false': [2.63e-09, 0, 3], 'true,false,true': [0.005, 27, 0], 'true,false,false,true': [0.012, 12, 0], 'true,false,false,false': [0.223, 3, 1], 'false,true': [0.626, 10, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.607, 15, 2]}]
{'': [0.2151926932501672, 0.22592152199762194], 'false': [0.24221453287197234, 0.1874999999999999], 'false,true': [-2.5376526277146434e-16, -1.1102230246251566e-17], 'true': [0.04535147392290242, 0.021266540642722157], 'true,false': [2.5069552168955147e-17, 0.06222222222222227], 'false,true,true': [-1.4802973661668753e-16, 0.0]}
{'': [0.0009505778003687033, 0.12044123227909581], 'false': [0.05151007726136331, 0.1580754494224232], 'false,false': [0.0, 0.18163258200100044], 'false,false,false': [0.003471890320420797, 0.15745594229230805], 'false,true': [nan, 0.05151007726136331], 'false,false,true': [nan, 0.0]}
{'': [0.0031572568333014437, 0.09776474812702589], 'false': [nan, 0.09776474812702589], 'false,false': [0.0, 0.0849634596859744], 'false,false,false': [0.08397996810783558, 0.08652191376999209], 'true': [1.2688263138573217e-16, 0.00944710595763304], 'true,false': [0.0, 0.006586781594070186], 'true,true': [1.2688263138573217e-16, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.021729095468578343, 0.0003788893681905982], 'false': [7.66649913313931e-07, 0.00016670136034003524], 'false,false': [nan, 0.00016670136034003524], 'false,false,false': [nan, 0.00016670136034003524], 'false,true': [nan, 7.66649913313931e-07], 'false,true,false': [2.681169505052365e-09, 4.060575369002617e-09]}
{'': [0.002517594101480114, 0.06537261700206422], 'false': [0.0, 0.06358065196038164], 'false,false': [0.07413719875621852, 0.026934768622348074], 'false,false,true': [0.004920701922783488, 0.00019658725293510276], 'true': [0.0013214574915358282, 0.0], 'false,true': [0.0, nan]}
{'': [0.03856416678896704, 0.059149199684325214], 'false': [0.001928905499366551, 0.05970241006586659], 'false,false': [0.01878068752753914, 0.00022069904157432803], 'true': [nan, 0.03856416678896704], 'true,false': [nan, 0.03856416678896704], 'false,false,false': [0.00023513769690680641, 0.00015729678839786104]}
{'': [0.038393877313890636, 0.03771164559278628], 'true': [0.009212537323440184, 7.350069478369933e-05], 'false': [nan, 0.03771164559278629], 'false,false': [nan, 0.03771164559278628], 'false,false,false': [nan, 0.03771164559278628]}
{'': [0.04775421869154013, 0.032586035241718506], 'true': [0.049742941549147435, 0.0], 'false': [nan, 0.032586035241718526], 'false,false': [0.02419317598779274, 0.03615395537340049], 'false,false,false': [0.02982286082775532, 0.04981820339951839], 'true,false': [0.0, nan]}
{'': [0.0004656194902797586, 0.025042566616061353], 'false': [0.014062409453042131, 0.04408583899243248], 'false,false': [0.008731515312964835, 0.00013269277619437265], 'false,true': [0.014939281576174754, 2.35528296950383e-05], 'false,true,true': [0.014939281576174754, nan], 'false,false,false': [nan, 0.00013269277619437265]}
{'': [0.020911238067944125, 0.024658648476943282], 'false': [0.02308440256753877, 0.023652523737590504], 'false,false': [0.0, 0.021682328931268428], 'false,false,false': [nan, 0.02168232893126843], 'true': [0.03345061921488028, 0.0014734482373327683], 'true,true': [0.03900262856061355, 2.3129646346357427e-18], 'true,false': [8.891251753955714e-07, 0.003934270594725131], 'true,false,false': [1.2587363392479548e-05, 0.012398254796160928]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 3.837
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7422198280150732;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.04095283345445679;  // std dev = 0.253, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22003044882074763;  // std dev = 1.723, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.07519469220712845;  // std dev = 1.470, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.48559516365890015;  // std dev = 0.281, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.5689284969922334;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.7039747852716636;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7142850030869053;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5497427206538619;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.12187499889109071;  // std dev = 0.029, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.0032202587943655605;  // std dev = 1.110, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14287912619159923;  // std dev = 1.478, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return -0.007647465835645473;  // std dev = 1.251, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4425570481432469;  // std dev = 0.074, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5537708116395992;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17275227535921547;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.6582304455067535;  // std dev = 0.316, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6845628554397672;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.34956908995449765;  // std dev = 0.574, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.11367782575496181;  // std dev = 0.013, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.18333742165101902;  // std dev = 0.015, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.14251974940880296;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3264947516914312;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.37749800470190154;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4193689373156125;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4973927343623651;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.31573840521934143;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.45184520937372663;  // std dev = 0.864, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.11188379530287;  // std dev = 0.167, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.10117889915532773;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.10739910974153206;  // std dev = 0.551, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2591296033252059;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2939228079316507;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.034543401711744304;  // std dev = 0.166, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.09088604451294797;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27672131209916584;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.33671460213017124;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3774430472929085;  // std dev = 0.651, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1377879899789656;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.11470790679081631;  // std dev = 0.121, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return 0.21255839806085375;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23799823904275444;  // std dev = 0.115, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.25325298944866315;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.38218713793630443;  // std dev = 0.252, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.08616896045513905;  // std dev = 0.004, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.1241654681974682;  // std dev = 0.012, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.2707374901402476;  // std dev = 0.191, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08316655101075056;  // std dev = 1.61e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.10551709638190669;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18072042016306464;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.2645326540406804;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return -0.08167695862871838;  // std dev = 0.009, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, E), tweets(A, G) )
%   | | | then return 0.028138722435762514;  // std dev = 0.571, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.07812653592876181;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2517917769594462;  // std dev = 0.221, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11401626476368229;  // std dev = 0.032, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.012452695620091346;  // std dev = 0.443, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10624827218242318;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.15410211835258536;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.17755152204831778;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.03570220869203755;  // std dev = 0.720, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.21776015824771577;  // std dev = 0.268, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07336977998668108;  // std dev = 0.004, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2190292110603637;  // std dev = 0.174, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13487601418921455;  // std dev = 0.457, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.09533804239044219;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.10840571919266898;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08498446152744996;  // std dev = 0.785, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.24691484132128427;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.12332011707505874;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.05940575279935006;  // std dev = 0.048, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.006943944908978264;  // std dev = 0.116, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else return 0.035160655440947215;  // std dev = 0.355, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.23729739764026803;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.04293401398723466;  // std dev = 0.516, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.08751962912894995;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.232', 'seconds']
Refined model CLL: -0.093725


******************************************
Best model found
******************************************
Results 

CLL : -0.096131 

AUC ROC : 0.993788 

AUC PR : 0.422601 

Precision : 0.339943 

Recall : 0.952381 

F1 : 0.501044 

Total Learning Time : 3.837 

Total Inference Time : 3.190882682800293 

Total revision time: 10.789331344604491
Best scored revision CLL: -0.093725


Results 

CLL : -0.096131 

AUC ROC : 0.993788 

AUC PR : 0.422601 

Precision : 0.339943 

Recall : 0.952381 

F1 : 0.501044 

Total Learning Time : 10.818598894119262 

Total Inference Time : 3.190882682800293 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.72
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7956489350995121;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.09624417319475045;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7387228081237419;  // std dev = 0.183, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03799892773338196;  // std dev = 0.264, 67.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08428674896691042;  // std dev = 0.841, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7616571518519764;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1132639052760407;  // std dev = 2.655, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5719946403327693;  // std dev = 0.170, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.2606968158272482;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.65964862877016;  // std dev = 0.132, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.603125781430557;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.65964862877016;  // std dev = 0.132, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5660193351956272;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02782627153459522;  // std dev = 2.845, 110.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=13 */
%   | | | else return -0.022014554295852307;  // std dev = 2.175, 45.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49827995393648444;  // std dev = 1.948, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11977607714860103;  // std dev = 0.030, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.12002621134633064;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14771753847836575;  // std dev = 0.099, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2929195089627234;  // std dev = 0.846, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else return 0.48956230466566075;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3078505546149086;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.48956230466566075;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6336589967429713;  // std dev = 0.202, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09683649509266005;  // std dev = 1.111, 92.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=2 */
%   | | else return -0.03198134008528223;  // std dev = 0.247, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04557755953985624;  // std dev = 1.929, 96.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2677837686892304;  // std dev = 0.161, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5040634811647555;  // std dev = 0.633, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.120526013910871;  // std dev = 0.077, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.1129144585330048;  // std dev = 0.055, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2893937796549741;  // std dev = 0.653, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.09120409537803677;  // std dev = 0.967, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011937827267290325;  // std dev = 1.227, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14213975713008783;  // std dev = 1.333, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | else if ( follows(A, E) )
%   | | then return 0.25190146514352685;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04207487793688441;  // std dev = 0.150, 66.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021074070893708306;  // std dev = 1.112, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | | else return -0.002351954105642966;  // std dev = 1.422, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11938206417004789;  // std dev = 0.233, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2868729112922533;  // std dev = 0.518, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09027854102363009;  // std dev = 0.038, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39470856133174076;  // std dev = 0.535, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10606611901047679;  // std dev = 0.082, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18808577212296893;  // std dev = 0.456, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.18013322255388609;  // std dev = 0.300, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08310772111304468;  // std dev = 0.001, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08767611295550672;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.03752256564264539;  // std dev = 0.332, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.010576397523866065;  // std dev = 0.841, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.203799569918224;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017932523403227055;  // std dev = 1.023, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.363', 'seconds']
Parameter learned model CLL:-0.106157 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.677, 3, 45], 'true,false,true': [7.15e-08, 73, 0], 'true,false,false': [0.282, 21, 2], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.426, 16, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.183, 0, 39], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 60, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.841, 16, 1], 'false,false,false,true': [0.103, 0, 3], 'false,false,false,false': [2.655, 31, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.17, 0, 29], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.132, 0, 2], 'true,false,false': [0.143, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.132, 0, 2], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [2.845, 97, 13], 'false,false,false,false': [2.175, 39, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.948, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 73, 0], 'false,true,false,false': [0.008, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.099, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.846, 1, 33], 'true,false': [0.0, 0, 1], 'false,true,true': [0.018, 0, 8], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.202, 0, 14], 'false,false,true,false': [1.111, 90, 2], 'false,false,false': [0.247, 24, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.929, 61, 35], 'false,true': [0.161, 0, 11], 'false,false,true': [0.633, 0, 16], 'false,false,false,true': [0.077, 30, 0], 'false,false,false,false': [0.055, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.653, 0, 50], 'true,false': [0.967, 114, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.227, 25, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.333, 2, 37], 'true,false,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 59, 7], 'false,false,false,true': [1.112, 41, 10], 'false,false,false,false': [1.422, 24, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.233, 2, 34], 'false,true,true,true': [0.518, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.038, 99, 0], 'false,false,true': [0.535, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.082, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.456, 0, 37], 'true,true,false': [0.3, 0, 8], 'true,false,true': [0.001, 59, 0], 'true,false,false,true': [0.012, 14, 0], 'true,false,false,false': [0.332, 10, 2], 'false,true': [0.841, 22, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.023, 14, 4]}]
{'': [0.21985918209876626, 0.198347107438016], 'true': [0.05859375000000089, 0.020399305555555625], 'false': [0.20761245674740494, 0.1814058956916098], 'false,true': [-8.881784197001253e-17, 9.25185853854297e-18], 'true,false': [6.995925908596876e-17, 0.07939508506616262], 'false,true,true': [-2.9605947323337506e-16, 0.0]}
{'': [0.000857861787596065, 0.11423391847336258], 'false': [0.06945449997381517, 0.15330236555738166], 'false,false': [0.041636396209824754, 0.179048449817168], 'false,false,false': [0.003558935780203054, 0.16387361283669272], 'false,true': [nan, 0.06945449997381517], 'false,false,true': [nan, 0.041636396209824754]}
{'': [0.021983090644480743, 0.09787814570995834], 'false': [nan, 0.09787814570995818], 'false,false': [0.0034632867615865693, 0.08274119456541638], 'false,false,false': [0.07359071266931767, 0.10508506909516988], 'true': [0.023308480918883965, 0.008337858225123496], 'true,true': [0.0009997196014950305, 0.0], 'true,false': [0.008766444615266156, 0.006774201056477895], 'false,false,true': [0.008766444615266156, 6.344131569286608e-17]}
{'': [0.05926375764426706, 0.0002504335062512255], 'false': [1.0847331937327256e-05, 0.0002333184776386808], 'false,false': [nan, 0.0002333184776386808], 'false,false,false': [nan, 0.0002333184776386808], 'false,true': [nan, 1.0847331937327256e-05], 'false,true,false': [1.2575851703765563e-05, 3.3741158212223264e-06]}
{'': [0.021510152512875864, 0.07327761764834696], 'false': [0.0032987850504231117, 0.0709079485333692], 'false,false': [0.07320462501292578, 0.06109424300152834], 'false,false,true': [0.0029145605097041305, 0.013422342098246928], 'true': [0.021037992940176, 0.0], 'false,true': [4.2337614336335205e-05, 0.0]}
{'': [0.03874127214698796, 0.0706064087232845], 'false': [0.002366680141021432, 0.07313470360871761], 'false,false': [0.025068425473886824, 0.0001763024133884345], 'true': [nan, 0.03874127214698798], 'true,false': [nan, 0.03874127214698796], 'false,false,false': [0.00019607154135921993, 0.00012097812785784034]}
{'': [0.03869474048305015, 0.043008717256207425], 'false': [nan, 0.04300871725620744], 'false,false': [nan, 0.043008717256207425], 'false,false,false': [nan, 0.043008717256207425], 'true': [0.008536522043906843, 0.008063026038874958]}
{'': [0.04389379687607325, 0.032521236458237686], 'true': [0.045557071425946824, 0.0], 'false': [nan, 0.03252123645823767], 'false,false': [0.02253279759024936, 0.04030959871060719], 'false,false,false': [0.024227854952999915, 0.06742786679596775], 'true,false': [0.0, nan]}
{'': [0.054274819137103116, 0.030128304176066045], 'false': [0.01937833923202343, 0.053910107454713675], 'false,false': [0.02383362018269682, 0.00019431476367437632], 'false,true': [0.016740870832151214, 1.4235988206214317e-05], 'false,true,true': [0.016740870832151214, nan], 'false,false,false': [nan, 0.00019431476367437632]}
{'': [0.019109691527022153, 0.035112332429941044], 'false': [0.022118013058737486, 0.056813199667322845], 'false,false': [0.0, 0.058151248591402936], 'false,false,false': [nan, 0.05815124859140292], 'true': [0.006642951896649111, 0.0015665336329296453], 'true,true': [0.005630742372852645, 0.011272421107496725], 'true,false': [3.413066383660472e-08, 0.004881677203947887], 'true,false,false': [1.0627795468167683e-05, 0.009210133706934956]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.0
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8364098046647294;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.729448530299269;  // std dev = 0.151, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.7238400459245514;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12707687024839384;  // std dev = 0.070, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.054325159501256895;  // std dev = 2.371, 47.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | | else return 0.17102241011988983;  // std dev = 1.075, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5583171302802333;  // std dev = 0.001, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6225475668162439;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6324493766141233;  // std dev = 0.105, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5582694536259992;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09947816379315404;  // std dev = 0.665, 53.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=1 */
%   | | | else return -0.03528032532147282;  // std dev = 1.558, 49.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10178044623751908;  // std dev = 2.257, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | | else return 0.0072685490112787635;  // std dev = 1.182, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.4196609815545585;  // std dev = 2.52e-05, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.0863251600497718;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.4557046553622754;  // std dev = 0.180, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.45215219214098046;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5705668311748561;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6988490762632517;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10970183011873004;  // std dev = 0.014, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.10918242294240026;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.14532818496948252;  // std dev = 0.006, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3314543760906401;  // std dev = 0.027, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.13881698948739657;  // std dev = 0.920, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.45036822677366806;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31825063134938525;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.44791838955519936;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.42890229158257354;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09755452863872682;  // std dev = 0.099, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05814597555831967;  // std dev = 1.549, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return -0.009182354600927195;  // std dev = 1.298, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2644623131988176;  // std dev = 0.024, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.32927015361760636;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0867839334640643;  // std dev = 0.020, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0.015221835574171033;  // std dev = 0.359, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2892001343572158;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25594553325381003;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3227551051196167;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5128966506496011;  // std dev = 0.278, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.11740058313791156;  // std dev = 0.021, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return -0.00799035127704939;  // std dev = 1.210, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2275942964937045;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2225833869130051;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21355755801474624;  // std dev = 0.024, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.25145772898733426;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07190436460282516;  // std dev = 0.347, 53.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=1 */
%   | | | else return -0.011477956108632148;  // std dev = 0.764, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.017778308291043533;  // std dev = 1.206, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return -0.012122079759756675;  // std dev = 1.040, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18820509715862865;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return -0.06396498602890115;  // std dev = 0.354, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | | else return -0.07778792505200313;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return -0.04594146639594679;  // std dev = 0.663, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | | else return 2.4008611181456965E-4;  // std dev = 0.499, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.34422702796416443;  // std dev = 0.264, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11876652825762851;  // std dev = 0.026, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.06935746296144334;  // std dev = 0.468, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.03763468192392664;  // std dev = 0.688, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1601406009527326;  // std dev = 0.065, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.04391259815329272;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1756875293075584;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07222963112644502;  // std dev = 0.415, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20757857089922244;  // std dev = 0.064, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.07392871220412651;  // std dev = 0.008, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.20868314129439625;  // std dev = 0.874, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3945134695423162;  // std dev = 0.254, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10923843740829625;  // std dev = 0.008, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1376931507384917;  // std dev = 0.151, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.06612589232248466;  // std dev = 0.041, 76.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.07038824526411809;  // std dev = 0.408, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.019632148217522426;  // std dev = 0.585, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.04003426047503816;  // std dev = 0.327, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.1278009184527888;  // std dev = 0.710, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1697571549806013;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return -4.894068943897166E-4;  // std dev = 0.492, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.05066713644472215;  // std dev = 0.600, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.576', 'seconds']
Refined model CLL: -0.100532


******************************************
Best model found
******************************************
Results 

CLL : -0.100689 

AUC ROC : 0.992743 

AUC PR : 0.356988 

Precision : 0.34626 

Recall : 0.992063 

F1 : 0.513347 

Total Learning Time : 6.0 

Total Inference Time : 5.607157468795776 

Total revision time: 17.92059037208557
Best scored revision CLL: -0.100532


Results 

CLL : -0.100689 

AUC ROC : 0.992743 

AUC PR : 0.356988 

Precision : 0.34626 

Recall : 0.992063 

F1 : 0.513347 

Total Learning Time : 17.94985792160034 

Total Inference Time : 5.607157468795776 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.931
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7887044906550683;  // std dev = 2.157, 72.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=67 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.09056901361843647;  // std dev = 0.221, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return 0.15544623239680966;  // std dev = 0.457, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7380296336585369;  // std dev = 0.188, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03682922011128923;  // std dev = 0.264, 105.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10575451005820272;  // std dev = 0.852, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.49914346348784844;  // std dev = 0.905, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08606007679710923;  // std dev = 3.657, 85.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5753953718465786;  // std dev = 0.239, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6639344678455038;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6588265363494547;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6319211440071067;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5678944963303127;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029755501967210725;  // std dev = 3.462, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | | | else return 0.06115522364880679;  // std dev = 2.945, 56.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5072604245848648;  // std dev = 2.395, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11813361575476333;  // std dev = 0.021, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return -0.12770265768329306;  // std dev = 0.004, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15672051247952473;  // std dev = 0.171, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29963265043660314;  // std dev = 1.049, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0.49533625714107976;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30691823738094426;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5033394031876742;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6457054734327397;  // std dev = 0.254, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10510924660274736;  // std dev = 1.116, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else return 0.023326980858036618;  // std dev = 0.339, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04189445261339477;  // std dev = 2.408, 153.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26488447368976836;  // std dev = 0.174, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4864790499541724;  // std dev = 1.311, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11843590857750685;  // std dev = 0.146, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.1203586159008585;  // std dev = 0.153, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23956612518221454;  // std dev = 2.204, 81.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=76 */
%   | else return -0.09256536641852108;  // std dev = 1.008, 147.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05522585793711827;  // std dev = 1.548, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17907636455794648;  // std dev = 0.997, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( follows(A, E) )
%   | | then return 0.26768422285794335;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.038861410726768006;  // std dev = 0.155, 99.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03260365831149413;  // std dev = 1.513, 74.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=13 */
%   | | | else return 0.027264663734744676;  // std dev = 1.836, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14603288143941787;  // std dev = 0.179, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22363873260717299;  // std dev = 1.220, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09101086735663871;  // std dev = 0.077, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4056703389673527;  // std dev = 0.576, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11332420634478219;  // std dev = 0.207, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19084890276975902;  // std dev = 0.624, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0.16862372118758828;  // std dev = 0.279, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.0835301519354776;  // std dev = 0.024, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09120643471475172;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.03668392769749663;  // std dev = 0.355, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.026220480351023718;  // std dev = 1.534, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2279976930552604;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015253513851964825;  // std dev = 1.428, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.385', 'seconds']
Parameter learned model CLL:-0.108333 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.157, 5, 67], 'true,false,true': [8.69e-08, 104, 0], 'true,false,false': [0.221, 37, 2], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [3.94e-08, 38, 0], 'false,false': [0.457, 26, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.188, 0, 57], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 94, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.852, 33, 1], 'false,false,false,true': [0.905, 1, 3], 'false,false,false,false': [3.657, 64, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.239, 0, 46], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.136, 0, 2], 'true,false,false': [0.122, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.157, 0, 3], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.462, 150, 19], 'false,false,false,false': [2.945, 44, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.395, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 92, 0], 'false,true,false,false': [0.004, 27, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.171, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.049, 1, 50], 'true,false': [0.0, 0, 1], 'false,true,true': [0.017, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.254, 0, 23], 'false,false,true,false': [1.116, 130, 2], 'false,false,false': [0.339, 23, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.408, 98, 55], 'false,true': [0.174, 0, 13], 'false,false,true': [1.311, 1, 25], 'false,false,false,true': [0.146, 50, 0], 'false,false,false,false': [0.153, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.204, 5, 76], 'true,false': [1.008, 144, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.548, 24, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.997, 1, 55], 'true,false,true': [0.003, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 88, 11], 'false,false,false,true': [1.513, 61, 13], 'false,false,false,false': [1.836, 35, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.179, 2, 51], 'false,true,true,true': [1.22, 2, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.077, 137, 0], 'false,false,true': [0.576, 0, 21], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.207, 51, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.624, 0, 57], 'true,true,false': [0.279, 0, 10], 'true,false,true': [0.024, 89, 0], 'true,false,false,true': [0.012, 14, 0], 'true,false,false,false': [0.355, 9, 2], 'false,true': [1.534, 35, 13], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.428, 27, 10]}]
{'': [0.21793401838831816, 0.19834710743801753], 'true': [0.06462191358024594, 0.013790405398796952], 'false': [0.18992695117262537, 0.2089116143170192], 'false,true': [-2.7328566760003855e-16, 4.0902953538821554e-17], 'true,false': [7.259150545626024e-17, 0.048652202498356334], 'false,true,true': [-1.6148698540002277e-16, 0.0]}
{'': [0.000622044486820428, 0.10682386172456128], 'false': [0.06958852468475424, 0.13541450805652142], 'false,false': [0.021332369074544597, 0.16676203250978994], 'false,false,false': [0.20497596146676755, 0.15729461157244073], 'false,true': [nan, 0.06958852468475424], 'false,false,true': [nan, 0.021332369074544597]}
{'': [0.0024180100334376675, 0.10474095916609573], 'false': [nan, 0.10474095916609615], 'false,false': [0.0030491491334343076, 0.09335058810680606], 'false,false,false': [0.07091052575588595, 0.15486373746796292], 'false,false,true': [0.00819882322545662, 5.551115123125783e-17], 'true': [0.0012377889372320076, 0.006686442825710959], 'true,false': [0.00922367612863867, 0.004984517571425225], 'true,true': [0.0012377889372320076, nan]}
{'': [0.059122158910143705, 0.00045729988161554797], 'false': [1.9913309196008455e-05, 0.0006517072726125623], 'false,false': [nan, 0.0006517072726125623], 'false,false,false': [nan, 0.0006517072726125623], 'false,true': [nan, 1.9913309196006588e-05], 'false,true,false': [4.787324024197628e-06, 6.62746513442665e-07]}
{'': [0.021868153388412585, 0.085931104861727], 'false': [0.003215109818536919, 0.08525068423457348], 'false,false': [0.07969562850298269, 0.1146973313918557], 'false,false,true': [0.002814067022256409, 0.009442476813603653], 'true': [0.0215604041390398, 0.0], 'false,true': [2.9232220674735298e-05, 0.0]}
{'': [0.037912221859310875, 0.07420248142230718], 'false': [0.0023202179728439086, 0.07552617412364479], 'false,false': [0.06612049744853127, 0.0004594619654189161], 'true': [nan, 0.037912221859311125], 'true,false': [nan, 0.037912221859310875], 'false,false,false': [0.00042365176861372864, 0.0004956523506777222]}
{'': [0.05102094703249015, 0.06305040239804977], 'false': [nan, 0.06305040239804972], 'false,false': [nan, 0.06305040239804977], 'false,false,false': [nan, 0.06305040239804977], 'true': [0.05994704024237078, 0.006912936873821884]}
{'': [0.017387936769081014, 0.037208966222879676], 'false': [nan, 0.03720896622287968], 'false,false': [0.024000609653566915, 0.04762386189491501], 'false,false,false': [0.03093022751907817, 0.07171545658573497], 'true': [0.0177380004288608, 5.538037648897265e-06], 'true,false': [5.538037648897265e-06, nan]}
{'': [0.03217352367785479, 0.03523777967442778], 'false': [0.021528080997312182, 0.060857340109033764], 'false,false': [0.015818594165201476, 0.000840732483979007], 'false,true': [0.06472779458968442, 4.369603944466226e-05], 'false,true,true': [0.06472779458968442, nan], 'false,false,false': [nan, 0.000840732483979007]}
{'': [0.020114530333855518, 0.052129266957873475], 'false': [0.04899988063622077, 0.05484543778255959], 'false,false': [0.0, 0.05513669202274203], 'false,false,false': [nan, 0.055136692022742066], 'true': [0.007032426448721454, 0.001318568720404863], 'true,true': [0.006822462990683387, 0.007808984641739364], 'true,false': [6.510090570533117e-06, 0.005781725999867818], 'true,false,false': [1.0024548907437703e-05, 0.01146281373453454]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.215
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.08124500429442717;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.058148935099512224;  // std dev = 0.400, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7246762421255674;  // std dev = 0.206, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7304505179510203;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12709343772698078;  // std dev = 0.033, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.10257985513828734;  // std dev = 2.216, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.16549291177517825;  // std dev = 2.550, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5283670995547395;  // std dev = 0.158, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.5540813109454873;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.608207113924306;  // std dev = 0.172, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6229571013270729;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5540813109454873;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4644573458371935;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.11399556680394683;  // std dev = 0.031, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06886938517243682;  // std dev = 2.773, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | | | else return 0.11002885627123767;  // std dev = 2.033, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4198172609704757;  // std dev = 0.039, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( follows(A, D), recursion_accounttype(E, B) )
%   | | | then return 0.2831033365212743;  // std dev = 1.297, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.3048799249628496;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4768369478635046;  // std dev = 0.181, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.6930909652323094;  // std dev = 0.067, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7517715858857528;  // std dev = 0.166, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10273165694914968;  // std dev = 0.026, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else return -0.10197120893163851;  // std dev = 0.009, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.15650737557804917;  // std dev = 0.101, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.301882239130404;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.007156050988660456;  // std dev = 1.180, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.3384464976583228;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.5178735559757344;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return 0.2257613306288594;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.4602144624609573;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.061513547347565235;  // std dev = 0.120, 150.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07248835348448897;  // std dev = 2.081, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03723892787717148;  // std dev = 1.669, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26572607658283276;  // std dev = 0.019, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3861156824842072;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08728976206368852;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.06841172422569253;  // std dev = 0.093, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3116015304737632;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2709061783624462;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.3780682811151738;  // std dev = 1.246, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5318587034021353;  // std dev = 0.284, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.12585535794033442;  // std dev = 0.026, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.21322308360030523;  // std dev = 0.003, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.26996570609623466;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.12036403689818015;  // std dev = 0.450, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return 0.22065461228559174;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.23617830165318385;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09127659616251765;  // std dev = 0.951, 84.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=1 */
%   | | | else return -0.014151570405995717;  // std dev = 1.112, 54.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0023346039906919935;  // std dev = 1.742, 59.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=14 */
%   | | | else return -0.02953019572338463;  // std dev = 1.501, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18077250138325654;  // std dev = 0.005, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return 0.2654195701462763;  // std dev = 0.040, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.28823256900563526;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3432252800217081;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07717992689793923;  // std dev = 0.003, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.37611293946199037;  // std dev = 0.338, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12390112160026094;  // std dev = 0.024, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06413324838568404;  // std dev = 0.519, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.11062105269750795;  // std dev = 0.949, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1569234966542174;  // std dev = 0.013, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(E, A) )
%   | | then return -0.3175125733570547;  // std dev = 0.963, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.1498760982402335;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.14832758690890877;  // std dev = 0.930, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.2695208181163818;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07137451440358375;  // std dev = 0.003, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.32165128818148264;  // std dev = 0.081, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4433415510625693;  // std dev = 0.199, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11978518273016318;  // std dev = 0.019, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1149024146093534;  // std dev = 0.184, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | else return -0.06443827999012318;  // std dev = 0.041, 123.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.24148245452535502;  // std dev = 0.186, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09782503896368279;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.0026519509391515553;  // std dev = 0.322, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.0015298581506745952;  // std dev = 0.419, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1478077941847541;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.01849070204222833;  // std dev = 0.777, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | | else return -0.03733646331276457;  // std dev = 0.993, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.226', 'seconds']
Refined model CLL: -0.100701


******************************************
Best model found
******************************************
Results 

CLL : -0.097755 

AUC ROC : 0.993026 

AUC PR : 0.343001 

Precision : 0.34626 

Recall : 0.992063 

F1 : 0.513347 

Total Learning Time : 10.215 

Total Inference Time : 9.550343990325928 

Total revision time: 29.219992729187013
Best scored revision CLL: -0.100701


Results 

CLL : -0.097755 

AUC ROC : 0.993026 

AUC PR : 0.343001 

Precision : 0.34626 

Recall : 0.992063 

F1 : 0.513347 

Total Learning Time : 29.249260278701783 

Total Inference Time : 9.550343990325928 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.284
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8132051148747927;  // std dev = 1.955, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return -0.09423201728144012;  // std dev = 0.213, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.15226658215833588;  // std dev = 0.456, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7324201036399323;  // std dev = 0.196, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04565757507785251;  // std dev = 0.251, 148.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07868892783549053;  // std dev = 1.178, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7364892790406071;  // std dev = 0.110, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.07139348797536242;  // std dev = 4.420, 128.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=30 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5727514305037333;  // std dev = 0.293, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.35621729862711304;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.46668424899845445;  // std dev = 0.819, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6029347499628956;  // std dev = 0.177, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5632529891828909;  // std dev = 3.65e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.007278041559995527;  // std dev = 4.068, 194.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=27 */
%   | | | else return 0.021827939084708904;  // std dev = 3.519, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5331687934295531;  // std dev = 2.215, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12052871747814708;  // std dev = 0.032, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return -0.12339692655681568;  // std dev = 0.004, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15530444245114078;  // std dev = 0.190, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31254044286843147;  // std dev = 0.352, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.5676883434251072;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2990327941195714;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5064267386026629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6377421941035647;  // std dev = 0.310, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.10461662283811869;  // std dev = 1.315, 201.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=3 */
%   | | else return 0.024004741858724147;  // std dev = 0.314, 63.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024821444196105963;  // std dev = 2.868, 195.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=67 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2073952622923596;  // std dev = 1.016, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45986324784270344;  // std dev = 1.947, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11997610483033823;  // std dev = 0.139, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.11811778089656294;  // std dev = 0.113, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2904431032803196;  // std dev = 0.949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | else return -0.09304314338360858;  // std dev = 1.325, 172.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.062194917617665636;  // std dev = 2.225, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1870166817053702;  // std dev = 0.061, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(A, E) )
%   | | then return 0.29234074495660456;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05108118520806883;  // std dev = 0.164, 131.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010933119804563683;  // std dev = 1.997, 93.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=23 */
%   | | | else return 0.03845309063733585;  // std dev = 2.262, 59.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13855359097992934;  // std dev = 0.172, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25421342107169015;  // std dev = 0.936, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08989814098838804;  // std dev = 0.078, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34768748917738335;  // std dev = 1.750, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10857473494250584;  // std dev = 0.225, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.08079229757111563;  // std dev = 2.653, 77.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=69 */
%   | | else return 0.11040971217530643;  // std dev = 1.078, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08122474045025349;  // std dev = 0.008, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09515601170877623;  // std dev = 0.031, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.05476354058900086;  // std dev = 0.391, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.023257449623135393;  // std dev = 1.292, 66.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=22 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20941381945879456;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04158795227128925;  // std dev = 1.766, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.121', 'seconds']
Parameter learned model CLL:-0.108927 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.955, 4, 85], 'true,false,true': [0.0, 142, 0], 'true,false,false': [0.213, 40, 2], 'false,true,true,true': [0.0, 0, 18], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.94e-08, 47, 0], 'false,false': [0.456, 36, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.196, 0, 71], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.251, 134, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.178, 31, 2], 'false,false,false,true': [0.11, 0, 7], 'false,false,false,false': [4.42, 98, 30]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.293, 0, 55], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.763, 1, 2], 'true,false,false': [0.819, 1, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 5], 'false,false,true,false': [3.65e-08, 0, 12], 'false,false,false,true': [4.068, 167, 27], 'false,false,false,false': [3.519, 74, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.215, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 125, 0], 'false,true,false,false': [0.004, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.19, 83, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.352, 0, 63], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 16], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.31, 0, 28], 'false,false,true,false': [1.315, 198, 3], 'false,false,false': [0.314, 51, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.868, 128, 67], 'false,true': [1.016, 1, 18], 'false,false,true': [1.947, 2, 39], 'false,false,false,true': [0.139, 65, 0], 'false,false,false,false': [0.113, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.949, 0, 96], 'true,false': [1.325, 168, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.225, 40, 24]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.061, 0, 69], 'true,false,true': [0.027, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.164, 117, 14], 'false,false,false,true': [1.997, 70, 23], 'false,false,false,false': [2.262, 43, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.172, 2, 64], 'false,true,true,true': [0.936, 1, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.078, 168, 0], 'false,false,true': [1.75, 2, 30], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.225, 74, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.653, 8, 69], 'true,true,false': [1.078, 1, 16], 'true,false,true': [0.008, 136, 0], 'true,false,false,true': [0.031, 23, 0], 'true,false,false,false': [0.391, 16, 2], 'false,true': [1.292, 44, 22], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.766, 33, 14]}]
{'': [0.2171235358048553, 0.2132638888888903], 'true': [0.042923873248327346, 0.010751417769376], 'false': [0.21718126444024455, 0.2076124567474043], 'false,true': [1.6148698540002277e-16, 5.196788625904988e-17], 'true,false': [-8.443949764754712e-17, 0.04535147392290247], 'false,true,true': [-2.9605947323337506e-16, 0.0]}
{'': [0.0005425782007043187, 0.11110721126550709], 'false': [0.06275128902030708, 0.14748197543787503], 'false,false': [0.04203098913019907, 0.1665674131644578], 'false,false,false': [0.001737238343786743, 0.1526447716533039], 'false,true': [nan, 0.06275128902030708], 'false,false,true': [nan, 0.04203098913019907]}
{'': [0.023277553591211173, 0.11390423386466837], 'false': [nan, 0.11390423386466986], 'false,false': [0.0021794354859538956, 0.10204988487326605], 'false,false,false': [0.08528842137112329, 0.13760145813327498], 'true': [0.0015638200504410288, 0.11638876259545607], 'true,false': [0.19412699742674877, 0.0839088480452638], 'false,false,true': [0.006298568554406092, 1.1102230246251565e-16], 'true,true': [0.0015638200504410288, nan]}
{'': [0.03892232383238453, 0.0004195329255311742], 'false': [7.90069540577454e-06, 0.0004334202669661269], 'false,false': [nan, 0.0004334202669661269], 'false,false,false': [nan, 0.0004334202669661269], 'false,true': [nan, 7.90069540577737e-06], 'false,true,false': [8.102224313645933e-06, 5.636137790313717e-07]}
{'': [0.002933385537159855, 0.07544301359391194], 'false': [0.0023934116752576985, 0.07417039816004065], 'false,false': [0.067118748946326, 0.09867889968456235], 'false,false,true': [0.003440993767850374, 0.008606290012347908], 'true': [0.0019627526630015906, 0.0], 'false,true': [1.2867657416856804e-05, 0.0]}
{'': [0.04218802313785483, 0.08893453052583049], 'false': [0.05433128210974118, 0.08989271328159475], 'false,false': [0.09245472514107182, 0.00028219992468781125], 'true': [nan, 0.042188023137854774], 'true,false': [nan, 0.04218802313785483], 'false,false,false': [0.00029756609092541973, 0.00025984720925631194]}
{'': [0.043718205265233095, 0.07735132510624772], 'false': [nan, 0.07735132510624781], 'false,false': [nan, 0.07735132510624772], 'false,false,false': [nan, 0.07735132510624772], 'true': [0.009376312478305041, 0.010206954927440736]}
{'': [0.00036603018678956346, 0.04583687458257689], 'false': [nan, 0.0458368745825771], 'false,false': [0.026982252557093304, 0.06045783462403573], 'false,false,false': [0.0428727278845473, 0.08668445015041909], 'true': [5.351291499548148e-05, 0.000367201096322739], 'true,false': [0.000367201096322739, nan]}
{'': [0.029728159903856587, 0.039477003499225505], 'false': [0.02000176309651709, 0.07324341969560748], 'false,false': [0.09571317870301407, 0.0006814185756140081], 'false,true': [0.02823602368251435, 3.613600756098766e-05], 'false,true,true': [0.02823602368251435, nan], 'false,false,false': [nan, 0.0006814185756140081]}
{'': [0.03722183251034716, 0.04236011843334837], 'false': [0.025288519683043485, 0.0655577489709178], 'false,false': [0.0, 0.0663658129916775], 'false,false,false': [nan, 0.0663658129916775], 'true': [0.08738776398087847, 0.0009650471988368544], 'true,true': [0.09143648484971363, 0.06833088976808324], 'true,false': [4.262942256971769e-07, 0.004153658446941505], 'true,false,false': [4.1963921648503824e-05, 0.008492229617622126]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.524
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.13001674537386096;  // std dev = 0.108, 169.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.24703782398840118;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7238051829465838;  // std dev = 0.214, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.023639364918459936;  // std dev = 0.282, 107.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=13 */
%   | | else return -0.08132984336171281;  // std dev = 0.198, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.13611681377960225;  // std dev = 0.136, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.04256509049950824;  // std dev = 1.190, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.07812514362510956;  // std dev = 4.195, 125.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=30 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5542965179250485;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.4873338802073488;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.360817996966541;  // std dev = 0.753, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5669630723031301;  // std dev = 0.051, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11619723312173039;  // std dev = 0.857, 129.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=1 */
%   | | | else return 9.583017613273654E-4;  // std dev = 2.789, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08558186667739202;  // std dev = 3.251, 76.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=20 */
%   | | | else return 0.23615694137678336;  // std dev = 2.252, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), follows(A, D) )
%   | | | then return 0.3873087642243374;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.41676506946891706;  // std dev = 0.049, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.5461372649948697;  // std dev = 0.264, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return 0.7147958067658551;  // std dev = 0.163, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2929444122664802;  // std dev = 1.184, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7026850031457779;  // std dev = 0.239, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(J, A) )
%   | then return -0.11413873645731472;  // std dev = 0.006, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return -0.1612700660922698;  // std dev = 0.260, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3244795931203859;  // std dev = 0.055, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.36178095171432023;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5742607032217981;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3157047349275073;  // std dev = 0.026, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5232610032163543;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.613261635034442;  // std dev = 0.218, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10425951100820156;  // std dev = 0.076, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10366443056312859;  // std dev = 2.036, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.03554334337194631;  // std dev = 2.375, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2632561106767523;  // std dev = 0.026, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.41321533556599443;  // std dev = 0.170, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09558542076996217;  // std dev = 0.052, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.06300415403782096;  // std dev = 0.138, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3249205719807281;  // std dev = 0.166, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2514223319174327;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.2474454522503864;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4674517410224116;  // std dev = 1.414, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return -0.12876442179331024;  // std dev = 0.030, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.21395470700882305;  // std dev = 0.020, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(A, D), follows(D, F) )
%   | | | then return -0.09344573727926064;  // std dev = 0.729, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2263534486271388;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07825879567176693;  // std dev = 0.935, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.21112106717346102;  // std dev = 0.028, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3733206295812118;  // std dev = 0.310, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.0864565333659502;  // std dev = 0.072, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.008084190653953672;  // std dev = 1.838, 77.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=17 */
%   | | | else return 0.10732642103888192;  // std dev = 1.646, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17660097059742902;  // std dev = 0.063, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.32405149597768806;  // std dev = 0.068, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return -0.07371429014367693;  // std dev = 0.351, 107.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=1 */
%   | | | else return -0.05207657683237509;  // std dev = 0.329, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.29081691247671326;  // std dev = 0.293, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08562103791066743;  // std dev = 0.029, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19097596628870456;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.007816042526572309;  // std dev = 1.806, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | | | else return 0.042724817942179576;  // std dev = 1.721, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1562869931955996;  // std dev = 0.021, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( follows(E, A) )
%   | | then return -0.02111283127824634;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16328743222505224;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15238880129714505;  // std dev = 0.070, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2437478875599159;  // std dev = 0.271, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07447007520261072;  // std dev = 0.057, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.3872998059194164;  // std dev = 0.140, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.32169802275217685;  // std dev = 0.926, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.1448073030552318;  // std dev = 0.036, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13337579898788277;  // std dev = 0.050, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.20946483405100352;  // std dev = 0.064, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06605051467601643;  // std dev = 0.032, 183.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13843592493195608;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.021040175581225704;  // std dev = 1.121, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0.019675507806291778;  // std dev = 0.735, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1651295241307218;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.011459468603626245;  // std dev = 1.084, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.08173869169903428;  // std dev = 1.036, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.072', 'seconds']
Refined model CLL: -0.108404


******************************************
Best model found
******************************************
Results 

CLL : -0.104796 

AUC ROC : 0.993452 

AUC PR : 0.375429 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 12.524 

Total Inference Time : 12.884916543960571 

Total revision time: 35.56076827812195
Best scored revision CLL: -0.108404


Results 

CLL : -0.104796 

AUC ROC : 0.993452 

AUC PR : 0.375429 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 35.59003582763672 

Total Inference Time : 12.884916543960571 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.678
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.07733493586822965;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.2547006592374425;  // std dev = 0.489, 58.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6924484396905117;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02528627138453593;  // std dev = 0.274, 161.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05371822346167728;  // std dev = 1.781, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.745663502496426;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1225261767481862;  // std dev = 4.934, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.551737543782673;  // std dev = 1.348, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5198063587559757;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3274379596020266;  // std dev = 1.406, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5998611104031905;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5666682782823342;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.009533188097603066;  // std dev = 4.553, 242.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=34 */
%   | | | else return 0.06892894630944492;  // std dev = 4.029, 96.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5165848905270994;  // std dev = 3.205, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12305477356523754;  // std dev = 0.046, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | | else return -0.13085668182711518;  // std dev = 0.009, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17081538982001626;  // std dev = 0.336, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3335515319355092;  // std dev = 0.576, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.5370557442166755;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30507624506769515;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5171034481425636;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5805946658282731;  // std dev = 1.388, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.10619656302461464;  // std dev = 1.804, 257.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=5 */
%   | | else return 0.005628776110221247;  // std dev = 0.304, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01758886969089549;  // std dev = 3.278, 258.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25876169807397864;  // std dev = 0.205, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5093864156581805;  // std dev = 1.317, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13016552878854382;  // std dev = 0.236, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.13152468281307408;  // std dev = 0.218, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2633689799557653;  // std dev = 2.233, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.08799039645795258;  // std dev = 1.685, 261.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01840263883378422;  // std dev = 2.588, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1709411312519463;  // std dev = 1.396, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.28079038260746586;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041392908824484535;  // std dev = 0.160, 163.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007118175597277548;  // std dev = 2.211, 123.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=28 */
%   | | | else return 0.03325492644091685;  // std dev = 2.509, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16804691885436007;  // std dev = 0.129, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.262919616705866;  // std dev = 1.426, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09279189928879494;  // std dev = 0.085, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34835869942265413;  // std dev = 1.568, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11282122609247541;  // std dev = 0.230, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16884603746098567;  // std dev = 1.447, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.1148080128218231;  // std dev = 1.070, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08323346524012071;  // std dev = 0.026, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09224689266405904;  // std dev = 0.023, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.039720703868953086;  // std dev = 1.144, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.01627931837613834;  // std dev = 1.356, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2055442769582596;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004978399227961835;  // std dev = 2.154, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.848', 'seconds']
Parameter learned model CLL:-0.111681 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 160, 0], 'true,false,false': [0.246, 58, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.05e-08, 48, 0], 'false,false': [0.489, 35, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.274, 142, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.781, 43, 4], 'false,false,false,true': [0.128, 0, 8], 'false,false,false,false': [4.934, 95, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.348, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.778, 1, 3], 'true,false,false': [1.406, 3, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.553, 208, 34], 'false,false,false,false': [4.029, 73, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.205, 7, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.046, 161, 0], 'false,true,false,false': [0.009, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.336, 101, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.576, 0, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.388, 2, 39], 'false,false,true,false': [1.804, 252, 5], 'false,false,false': [0.304, 59, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.278, 176, 82], 'false,true': [0.205, 0, 22], 'false,false,true': [1.317, 1, 52], 'false,false,false,true': [0.236, 77, 0], 'false,false,false,false': [0.218, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.233, 5, 121], 'true,false': [1.685, 254, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.588, 51, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.396, 2, 83], 'true,false,true': [0.009, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 144, 19], 'false,false,false,true': [2.211, 95, 28], 'false,false,false,false': [2.509, 56, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.129, 2, 78], 'false,true,true,true': [1.426, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 217, 0], 'false,false,true': [1.568, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 73, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.447, 2, 85], 'true,true,false': [1.07, 1, 19], 'true,false,true': [0.026, 173, 0], 'true,false,false,true': [0.023, 26, 0], 'true,false,false,false': [1.144, 25, 4], 'false,true': [1.356, 53, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.154, 51, 21]}]
{'': [0.2208506841165995, 0.23215430336227555], 'false': [0.22518296115594033, 0.23929845422116636], 'false,true': [7.105427357601002e-16, 5.3198186596622086e-17], 'true': [0.01851192595229848, 0.017693369044720287], 'true,false': [-1.4432899320127036e-16, 0.060353798126950985], 'false,true,true': [0.0, 0.0]}
{'': [0.033612731235565914, 0.12990008800343741], 'false': [0.07497374675089984, 0.16863702325581578], 'false,false': [0.06749323065783162, 0.19085601087809703], 'false,false,false': [0.002057762487483572, 0.1803209712137062], 'false,true': [nan, 0.07497374675089984], 'false,false,true': [nan, 0.06749323065783162]}
{'': [0.05806061603680731, 0.12174366083821533], 'false': [nan, 0.1217436608382147], 'false,false': [0.0017987985374750522, 0.11062813649025788], 'false,false,false': [0.0856760311265324, 0.1691204656598139], 'true': [0.02634932748983196, 0.17934762553766054], 'true,false': [0.15140273387463693, 0.17964124405940038], 'true,true': [0.02634932748983196, nan], 'false,false,true': [0.005508820521016681, 1.7763568394002506e-16]}
{'': [0.06303605953008974, 0.0008675753077398992], 'false': [2.0257910850163376e-05, 0.001116853975370852], 'false,false': [nan, 0.001116853975370852], 'false,false,false': [nan, 0.001116853975370852], 'false,true': [nan, 2.0257910850163376e-05], 'false,true,false': [1.2952706211566618e-05, 1.9625105718144486e-06]}
{'': [0.004774059153208285, 0.07836535409835559], 'false': [0.002047584823813847, 0.0770760258244922], 'false,false': [0.0733477462806632, 0.09226496440706333], 'false,false,true': [0.046983920580342384, 0.012657776377471721], 'true': [0.004305111659685904, 0.0], 'false,true': [9.224310540145719e-06, 0.0]}
{'': [0.04164960019771285, 0.08688054863459581], 'false': [0.0019184370559341968, 0.09210012904897488], 'false,false': [0.032738941016464435, 0.0007552719527142082], 'true': [nan, 0.04164960019771271], 'true,false': [nan, 0.04164960019771285], 'false,false,false': [0.0007252518398311336, 0.0007927595009336523]}
{'': [0.04733202874851126, 0.08477389435915322], 'false': [nan, 0.08477389435915299], 'false,false': [nan, 0.08477389435915322], 'false,false,false': [nan, 0.08477389435915322], 'true': [0.039575045481918376, 0.010882645348825182]}
{'': [0.02267149984294555, 0.04282824707788444], 'false': [nan, 0.04282824707788482], 'false,false': [0.025671147883694862, 0.055482980685235994], 'false,false,false': [0.039757470138847645, 0.07867332533608686], 'true': [0.022926681484119547, 3.6821104703432805e-05], 'true,false': [3.6821104703432805e-05, nan]}
{'': [0.016633363707764543, 0.040724047762619627], 'false': [0.02430921727432298, 0.07114038401371081], 'false,false': [0.05851595094502139, 0.0007267930266078198], 'false,true': [0.052129835872072365, 3.303958461485263e-05], 'false,true,true': [0.052129835872072365, nan], 'false,false,false': [nan, 0.0007267930266078198]}
{'': [0.026135701420433602, 0.04315755805457432], 'false': [0.023573820574435377, 0.0637821324865709], 'false,false': [0.0, 0.06446665105628055], 'false,false,false': [nan, 0.06446665105628041], 'true': [0.030713737032239577, 0.005975120103112283], 'true,true': [0.0240732683908814, 0.05722548211466618], 'true,false': [3.986024137755517e-06, 0.024492220883584537], 'true,false,false': [2.036474795559731e-05, 0.04512825090860506]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.14
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.2265699877310913;  // std dev = 0.482, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.6987935156044944;  // std dev = 0.166, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.7232657356905925;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3899324023572592;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.0239312351044939;  // std dev = 0.277, 149.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=18 */
%   | | else return -0.09806688452132738;  // std dev = 0.150, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.014877044551756398;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.08453000139929831;  // std dev = 1.184, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16182072960042823;  // std dev = 4.507, 117.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5709958522446237;  // std dev = 0.115, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.05536643674628429;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.46833296973146765;  // std dev = 0.308, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5697337762503837;  // std dev = 0.105, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11419916426044686;  // std dev = 0.846, 129.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=1 */
%   | | | else return 0.012141516495812521;  // std dev = 3.176, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10384076800921374;  // std dev = 3.742, 97.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=29 */
%   | | | else return 0.20155267859308862;  // std dev = 2.419, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4292124010422315;  // std dev = 0.269, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3207773915454714;  // std dev = 0.955, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.43611171831739953;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.627272395507103;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.35644213696170124;  // std dev = 0.796, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.7361923650200766;  // std dev = 0.113, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.6546746941979313;  // std dev = 1.039, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else if ( follows(K, A) )
%   | then return -0.11757600185864271;  // std dev = 0.016, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.17110580508781797;  // std dev = 0.252, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3259212023093374;  // std dev = 0.061, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.47575284053742006;  // std dev = 0.159, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3638156045166369;  // std dev = 0.145, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.49404593879489855;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34291326470192224;  // std dev = 0.048, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5728924722841506;  // std dev = 0.155, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10507560879987493;  // std dev = 0.163, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02544630637064186;  // std dev = 2.401, 74.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=19 */
%   | | | else return 0.09882509381360854;  // std dev = 2.589, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, G) )
%   | | | then return 0.26380739461385444;  // std dev = 0.155, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.025923426836538005;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.07726429983523768;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then return -0.048503598823507396;  // std dev = 0.146, 153.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=14 */
%   | | else return -0.0729251607973844;  // std dev = 0.091, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.274835870144146;  // std dev = 0.048, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.30953844865895447;  // std dev = 0.244, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5082020323400069;  // std dev = 0.333, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.13591614176792202;  // std dev = 0.035, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21462253183023972;  // std dev = 0.017, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.2724085093762404;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.08257997891737168;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.39174564137035534;  // std dev = 0.301, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.08945461768662864;  // std dev = 0.152, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.24305847315803555;  // std dev = 1.822, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return -0.136158639313958;  // std dev = 0.573, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.03754286535607736;  // std dev = 0.805, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.005720659981123673;  // std dev = 1.721, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16883697505708828;  // std dev = 0.110, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.2819727690050659;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07962025910355966;  // std dev = 0.082, 149.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.21753232211791432;  // std dev = 1.380, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.09299875196012308;  // std dev = 0.130, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21988374253569457;  // std dev = 1.527, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.1133222851356084;  // std dev = 0.031, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( tweets(A, J) )
%   | | | then return 6.532099332854798E-4;  // std dev = 1.020, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.05579420094250274;  // std dev = 1.528, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.15569452879436965;  // std dev = 0.037, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.06347211720933223;  // std dev = 1.593, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else return 0.16268854318161832;  // std dev = 0.016, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.17260003885570868;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22041331851474555;  // std dev = 0.076, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07568303600167388;  // std dev = 0.132, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.26698294133051115;  // std dev = 0.036, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4072906944812323;  // std dev = 0.235, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12186605429552293;  // std dev = 0.033, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.10438798382045898;  // std dev = 1.400, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.043813116863580845;  // std dev = 1.636, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | else return 0.2322897349509901;  // std dev = 0.060, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06499487561149324;  // std dev = 0.044, 192.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.023478478678858612;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.0015080947859062053;  // std dev = 0.155, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1826751442519181;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.001912714210307132;  // std dev = 0.878, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return -0.026053028521566705;  // std dev = 1.428, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.690', 'seconds']
Refined model CLL: -0.104815


******************************************
Best model found
******************************************
Results 

CLL : -0.102881 

AUC ROC : 0.993425 

AUC PR : 0.377761 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 10.14 

Total Inference Time : 11.840847730636597 

Total revision time: 34.50812188911438
Best scored revision CLL: -0.104815


Results 

CLL : -0.102881 

AUC ROC : 0.993425 

AUC PR : 0.377761 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 34.53738943862915 

Total Inference Time : 11.840847730636597 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.146
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.0581489350995122;  // std dev = 0.400, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7367131769640909;  // std dev = 0.118, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -9.029660143778651E-4;  // std dev = 0.301, 48.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14907796748644578;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21275180194567145;  // std dev = 1.290, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5845105300799613;  // std dev = 0.219, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7320675486884857;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5623223135597228;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.060051927401372364;  // std dev = 1.622, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | | else return 0.08516643069849736;  // std dev = 1.584, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5414995703568135;  // std dev = 0.741, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12001619001430175;  // std dev = 0.012, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.1358654202644006;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1840789323177907;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3169916875040022;  // std dev = 0.226, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06946272174480544;  // std dev = 0.711, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29875584568146907;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.602094426575278;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08660112205825622;  // std dev = 1.154, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else return -0.11194786800261625;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0520652888168783;  // std dev = 1.676, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3452742346695692;  // std dev = 0.149, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.22213104592777447;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13386137442103532;  // std dev = 0.073, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.14700844904065735;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3013961612346754;  // std dev = 0.456, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.0821049637547495;  // std dev = 1.079, 55.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.054734044217454036;  // std dev = 0.254, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17678853222116775;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E) )
%   | | then return 0.30034891640164274;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 9.704052866959189E-4;  // std dev = 0.189, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05517587390889237;  // std dev = 0.364, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.1034171229785711;  // std dev = 0.969, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1256038971328548;  // std dev = 0.211, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3407555883103203;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09593275627510019;  // std dev = 0.054, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5412121103232855;  // std dev = 0.289, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13120697536186537;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14136492109051998;  // std dev = 1.085, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.12345951466813798;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08948875366154918;  // std dev = 0.018, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07338652761000147;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.12164780276310558;  // std dev = 0.572, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.03074002055281033;  // std dev = 0.257, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19857603670365342;  // std dev = 0.662, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.572', 'seconds']
Parameter learned model CLL:-0.111864 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.977, 1, 21], 'true,false,true': [1.83e-08, 25, 0], 'true,false,false': [0.4, 4, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,false': [0.452, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.118, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.301, 41, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.29, 5, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.219, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.622, 44, 4], 'false,false,false,false': [1.584, 12, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.741, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.012, 30, 0], 'false,true,false,false': [0.006, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.071, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.226, 0, 15], 'true,false': [0.711, 1, 1], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.058, 0, 6], 'false,false,true,false': [1.154, 41, 2], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.676, 29, 20], 'false,true': [0.149, 0, 2], 'false,false,true': [1.095, 2, 3], 'false,false,false,true': [0.073, 8, 0], 'false,false,false,false': [0.042, 3, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.456, 0, 22], 'true,false': [1.079, 53, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.254, 7, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.015, 0, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.189, 25, 7], 'false,false,false,true': [0.364, 11, 1], 'false,false,false,false': [0.969, 5, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.211, 1, 16], 'false,true,true,true': [0.196, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.054, 44, 0], 'false,false,true': [0.289, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.072, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.085, 1, 20], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.018, 28, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.572, 4, 1], 'false,true': [0.257, 5, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.662, 2, 2]}]
{'': [0.24408284023668736, 0.1983471074380164], 'true': [0.04338842975206614, 0.03222222222222224], 'false': [0.18750000000000003, 0.20408163265306126], 'false,true': [0.0, 0.0], 'true,false': [1.3322676295501878e-17, 0.16000000000000003], 'false,true,true': [0.0, nan]}
{'': [0.0009316901918518046, 0.1050186087665169], 'false': [0.09084796512801423, 0.15094649593573967], 'false,false': [4.625929269271485e-18, 0.2080474612958448], 'false,false,false': [nan, 0.2080474612958448], 'false,true': [nan, 0.09084796512801423], 'false,false,true': [nan, 4.625929269271485e-18]}
{'': [0.004275822467867063, 0.08816098172919264], 'false': [nan, 0.08816098172919265], 'false,false': [0.0, 0.08425422574048902], 'false,false,false': [0.05480045608689854, 0.15679925605434397], 'true': [0.003200060190268476, 0.0], 'true,true': [0.003200060190268476, nan], 'false,false,true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [0.0219628862567777, 0.0006017602597200894], 'false': [4.339232152999578e-05, 0.000836491332549788], 'false,false': [nan, 0.000836491332549788], 'false,false,false': [nan, 0.000836491332549788], 'false,true': [nan, 4.339232152999578e-05], 'false,true,false': [4.906765217456884e-06, 4.6562852658384364e-06]}
{'': [0.04823803095748227, 0.07469676543291028], 'false': [0.0, 0.07435085050750675], 'false,false': [0.07820896243396963, 0.0], 'false,false,true': [0.0005678753762897356, 0.030964860605960907], 'true': [0.003397789033523857, 0.2527630714802484], 'false,true': [0.0, nan]}
{'': [0.05731851969199445, 0.10654106819976152], 'false': [0.011056015100450373, 0.1032365459736041], 'false,false': [0.23997167172896638, 0.0006791135452149024], 'true': [nan, 0.05731851969199442], 'true,false': [nan, 0.05731851969199445], 'false,false,false': [0.000670583229129211, 0.0005761551849193617]}
{'': [0.04782997263764687, 0.008062695122788722], 'true': [0.009440811157204772, 0.02116474783892236], 'false': [nan, 0.008062695122788722], 'false,false': [nan, 0.008062695122788722], 'false,false,false': [nan, 0.008062695122788722]}
{'': [0.0009647743915720764, 0.04559389924329176], 'false': [nan, 0.045593899243291706], 'false,false': [0.03569812240767831, 0.062257201228665855], 'false,false,false': [0.011070649137323236, 0.13412026761392426], 'true': [1.587561219114551e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.04453338877784291, 0.036580684239435744], 'false': [0.020962986216037365, 0.1038298803623026], 'false,false': [0.027857735060836403, 0.0007451431676918126], 'false,true': [0.006387140681412699, 6.699628060288661e-05], 'false,true,true': [0.006387140681412699, nan], 'false,false,false': [nan, 0.0007451431676918126]}
{'': [0.03770532880340743, 0.0630490536965057], 'false': [0.010982107312862881, 0.10959796080258001], 'false,false': [nan, 0.10959796080258001], 'false,false,false': [nan, 0.10959796080258001], 'true': [0.05352860513779196, 0.008783058546668658], 'true,true': [0.05606301344486827, 0.0], 'true,false': [1.1545054528941587e-05, 0.03329580287820695], 'true,false,false': [-6.938893903907229e-19, 0.06542703041671202]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.272
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7270555508123273;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.0435389716194778;  // std dev = 0.338, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.15760564871510485;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04095283345445679;  // std dev = 0.802, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5537431099542116;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.7071251292132272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.5534933673708156;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.0653323565195503;  // std dev = 1.229, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | | | else return 0.06940449961175016;  // std dev = 1.201, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.12102025793083643;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.45553498882416404;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.41606514123998917;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.4597636849552072;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return 0.5242913825756823;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7080139792076448;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10781196021752258;  // std dev = 0.048, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.1255209530299683;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, I) )
%   | | then return -0.12064993278299459;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.20607239753305207;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.2968000862984717;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32559167763834285;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.29671518719568113;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.35522317868934045;  // std dev = 0.881, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.07112930439799767;  // std dev = 0.889, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else return -0.08880702609211544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.15339165382502493;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.25339165382502493;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0413073901356138;  // std dev = 0.209, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | else return 0.03707097453338125;  // std dev = 0.243, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.29527396979418985;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.5249942501260629;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.10678724241190618;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11913286977089411;  // std dev = 0.175, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then return 0.22548278564943766;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20849913682578247;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.265503025608261;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.31395720957425116;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.08942664833983374;  // std dev = 0.032, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.07335710995788054;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.1068600042261096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.0741878175985528;  // std dev = 0.650, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.015249308877435816;  // std dev = 0.273, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.18629719004628137;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.16600680774305823;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23653062751398668;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.06164106214764097;  // std dev = 0.367, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return -0.09708130065159004;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(G, J), recursion_accounttype(J, B) )
%   | | | then return 0.3070271629096029;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09815470832292669;  // std dev = 0.074, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return -0.0034619348192867286;  // std dev = 0.392, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.2535997557805673;  // std dev = 0.413, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.16516240557318945;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.15205011164711107;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.13214448192489667;  // std dev = 0.719, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.26684749947769587;  // std dev = 0.206, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.07500057805643451;  // std dev = 0.029, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.10007290338189218;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.35270506682261055;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.10172714621446602;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.23128630990952959;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08748498775305504;  // std dev = 0.876, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.2434842208561936;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.09958986975704642;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.07268573182459681;  // std dev = 0.006, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.0603000563164127;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.04349548652729673;  // std dev = 0.181, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, H) )
%   | then return -0.02024332945671872;  // std dev = 0.315, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.13060354446490444;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.01336936121071366;  // std dev = 0.544, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.590', 'seconds']
Refined model CLL: -0.106492


******************************************
Best model found
******************************************
Results 

CLL : -0.10872 

AUC ROC : 0.995181 

AUC PR : 0.435316 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 4.272 

Total Inference Time : 4.406596660614014 

Total revision time: 12.098880069732665
Best scored revision CLL: -0.106492


Results 

CLL : -0.10872 

AUC ROC : 0.995181 

AUC PR : 0.435316 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 12.128147619247436 

Total Inference Time : 4.406596660614014 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.444
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284746037870463;  // std dev = 0.129, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029087093094381677;  // std dev = 0.269, 97.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.002041639617118063;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08265836294953999;  // std dev = 2.124, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.57556889511599;  // std dev = 0.281, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.7300246578132021;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.797748294382342;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5590200633984314;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5590200633984314;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04859499793372932;  // std dev = 2.282, 87.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=8 */
%   | | | else return 0.03983974643779797;  // std dev = 2.053, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.532614205366831;  // std dev = 1.060, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12190072618789531;  // std dev = 0.075, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.1277798612205278;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15342905111602934;  // std dev = 0.119, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2956936832012474;  // std dev = 0.933, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0.43149168755869344;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2985005617867348;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5424143320769252;  // std dev = 0.999, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09266820134355758;  // std dev = 1.357, 86.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=3 */
%   | | else return -0.12480198941078358;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02595358348919393;  // std dev = 2.322, 118.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=40 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2842069960633406;  // std dev = 0.063, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5817694631161712;  // std dev = 0.266, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10535103200006866;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.12564782597777938;  // std dev = 0.105, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27683366488493494;  // std dev = 1.241, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return -0.08249534038804036;  // std dev = 1.127, 86.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07072470512943749;  // std dev = 0.277, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.187579723292257;  // std dev = 0.016, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, E) )
%   | | then return 0.20366032824290703;  // std dev = 0.021, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.030642036921570758;  // std dev = 0.161, 82.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02005133535146775;  // std dev = 0.806, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.03921446154915098;  // std dev = 1.084, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1556324735899071;  // std dev = 0.180, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3626445314385805;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09194627666616335;  // std dev = 0.035, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41972494001517807;  // std dev = 0.352, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10315167062003701;  // std dev = 0.084, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11896921192016228;  // std dev = 1.742, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else return 0.12823499807000394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08347832411254244;  // std dev = 0.021, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08464128362477776;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.016125095961863248;  // std dev = 0.387, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.014366747947700275;  // std dev = 0.553, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07293303634610075;  // std dev = 0.825, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.022', 'seconds']
Parameter learned model CLL:-0.112513 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 41], 'true,false,true': [7.15e-08, 73, 0], 'true,false,false': [0.373, 10, 2], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.497, 5, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.129, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 86, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.926, 6, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.124, 21, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.281, 0, 31], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.282, 79, 8], 'false,false,false,false': [2.053, 22, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.06, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.075, 66, 0], 'false,true,false,false': [0.022, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.119, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.933, 1, 32], 'true,false': [0.003, 0, 2], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.999, 1, 11], 'false,false,true,false': [1.357, 83, 3], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.322, 78, 40], 'false,true': [0.063, 0, 2], 'false,false,true': [0.266, 0, 8], 'false,false,false,true': [0.01, 8, 0], 'false,false,false,false': [0.105, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.241, 1, 46], 'true,false': [1.127, 83, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.277, 9, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.016, 0, 29], 'true,false,true': [0.021, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 71, 11], 'false,false,false,true': [0.806, 20, 4], 'false,false,false,false': [1.084, 10, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.18, 1, 34], 'false,true,true,true': [0.315, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 79, 0], 'false,false,true': [0.352, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.084, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.742, 3, 40], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.021, 64, 0], 'true,false,false,true': [7.45e-09, 12, 0], 'true,false,false,false': [0.387, 4, 2], 'false,true': [0.553, 13, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.825, 6, 4]}]
{'': [0.22394444788889684, 0.21172022684310027], 'true': [0.023242630385488926, 0.022975778546712827], 'false': [0.1683673469387754, 0.2469135802469134], 'false,true': [0.18750000000000006, -1.1102230246251566e-17], 'false,true,true': [1.4802973661668753e-16, 0.0], 'true,false': [6.995925908596876e-17, 0.13888888888888892]}
{'': [0.0005344766435635918, 0.09605848666724993], 'false': [0.07259007130343517, 0.1544946506793371], 'false,false': [0.12244897959183672, 0.1610712503642538], 'false,false,false': [nan, 0.1610712503642538], 'false,false,true': [nan, 0.12244897959183672], 'false,true': [nan, 0.07259007130343517]}
{'': [0.005820949578624296, 0.08770155588914269], 'false': [nan, 0.08770155588914272], 'false,false': [0.0, 0.0833551178139858], 'false,false,false': [0.05985068568360765, 0.1504702136186633], 'true': [0.0031984062371359645, 0.0033184172854937577], 'true,false': [0.0033184172854937577, nan], 'true,true': [0.0025560624246830526, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.022489198345787855, 0.0003087935100356044], 'false': [7.70631909856549e-05, 0.001171227196605169], 'false,false': [nan, 0.001171227196605169], 'false,false,false': [nan, 0.001171227196605169], 'false,true': [nan, 7.706319098566006e-05], 'false,true,false': [8.475237215493421e-05, 2.5162857123575688e-05]}
{'': [0.025869495036239903, 0.07104052150136012], 'false': [0.0, 0.07050010824463523], 'false,false': [0.07229952860449898, 0.0], 'false,false,true': [0.08314021171054098, 0.021399549728766763], 'true': [0.026383339693428598, 3.7372330159435307e-06], 'false,true': [0.0, nan]}
{'': [0.04570680747830855, 0.08898058812905257], 'false': [0.0019586041090417644, 0.0909360110130167], 'false,false': [0.008850233971836263, 0.0005126215861247123], 'true': [nan, 0.045706807478308395], 'true,false': [nan, 0.04570680747830855], 'false,false,false': [1.3374989530688317e-05, 0.0006077520867660773]}
{'': [0.05064983892525761, 0.00766855594336974], 'true': [0.03279117513205133, 0.01478187627620964], 'false': [nan, 0.00766855594336974], 'false,false': [nan, 0.00766855594336974], 'false,false,false': [nan, 0.00766855594336974]}
{'': [3.7394840313305235e-05, 0.03340441579519561], 'false': [nan, 0.03340441579519557], 'false,false': [0.025931522330262004, 0.04881166906825908], 'false,false,false': [0.02704134872771803, 0.0839138384241468], 'true': [8.710759584621152e-06, 0.00021141111372468407], 'true,false': [0.00021141111372468407, nan]}
{'': [0.03246251711245159, 0.032197372783880324], 'false': [0.020112489954974222, 0.07393681665994044], 'false,false': [0.01771882866092803, 0.0007129582800966233], 'false,true': [0.011001599485620147, 1.5493759843988753e-05], 'false,true,true': [0.011001599485620147, nan], 'false,false,false': [nan, 0.0007129582800966233]}
{'': [0.03440856328399192, 0.03972160528735399], 'false': [0.01910139696014109, 0.06802393717228285], 'false,false': [nan, 0.06802393717228285], 'false,false,false': [nan, 0.06802393717228285], 'true': [0.06898521092116565, 0.002502989065354133], 'true,true': [0.07058756690659555, 0.0], 'true,false': [6.723105938780463e-06, 0.010557969412281718], 'true,false,false': [4.625929269271485e-18, 0.024904666066845795]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.512
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return 0.011995088945666036;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.83e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.5037756837995581;  // std dev = 0.913, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7410595824184533;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H) )
%   | | then return 0.7537756837995581;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.11529381373492194;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1279332650090071;  // std dev = 0.055, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.10498755712779385;  // std dev = 1.248, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.31436333029756164;  // std dev = 1.420, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5625059042895875;  // std dev = 0.096, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.7297242359779395;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7604519111378744;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5500298946068409;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5500298946068409;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0997736379847766;  // std dev = 0.663, 49.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=1 */
%   | | | else return 0.012312803615623664;  // std dev = 1.528, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06564816258915353;  // std dev = 1.573, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.14997921951034968;  // std dev = 1.291, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( tweets(A, G), follows(F, A) )
%   | | | then return 0.41566776319297405;  // std dev = 0.002, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.4399530586061889;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5042471237713686;  // std dev = 0.156, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.4692440079520082;  // std dev = 0.878, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.6386955824604291;  // std dev = 0.225, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7061668688059219;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(K, A) )
%   | then if ( tweets(A, L) )
%   | | then return -0.10873998534008257;  // std dev = 0.010, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.11386131953037441;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.19632243114777248;  // std dev = 0.057, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.2892894960652568;  // std dev = 0.947, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.010671929974463312;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.0010247995010877846;  // std dev = 1.176, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.45608425043399986;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3149621670895462;  // std dev = 0.004, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.061231218543402126;  // std dev = 1.345, 101.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=7 */
%   | | | else return 0.11843275385706854;  // std dev = 1.564, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else return -0.18809258501555037;  // std dev = 0.446, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27335579243699254;  // std dev = 0.022, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.05173831449865867;  // std dev = 1.056, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   | | | else return 0.039683706867159746;  // std dev = 0.475, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.017260141262856226;  // std dev = 0.170, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32304665314739206;  // std dev = 0.098, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.502043146545175;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5689859854320359;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1388759894047938;  // std dev = 0.136, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.13178391415423174;  // std dev = 0.211, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.17742212886195027;  // std dev = 0.994, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.0986848872780705;  // std dev = 1.145, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, F), follows(C, F) )
%   | | | then return 0.33882154692905864;  // std dev = 0.310, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.44679125490920707;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09084032702378078;  // std dev = 0.079, 107.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.3765286451045203;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11878395778412375;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.06286950975550036;  // std dev = 0.723, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.023356912576687955;  // std dev = 0.729, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.11317674390824385;  // std dev = 0.264, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0.24993458202533714;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2183994663301811;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.020144544541114112;  // std dev = 0.923, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3312291379145764;  // std dev = 0.187, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08035933181039712;  // std dev = 0.042, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.1112596466142079;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.017532877954511302;  // std dev = 0.231, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then return 0.16933181369906264;  // std dev = 0.010, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.2095152851269986;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.04416233068028733;  // std dev = 0.948, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.2986226901518731;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05229492914195748;  // std dev = 0.849, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.07707590346445688;  // std dev = 0.007, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3442666411019453;  // std dev = 0.089, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.10871842946709559;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.18683675200381014;  // std dev = 0.201, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.08177665094074282;  // std dev = 1.620, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return 0.20586633544611807;  // std dev = 0.168, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2915157244027892;  // std dev = 0.622, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.06856687336363806;  // std dev = 0.025, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.07862572380339163;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.0634111985557545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14912001570267952;  // std dev = 0.303, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.043665775410142056;  // std dev = 0.256, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.181', 'seconds']
Refined model CLL: -0.110815


******************************************
Best model found
******************************************
Results 

CLL : -0.111905 

AUC ROC : 0.993937 

AUC PR : 0.324174 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 7.512 

Total Inference Time : 6.201764106750488 

Total revision time: 18.92275705909729
Best scored revision CLL: -0.110815


Results 

CLL : -0.111905 

AUC ROC : 0.993937 

AUC PR : 0.324174 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 18.95202460861206 

Total Inference Time : 6.201764106750488 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.797
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8427643197148973;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.17064893509951234;  // std dev = 0.464, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6874097865549518;  // std dev = 1.398, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01944305858221051;  // std dev = 0.280, 112.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09536282126794803;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8360807217799291;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.06372985566287723;  // std dev = 2.298, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5781709904950958;  // std dev = 0.266, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.7264487086850964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8122621342894194;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.20621946413546782;  // std dev = 0.682, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5670501616308459;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5670501616308459;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04548561422440909;  // std dev = 2.786, 127.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=12 */
%   | | | else return -0.016646187497450733;  // std dev = 2.136, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48473588170983406;  // std dev = 2.029, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11918583542270589;  // std dev = 0.021, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | | else return -0.12153857323894265;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15111798585898834;  // std dev = 0.096, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28984483412512846;  // std dev = 1.367, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else return 0.4744458984949218;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31389758277954316;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6414818603988535;  // std dev = 0.168, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09140811706553739;  // std dev = 1.401, 128.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=3 */
%   | | else return -0.11219118439905575;  // std dev = 2.28e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.052072243636474995;  // std dev = 2.546, 150.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=58 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26371640581343186;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5721992073214525;  // std dev = 0.393, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11413530302996;  // std dev = 0.067, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.11240151591934129;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25949149965442186;  // std dev = 1.657, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | else return -0.08357444764158035;  // std dev = 1.295, 144.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004632945012647402;  // std dev = 0.556, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1996153764607879;  // std dev = 0.024, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.21642804280905598;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03927499749608609;  // std dev = 0.154, 116.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.026192255355973616;  // std dev = 0.900, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | | else return 0.016125413670809774;  // std dev = 1.244, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13405431843931395;  // std dev = 0.228, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.198252833457864;  // std dev = 1.453, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09224359960605737;  // std dev = 0.019, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43186695458795343;  // std dev = 0.445, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0955232434837051;  // std dev = 0.080, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19607848570643366;  // std dev = 0.635, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.14939586177165398;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08511605043837293;  // std dev = 0.009, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08194466209664271;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.019305144136150358;  // std dev = 0.427, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.01819351564404542;  // std dev = 0.614, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.26679683274806576;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13224972879055868;  // std dev = 0.849, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.686', 'seconds']
Parameter learned model CLL:-0.111925 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 64], 'true,false,true': [8.16e-08, 109, 0], 'true,false,false': [0.34, 13, 2], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,false': [0.464, 11, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.398, 2, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.28, 98, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.298, 28, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.266, 0, 43], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.682, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.786, 115, 12], 'false,false,false,false': [2.136, 40, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.029, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 115, 0], 'false,true,false,false': [0.0, 27, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.096, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.367, 2, 44], 'true,false': [0.063, 0, 3], 'false,true,true': [1.05e-08, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.168, 0, 15], 'false,false,true,false': [1.401, 125, 3], 'false,false,false': [2.28e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.546, 92, 58], 'false,true': [0.086, 0, 7], 'false,false,true': [0.393, 0, 10], 'false,false,false,true': [0.067, 20, 0], 'false,false,false,false': [0.063, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.657, 3, 65], 'true,false': [1.295, 139, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.556, 12, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.024, 0, 49], 'true,false,true': [0.028, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 102, 14], 'false,false,false,true': [0.9, 29, 5], 'false,false,false,false': [1.244, 18, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.228, 3, 47], 'false,true,true,true': [1.453, 2, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.019, 107, 0], 'false,false,true': [0.445, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.08, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.635, 0, 58], 'true,true,false': [0.009, 0, 6], 'true,false,true': [0.009, 119, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.427, 5, 2], 'false,true': [0.614, 18, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.849, 5, 4]}]
{'': [0.2272612748803226, 0.2140309155766945], 'true': [0.015147928994082021, 0.015868886576482794], 'false': [0.21301775147928975, 0.2148437499999998], 'false,true': [0.0, -9.25185853854297e-18], 'true,false': [6.111319401606367e-17, 0.11555555555555559], 'false,true,true': [0.0, nan]}
{'': [0.03685189160964154, 0.09429491196385467], 'false': [0.07865434465760582, 0.12309168693258486], 'false,false': [0.04338842975206614, 0.15840588300575742], 'false,false,false': [0.0, 0.14668372587145537], 'false,true': [nan, 0.07865434465760582], 'false,false,true': [nan, 0.04338842975206614]}
{'': [0.019809240561358982, 0.08641746766449604], 'false': [nan, 0.086417467664496], 'false,false': [1.7763568394002506e-16, 0.07142009158714371], 'false,false,false': [0.06113195408257016, 0.0992137337698165], 'true': [0.00209982618206653, 0.20982109775299373], 'true,false': [0.0033718883564973767, 0.2326264481258244], 'true,true': [0.0016489711283722668, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.05278259688403116, 0.0001672301197438565], 'false': [3.903191888403382e-06, 0.00045794054461627265], 'false,false': [nan, 0.00045794054461627265], 'false,false,false': [nan, 0.00045794054461627265], 'false,true': [nan, 3.903191888403382e-06], 'false,true,false': [3.7670925378072997e-06, -1.850371707708594e-17]}
{'': [0.040177749791374964, 0.06314987452325178], 'false': [1.1102230246251566e-17, 0.060390979663420094], 'false,false': [0.06435519642526658, 5.046468293750712e-18], 'false,false,true': [0.0018834294444361058, 0.015334038184651884], 'true': [0.04062418842799944, 0.0013411851905367571], 'false,true': [1.1102230246251566e-17, nan]}
{'': [0.04322259709517211, 0.08035556727379342], 'false': [0.0010453720356875767, 0.08625031209968173], 'false,false': [0.015415929319484479, 0.0002485894534064709], 'true': [nan, 0.04322259709517195], 'true,false': [nan, 0.04322259709517211], 'false,false,false': [0.00022513504095129921, 0.0002803275111815642]}
{'': [0.046506778511242124, 0.018190398187659412], 'true': [0.0403946934955888, 0.011642056892957336], 'false': [nan, 0.018190398187659412], 'false,false': [nan, 0.018190398187659412], 'false,false,false': [nan, 0.018190398187659412]}
{'': [3.689908275114998e-05, 0.02978481255408296], 'false': [nan, 0.029784812554082808], 'false,false': [0.02358466373348386, 0.04179280595615589], 'false,false,false': [0.02382636141106707, 0.06728371028179074], 'true': [1.1339662577222345e-05, 0.0003915240586363014], 'true,false': [0.0003915240586363014, nan]}
{'': [0.052133027672139766, 0.035313914935783605], 'false': [0.02830767480121791, 0.05855399105080202], 'false,false': [0.024808489151337876, 0.0002673864284409716], 'false,true': [0.09597353610168885, 3.2855746039997033e-06], 'false,true,true': [0.09597353610168885, nan], 'false,false,false': [nan, 0.0002673864284409716]}
{'': [0.01958367280051912, 0.04062069984143839], 'false': [0.017155974347258945, 0.07377509995530174], 'false,false': [0.0, 0.08016204096533339], 'false,false,false': [nan, 0.08016204096533339], 'true': [0.006489231756520386, 0.0019276121731031206], 'true,true': [0.0069547257652654605, 1.4495277849709462e-05], 'true,false': [7.149788681207122e-07, 0.01656571397748071], 'true,false,false': [1.1564823173178713e-18, 0.026033425111898434]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.892
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, G) )
%   | | | then return 0.8311219080724844;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.10814893509951223;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7310643415354753;  // std dev = 0.157, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5315205239198425;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(F, A), tweets(F, G) )
%   | | | then return -0.05000552685523566;  // std dev = 2.550, 112.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=10 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.11184985278353765;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13815014721646235;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.8444674378357556;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10264763508448607;  // std dev = 2.283, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.569409115809633;  // std dev = 0.122, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.6480161992592992;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.48581516085802523;  // std dev = 0.977, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5525024298331849;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5525024298331849;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6385453870647496;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.12097887552962022;  // std dev = 0.055, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08181492294803197;  // std dev = 1.517, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.04560366181460687;  // std dev = 1.753, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.4253030946564884;  // std dev = 0.102, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.5524769887385316;  // std dev = 0.290, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10825442218473207;  // std dev = 0.864, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.41539277174447786;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5874203064667359;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7634851381686181;  // std dev = 0.122, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.11017999700290577;  // std dev = 0.008, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else if ( tweets(A, J) )
%   | | then return -0.14711771265260157;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.18582047172170513;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.28990825782327484;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.3511962873739063;  // std dev = 0.033, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11648340378586342;  // std dev = 0.986, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.49576014031910837;  // std dev = 0.185, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.31927437582232854;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.31927437582232854;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.42935647281983513;  // std dev = 0.949, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09070180962528687;  // std dev = 1.306, 134.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=3 */
%   | | else return -0.09974609136602973;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1793869593864024;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.2598387699360234;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.26778547899561905;  // std dev = 0.011, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.06005795143485741;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05090645576715012;  // std dev = 1.160, 88.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=8 */
%   | | | else return -0.062254236536252686;  // std dev = 0.588, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2740326479243213;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.5537929840466864;  // std dev = 0.104, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11439116233538658;  // std dev = 0.018, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, C) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | | then return 0.18332372399143093;  // std dev = 0.977, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.22976411440076902;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.02935627841651267;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.41648964728577614;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07593773603409912;  // std dev = 0.098, 80.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=4 */
%   | | else return 3.8141649130873283E-4;  // std dev = 0.170, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.20580245061731403;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04025406819063383;  // std dev = 0.831, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return 0.07199728765974937;  // std dev = 1.027, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.12214045030137964;  // std dev = 1.335, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.19494421880920745;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.190986221333577;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.11049105745849123;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.03601899909555284;  // std dev = 0.131, 131.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3515345388545953;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10434493624400651;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04892676259529262;  // std dev = 0.589, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.12199268522395708;  // std dev = 0.819, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then return 0.1736577443614855;  // std dev = 0.016, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.2922723791749254;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.0803986434561907;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17354606433536143;  // std dev = 0.088, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2708224297167963;  // std dev = 0.956, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.079842157862687;  // std dev = 0.005, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.29391428261159647;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.47342136982689853;  // std dev = 0.140, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11886216780259229;  // std dev = 0.028, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17425651373132017;  // std dev = 0.057, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.07351546042435816;  // std dev = 0.002, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.07107439877127762;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.06656547119819542;  // std dev = 0.851, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1986997480822872;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08525018123270173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.04228404835624245;  // std dev = 0.114, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.261572018746003;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.005769824497391124;  // std dev = 0.219, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.132', 'seconds']
Refined model CLL: -0.107625


******************************************
Best model found
******************************************
Results 

CLL : -0.108107 

AUC ROC : 0.994411 

AUC PR : 0.367656 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 8.892 

Total Inference Time : 7.271163463592529 

Total revision time: 23.19874750518799
Best scored revision CLL: -0.107625


Results 

CLL : -0.108107 

AUC ROC : 0.994411 

AUC PR : 0.367656 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 23.22801505470276 

Total Inference Time : 7.271163463592529 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.087
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460237;  // std dev = 1.398, 86.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.35814893509951234;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.726240996514159;  // std dev = 0.140, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02549313736183861;  // std dev = 0.274, 153.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.058376168190503716;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.526459223826764;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06185478887481128;  // std dev = 2.687, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.4972252957364049;  // std dev = 2.141, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   | | else return 0.729206420494642;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8134882399337122;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6396207664657156;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5594341448993461;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5594341448993462;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.052416107271639534;  // std dev = 3.028, 163.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=14 */
%   | | | else return 0.045442295359088274;  // std dev = 2.491, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.485420518064144;  // std dev = 2.301, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11841300741119923;  // std dev = 0.038, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | | else return -0.1281411141758209;  // std dev = 0.008, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16503593552718687;  // std dev = 0.238, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.310008404594273;  // std dev = 1.503, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else return 0.22468929410830857;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30874592027025444;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5857233226227501;  // std dev = 0.984, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.0936826202211937;  // std dev = 1.743, 198.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=5 */
%   | | else return -0.11065186642144255;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03126482748165197;  // std dev = 3.051, 234.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=76 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1625430813112759;  // std dev = 0.976, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.33885819799378764;  // std dev = 1.945, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11083886628593663;  // std dev = 0.109, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11247838860131572;  // std dev = 0.152, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.310364735698745;  // std dev = 0.874, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | else return -0.08312157376507698;  // std dev = 1.673, 194.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006310674434399453;  // std dev = 0.768, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18542577493055726;  // std dev = 0.996, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.24236270846488733;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05815524300165825;  // std dev = 0.172, 174.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02492730834918575;  // std dev = 1.226, 57.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=8 */
%   | | | else return 0.07654740137595058;  // std dev = 1.566, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17829217122831648;  // std dev = 0.145, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2980690980519249;  // std dev = 0.585, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0890874174751249;  // std dev = 0.044, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47373978542050427;  // std dev = 0.456, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12036765897543131;  // std dev = 0.220, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19032479973108515;  // std dev = 0.710, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else return 0.05898654649009987;  // std dev = 0.750, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08237522858090662;  // std dev = 0.033, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08204096027839218;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.018006283472892338;  // std dev = 0.502, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -7.266300743344835E-4;  // std dev = 1.151, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.27990861868296724;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.006995511874278449;  // std dev = 1.206, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.590', 'seconds']
Parameter learned model CLL:-0.109694 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.398, 2, 84], 'true,false,true': [0.0, 149, 0], 'true,false,false': [0.282, 21, 2], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.5, 7, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.14, 0, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.274, 135, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.961, 12, 1], 'false,false,false,true': [0.775, 1, 3], 'false,false,false,false': [2.687, 36, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.141, 5, 59], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.091, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.028, 149, 14], 'false,false,false,false': [2.491, 32, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.301, 4, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.038, 122, 0], 'false,true,false,false': [0.008, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.503, 2, 61], 'true,false': [0.879, 1, 4], 'false,true,true': [0.0, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.984, 1, 18], 'false,false,true,false': [1.743, 193, 5], 'false,false,false': [1.32e-09, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.051, 158, 76], 'false,true': [0.976, 1, 9], 'false,false,true': [1.945, 3, 15], 'false,false,false,true': [0.109, 22, 0], 'false,false,false,false': [0.152, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.874, 0, 86], 'true,false': [1.673, 187, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.768, 12, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 65], 'true,false,true': [0.075, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.172, 156, 18], 'false,false,false,true': [1.226, 49, 8], 'false,false,false,false': [1.566, 12, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.145, 1, 65], 'false,true,true,true': [0.585, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 168, 0], 'false,false,true': [0.456, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.22, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.71, 0, 76], 'true,true,false': [0.75, 1, 8], 'true,false,true': [0.033, 133, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.502, 10, 2], 'false,true': [1.151, 16, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.206, 19, 6]}]
{'': [0.22222222222222304, 0.2248661511005349], 'false': [0.19204389574759959, 0.25], 'true': [0.022714981070848902, 0.011492698756084201], 'false,true': [-2.5376526277146434e-16, 2.7755575615628915e-18], 'true,false': [-1.1027718633860615e-16, 0.07939508506616262], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.00029047128315721354, 0.09973087868607008], 'false': [0.07492726939085462, 0.1530639987509519], 'false,false': [0.07100591715976336, 0.16899492907972716], 'false,false,false': [0.1502076684182685, 0.15366386205897542], 'false,true': [nan, 0.07492726939085462], 'false,false,true': [nan, 0.07100591715976336]}
{'': [0.06987991988408397, 0.09104614827553234], 'false': [nan, 0.09104614827553245], 'false,false': [-1.4802973661668753e-16, 0.07691956685182322], 'false,false,false': [0.05626145056143182, 0.1513965504431759], 'true': [0.0713646507554954, 0.010260289380660304], 'true,true': [0.07165179661979487, 0.0], 'true,false': [0.0033521679388127668, 0.002773744343167387], 'false,false,true': [-4.4408920985006264e-17, -1.2688263138573217e-16]}
{'': [0.050890496862074336, 0.0006419451411854944], 'false': [2.38354060471517e-05, 0.001672050016421299], 'false,false': [nan, 0.001672050016421299], 'false,false,false': [nan, 0.001672050016421299], 'false,true': [nan, 2.3835406047154723e-05], 'false,true,false': [1.2055897959322451e-05, 2.777912527254234e-06]}
{'': [0.0450765348387743, 0.0565957604126749], 'false': [0.0, 0.053564544214068414], 'false,false': [0.05533143105757213, 1.734723475976807e-18], 'false,false,true': [0.05096057299412208, 0.015334929327827864], 'true': [0.03585960108697842, 0.15446579586597226], 'false,true': [0.0, nan]}
{'': [0.0397858309558331, 0.09257576384875164], 'false': [0.09528806220509059, 0.08897800042295968], 'false,false': [0.21013207236427736, 0.0006271479112762574], 'true': [nan, 0.03978583095583274], 'true,false': [nan, 0.0397858309558331], 'false,false,false': [0.0005394871803005297, 0.0006828135476007991]}
{'': [0.045669354112092386, 0.031080757602918327], 'true': [0.008877332102255116, 0.014423837706100116], 'false': [nan, 0.031080757602918327], 'false,false': [nan, 0.031080757602918327], 'false,false,false': [nan, 0.031080757602918327]}
{'': [0.014770876703624385, 0.03765103125398056], 'false': [nan, 0.03765103125398043], 'false,false': [0.02947108963739691, 0.053989032511932204], 'false,false,false': [0.026375481655997512, 0.12910684754438573], 'true': [0.01503691898615848, 0.002845014462067648], 'true,false': [0.002845014462067648, nan]}
{'': [0.02115969655104428, 0.02842799642786861], 'false': [0.018185320815065385, 0.06569393358233984], 'false,false': [0.018915896694636638, 0.0012357346512913369], 'false,true': [0.014249646271466613, 1.12890961988521e-05], 'false,true,true': [0.014249646271466613, nan], 'false,false,false': [nan, 0.0012357346512913369]}
{'': [0.02114933469208991, 0.058363305797975946], 'false': [0.057638208891878005, 0.05899407612930577], 'false,false': [0.0, 0.05818791686175458], 'false,false,false': [nan, 0.05818791686175458], 'true': [0.014179974868872184, 0.001963292195525265], 'true,true': [0.006635226762512526, 0.062467887052190446], 'true,false': [8.066307320470215e-06, 0.01419493930286637], 'true,false,false': [0.0, 0.020964632203129958]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.948
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8354216623722391;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.13001674537386093;  // std dev = 0.108, 169.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7271705329851521;  // std dev = 0.151, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return 0.6480448407823828;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(A, F) )
%   | | then return 0.7340533457129585;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7852874063166855;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11840168783632;  // std dev = 0.864, 104.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=1 */
%   | | | else return 0.021429440978322594;  // std dev = 2.602, 64.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09496876601230754;  // std dev = 1.779, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.1391677215936587;  // std dev = 1.748, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.561896643840642;  // std dev = 0.041, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.40329330267620445;  // std dev = 0.933, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5517633025532462;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6588318923669135;  // std dev = 0.227, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5635262720571147;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.733873249720773;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11981004623910467;  // std dev = 0.094, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.00799273236200938;  // std dev = 1.714, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   | | | else return 0.13281691130990947;  // std dev = 1.870, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3785341826171016;  // std dev = 1.687, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | | | else return 0.5290999482638536;  // std dev = 0.248, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.04067517542409347;  // std dev = 0.733, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4800587524111015;  // std dev = 0.218, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6864438146620095;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7490303969625429;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then return -0.1063318515029218;  // std dev = 0.006, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( tweets(A, J) )
%   | | then return -0.1370531638378263;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.1889258881271992;  // std dev = 0.030, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.3329810295065975;  // std dev = 0.031, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return -0.0021910072422983338;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3401060020104023;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.4169416753220627;  // std dev = 0.298, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33216185498190165;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.05723777634659135;  // std dev = 1.842, 151.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=12 */
%   | | | else return 0.05273763548239236;  // std dev = 2.016, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | else return -0.0932518930800649;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.2637037329645131;  // std dev = 0.023, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.18436254319119136;  // std dev = 1.365, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.11169104502200193;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.12540027296950687;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.052355071665024955;  // std dev = 0.142, 165.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27707091574852566;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4411968366912593;  // std dev = 0.392, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.402357040822554;  // std dev = 0.883, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.12111555751302251;  // std dev = 0.031, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then return 0.20182906852349916;  // std dev = 0.133, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return -0.10771669004524458;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.25706231946488534;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then return 0.24262900223429906;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.010883876020452354;  // std dev = 0.992, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.46559737027811937;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08790245518551949;  // std dev = 0.072, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.04179919111031101;  // std dev = 1.176, 42.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=6 */
%   | | | else return -0.0078076989578239105;  // std dev = 1.244, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.19035610379807694;  // std dev = 0.118, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else return 0.22417245394367646;  // std dev = 0.094, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then if ( tweets(A, H), follows(F, G) )
%   | | | then return -0.07295492913702371;  // std dev = 0.465, 109.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=1 */
%   | | | else return -0.07784055072418207;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.14401714292497303;  // std dev = 1.813, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return -0.08725944271748731;  // std dev = 0.017, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.24427919100045115;  // std dev = 1.135, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.037947112414044505;  // std dev = 1.086, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.017860502052759773;  // std dev = 1.222, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1639387800857116;  // std dev = 0.014, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.03721290239821673;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.24518169382352878;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16090011876523666;  // std dev = 0.053, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3257822255865612;  // std dev = 0.092, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07473894461019281;  // std dev = 0.057, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.40333780380265877;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.473986601341846;  // std dev = 0.134, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1274557509573639;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.127401108655413;  // std dev = 0.122, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | else return 0.23035510832714123;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.06582746275160613;  // std dev = 0.036, 164.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25002068076071293;  // std dev = 0.209, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10050609121949007;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0939081442324774;  // std dev = 0.400, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.23558330866137123;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0016084193708986374;  // std dev = 0.598, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.036407482467431626;  // std dev = 0.864, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.808', 'seconds']
Refined model CLL: -0.105356


******************************************
Best model found
******************************************
Results 

CLL : -0.103176 

AUC ROC : 0.994055 

AUC PR : 0.339357 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 11.948 

Total Inference Time : 10.463791847229004 

Total revision time: 32.190199527740475
Best scored revision CLL: -0.105356


Results 

CLL : -0.103176 

AUC ROC : 0.994055 

AUC PR : 0.339357 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 32.219467077255246 

Total Inference Time : 10.463791847229004 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.525
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.08470820775763062;  // std dev = 0.232, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.13939893509951237;  // std dev = 0.450, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7048276128238381;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029044533012477204;  // std dev = 0.271, 193.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09338747601965879;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5678115162736128;  // std dev = 0.820, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12061150797660017;  // std dev = 3.205, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.570309071408076;  // std dev = 0.927, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7326831677563017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8217021741004674;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6315526974245785;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5681744046199891;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45706329350887803;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.037219128166193494;  // std dev = 3.648, 204.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=21 */
%   | | | else return -0.0011036784583255313;  // std dev = 2.878, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.51220802122769;  // std dev = 2.014, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11824165790029181;  // std dev = 0.003, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | | else return -0.12215792192817305;  // std dev = 0.000762, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15292350192277282;  // std dev = 0.140, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2924458931669803;  // std dev = 1.604, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.22952212330254912;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2652946776505433;  // std dev = 0.961, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6333489548874137;  // std dev = 0.210, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08692173152593737;  // std dev = 2.330, 273.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=9 */
%   | | else return -0.10587783655339389;  // std dev = 1.32e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02782286560745684;  // std dev = 3.395, 275.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2800528510349472;  // std dev = 0.135, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5422383689099501;  // std dev = 0.751, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1201671107241376;  // std dev = 0.111, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.11430184522796953;  // std dev = 0.109, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2601181132063301;  // std dev = 2.104, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.0769179287423739;  // std dev = 2.049, 248.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004927679641649722;  // std dev = 1.050, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2014332876180414;  // std dev = 0.094, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return -0.10392792417242695;  // std dev = 0.855, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03448908612802966;  // std dev = 0.159, 174.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.009582154229640706;  // std dev = 1.341, 53.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=13 */
%   | | | else return 0.0477864270091369;  // std dev = 1.744, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16705186591084278;  // std dev = 0.158, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26162711472287997;  // std dev = 1.084, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09126900657190677;  // std dev = 0.031, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4472967618953381;  // std dev = 0.641, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11155364415828153;  // std dev = 0.112, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1617240857326692;  // std dev = 1.774, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.15412083417941455;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08476351827264417;  // std dev = 0.014, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08014705474136406;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.07322158923324623;  // std dev = 0.896, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.005096615695297623;  // std dev = 1.535, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.27674766731836087;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.028689009386626593;  // std dev = 1.557, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.854', 'seconds']
Parameter learned model CLL:-0.109772 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 185, 0], 'true,false,false': [0.232, 33, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [3.16e-08, 33, 0], 'false,false': [0.45, 23, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 171, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.82, 1, 4], 'false,false,false,false': [3.205, 43, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.927, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.136, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.648, 183, 21], 'false,false,false,false': [2.878, 65, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.014, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.003, 154, 0], 'false,true,false,false': [0.000762, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.14, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.604, 3, 73], 'true,false': [0.891, 1, 4], 'false,true,true': [0.961, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.21, 0, 23], 'false,false,true,false': [2.33, 264, 9], 'false,false,false': [1.32e-09, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.395, 184, 91], 'false,true': [0.135, 0, 13], 'false,false,true': [0.751, 0, 22], 'false,false,false,true': [0.111, 36, 0], 'false,false,false,false': [0.109, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.104, 4, 107], 'true,false': [2.049, 237, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.05, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.094, 0, 80], 'true,false,true': [0.855, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 152, 22], 'false,false,false,true': [1.341, 40, 13], 'false,false,false,false': [1.744, 26, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.158, 2, 77], 'false,true,true,true': [1.084, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 214, 0], 'false,false,true': [0.641, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.112, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.774, 3, 94], 'true,true,false': [0.005, 0, 9], 'true,false,true': [0.014, 166, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.896, 13, 2], 'false,true': [1.535, 16, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.557, 19, 8]}]
{'': [0.21799511825604104, 0.19834710743801678], 'true': [0.03598567560485849, 0.009008264462809756], 'false': [0.19555555555555507, 0.2021484375000001], 'false,true': [-1.4802973661668753e-16, 3.027880976250427e-17], 'true,false': [-2.1124243495570547e-16, 0.05387755102040817], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02355718015228972, 0.10204153256063395], 'false': [0.07364331720422491, 0.1535801452235946], 'false,false': [0.03698224852071001, 0.18259014517119238], 'false,false,false': [0.1345019960189636, 0.17121381036304364], 'false,true': [nan, 0.07364331720422491], 'false,false,true': [nan, 0.03698224852071001]}
{'': [0.013359693722013807, 0.09240397040614827], 'false': [nan, 0.09240397040614834], 'false,false': [0.0524691358024691, 0.07735548980835029], 'false,false,false': [0.06522011040635042, 0.10897910849592447], 'false,false,true': [4.9343245538895844e-17, 0.09876543209876548], 'true': [0.01230694492489532, 0.012169781602645294], 'true,true': [0.012114096800068258, 0.0], 'true,false': [0.003223496049104213, 0.004590649886044296]}
{'': [0.03170257500723883, 0.00025387128065800044], 'false': [2.8052359392331893e-06, 0.0004231067257863867], 'false,false': [nan, 0.0004231067257863867], 'false,false,false': [nan, 0.0004231067257863867], 'false,true': [nan, 2.8052359392331893e-06], 'false,true,false': [7.131770149618009e-08, 1.2349528784936793e-08]}
{'': [0.04181007433304767, 0.05902201379294467], 'false': [0.051270967363536916, 0.0545034659231165], 'false,false': [0.05566271514759954, 1.982541115402065e-18], 'false,false,true': [0.0019090484304258497, 0.019880037954206082], 'false,true': [0.051270967363536916, nan], 'true': [0.033866377298533125, 0.1588392759013657]}
{'': [0.04192208506332057, 0.08137058440704084], 'false': [0.0014030797001989453, 0.08555963426423638], 'false,false': [0.025670456217741465, 0.00035663165343590786], 'true': [nan, 0.04192208506332116], 'true,false': [nan, 0.04192208506332057], 'false,false,false': [0.00034416906914549707, 0.0003521352135446968]}
{'': [0.048282574164402244, 0.05007899348699638], 'false': [nan, 0.05007899348699638], 'false,false': [nan, 0.05007899348699638], 'false,false,false': [nan, 0.05007899348699638], 'true': [0.03987079740834088, 0.01692536222363846]}
{'': [0.012157559255036544, 0.03613641795279238], 'false': [nan, 0.03613641795279209], 'false,false': [0.02524736435694896, 0.05533433546658326], 'false,false,false': [0.033919181033650866, 0.08688394082193233], 'true': [0.00010943978799854981, 0.24356559355727758], 'true,false': [0.24356559355727758, nan]}
{'': [0.02507745921923032, 0.0305792549052503], 'false': [0.019180842902812894, 0.07122748545346462], 'false,false': [0.024138123446701493, 0.0002987500949206729], 'false,true': [0.035639095167539894, 4.518923954987889e-06], 'false,true,true': [0.035639095167539894, nan], 'false,false,false': [nan, 0.0002987500949206729]}
{'': [0.026588083062623117, 0.0868633042980844], 'false': [0.08412370549236238, 0.08869361093941067], 'false,false': [0.0, 0.08978094885790455], 'false,false,false': [nan, 0.08978094885790455], 'true': [0.029707326624548287, 0.004061597965928497], 'true,true': [0.03245853479902394, 2.51521364712083e-06], 'true,false': [1.2480380078163173e-06, 0.025072831613124392], 'true,false,false': [-4.081702296416017e-18, 0.053463227590314195]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.883
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8126943896449672;  // std dev = 1.692, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13092210315185435;  // std dev = 0.104, 183.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.6549056037910544;  // std dev = 0.265, 65.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | else return 0.7319875599676137;  // std dev = 0.160, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.22959284681380174;  // std dev = 1.201, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.7346012731467914;  // std dev = 0.158, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.12664855237670763;  // std dev = 1.35e-07, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6425503352878773;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21450853332266342;  // std dev = 1.165, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.2947439527700099;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.555549163755047;  // std dev = 1.416, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.34131899406870375;  // std dev = 1.132, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.6177424588657912;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then return 0.3665632807030708;  // std dev = 0.984, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4170460444584066;  // std dev = 0.960, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5522741590331537;  // std dev = 1.67e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(I, A) )
%   | | then return -0.06836973708017048;  // std dev = 0.170, 230.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07433352800659195;  // std dev = 1.782, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.16821997732563282;  // std dev = 2.052, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.42282047387354926;  // std dev = 0.989, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.33626817252584656;  // std dev = 1.346, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.49978458119812696;  // std dev = 0.221, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.41522401946683674;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.38063850243614783;  // std dev = 0.777, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5636746296425601;  // std dev = 0.255, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5754579225787473;  // std dev = 0.215, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6792699876256493;  // std dev = 0.264, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1120308836388356;  // std dev = 0.023, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3477190664973539;  // std dev = 0.095, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.26522275625120784;  // std dev = 0.333, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.4564758458731058;  // std dev = 0.296, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3314397049634162;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4448540097260708;  // std dev = 0.235, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08468228042537938;  // std dev = 1.922, 257.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=9 */
%   | | else return -0.09639210026684893;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.27375563124074304;  // std dev = 0.082, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.19348858837530755;  // std dev = 1.264, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.12373029407486424;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04901894704547913;  // std dev = 0.125, 158.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=15 */
%   | | else return -0.04873562665101276;  // std dev = 0.116, 46.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2778377673672377;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3240694916927898;  // std dev = 0.219, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.528511564635535;  // std dev = 0.339, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11070831294223195;  // std dev = 0.035, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.22867680848270158;  // std dev = 0.158, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( follows(D, C), follows(C, A) )
%   | | | then return 0.4524776210211272;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3096030024023449;  // std dev = 0.116, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, D) )
%   | | then return -0.08536279216425673;  // std dev = 0.000114, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.0026327147162221753;  // std dev = 0.175, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.21619892930189022;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.22676363795141924;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.002661360394941221;  // std dev = 1.865, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | | else return -0.07979969480327849;  // std dev = 1.05e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.14369550012851473;  // std dev = 1.671, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | | | else return -0.012124982539151397;  // std dev = 1.262, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.1774040767620728;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3037049388975216;  // std dev = 0.138, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.050704567744393685;  // std dev = 0.127, 225.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2388564690559911;  // std dev = 0.190, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09941100237354315;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.012118394078360397;  // std dev = 0.660, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.007942135278089003;  // std dev = 1.366, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.11498954761368928;  // std dev = 1.681, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | | else return -0.13580085229975428;  // std dev = 0.706, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22558650425538593;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.23179479753052643;  // std dev = 0.265, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.1918246321888186;  // std dev = 0.195, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07509926355223262;  // std dev = 0.018, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2257255827986448;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.40761805425193615;  // std dev = 0.320, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11793916444677587;  // std dev = 0.046, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12742685155247865;  // std dev = 1.406, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.19482762354187608;  // std dev = 0.918, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.13201687511150637;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06638053561414997;  // std dev = 0.037, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.001553554946541913;  // std dev = 0.105, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | else return -0.019099978905803942;  // std dev = 0.128, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2463017132694426;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.036234301682637624;  // std dev = 0.422, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.01362097294618701;  // std dev = 1.094, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.044', 'seconds']
Refined model CLL: -0.102247


******************************************
Best model found
******************************************
Results 

CLL : -0.100136 

AUC ROC : 0.994588 

AUC PR : 0.354073 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 15.883 

Total Inference Time : 27.030030727386475 

Total revision time: 53.36556506919861
Best scored revision CLL: -0.102247


Results 

CLL : -0.100136 

AUC ROC : 0.994588 

AUC PR : 0.354073 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 53.39483261871338 

Total Inference Time : 27.030030727386475 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.239
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.039967116917694;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10059410762429298;  // std dev = 0.143, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05794660950215521;  // std dev = 1.471, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08672488813205906;  // std dev = 1.711, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.4839378653177132;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7005867272999902;  // std dev = 0.205, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.010184303068664042;  // std dev = 2.078, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | | else return -0.07198695512186216;  // std dev = 0.956, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47016241718590196;  // std dev = 1.354, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12949326176328918;  // std dev = 0.107, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.12263579850998771;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13945813110409247;  // std dev = 0.012, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3366489780799935;  // std dev = 0.305, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30935185021863343;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.603694503236964;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09320790104830445;  // std dev = 0.878, 54.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=1 */
%   | | else return 0.1059075971517625;  // std dev = 0.367, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008811967338899884;  // std dev = 1.184, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24228658753309595;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.38798215823196314;  // std dev = 1.246, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11523115290184821;  // std dev = 0.021, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.13941098161162233;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2618093851446622;  // std dev = 0.326, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07305168727299421;  // std dev = 0.967, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.032964575424517105;  // std dev = 1.143, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20040557464466977;  // std dev = 0.072, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.07168072697134972;  // std dev = 0.092, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.052143908234799294;  // std dev = 1.287, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return -0.038881534364648314;  // std dev = 0.764, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18244173330817506;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3044323606422279;  // std dev = 0.561, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09575997260884521;  // std dev = 0.162, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.2826638833898454;  // std dev = 0.736, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10435759559731876;  // std dev = 0.052, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15922532715009452;  // std dev = 0.223, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1812157866527514;  // std dev = 0.225, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.07606097714964238;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1277288291073339;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.044343035757625764;  // std dev = 1.024, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.029168369511963086;  // std dev = 0.644, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007101516006953864;  // std dev = 0.681, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.750', 'seconds']
Parameter learned model CLL:-0.103095 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [2.98e-08, 32, 0], 'true,false,false': [0.386, 9, 2], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 9, 0], 'false,false': [0.331, 7, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 19], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.143, 33, 1], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.471, 11, 3], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [1.711, 15, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.964, 1, 13], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.205, 0, 2], 'true,false,false': [1.05e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.078, 37, 7], 'false,false,false,false': [0.956, 14, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.354, 2, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.107, 32, 0], 'false,true,false,false': [0.041, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.012, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.305, 0, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.038, 0, 4], 'false,false,true,false': [0.878, 53, 1], 'false,false,false': [0.367, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.184, 36, 14], 'false,true': [0.028, 0, 6], 'false,false,true': [1.246, 1, 11], 'false,false,false,true': [0.021, 12, 0], 'false,false,false,false': [0.022, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.326, 0, 22], 'true,false': [0.967, 52, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.143, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.072, 0, 19], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.092, 29, 1], 'false,false,false,true': [1.287, 18, 10], 'false,false,false,false': [0.764, 11, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.069, 0, 18], 'false,true,true,true': [0.561, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.162, 45, 0], 'false,false,true': [0.736, 1, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.052, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.223, 0, 16], 'true,true,false': [0.225, 0, 5], 'true,false,true': [0.008, 21, 0], 'true,false,false,true': [0.028, 5, 0], 'true,false,false,false': [1.024, 3, 2], 'false,true': [0.644, 10, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.681, 6, 1]}]
{'': [0.23022460937500103, 0.22222222222222232], 'true': [0.0, 0.04434829637641966], 'false': [0.24609375000000003, 0.10937500000000004], 'false,true': [-2.5376526277146434e-16, -9.25185853854297e-18], 'true,false': [2.7755575615628914e-17, 0.14876033057851243], 'false,true,true': [-1.4802973661668753e-16, 0.0]}
{'': [1.8698493046318425e-16, 0.11065168728770874], 'false': [0.020379113245113184, 0.16876920081843638], 'false,false': [0.15454202170236128, 0.17274108799936116], 'false,false,false': [1.4802973661668753e-16, 0.14642998667004517], 'false,false,true': [nan, 0.15454202170236128], 'false,true': [nan, 0.020379113245113184]}
{'': [0.055676687875310084, 0.1060189105206544], 'false': [nan, 0.10601891052065425], 'false,false': [-4.4408920985006264e-17, 0.08996928346774243], 'false,false,false': [0.09815674672512921, 0.06091724848457665], 'true': [0.0663265306122447, 0.013496916984641727], 'true,true': [0.0663265306122447, nan], 'true,false': [0.021088932788502712, 3.700743415417188e-17], 'false,false,true': [0.0, 0.0]}
{'': [0.05557083343241638, 0.00024779756275793814], 'false': [0.0003577157714087389, 6.386885985795732e-06], 'false,true': [nan, 0.0003577157714087389], 'false,true,false': [0.0003549841511512504, 0.0003345280417959312], 'false,false': [nan, 6.386885985795732e-06], 'false,false,false': [nan, 6.386885985795732e-06]}
{'': [0.005182716565002416, 0.06351714356781263], 'false': [0.0, 0.060625020086890344], 'false,false': [0.044498867155165774, 0.13469507287557936], 'false,false,true': [0.00036837541752215985, 0.014273105496748843], 'true': [0.005182716565002416, nan], 'false,true': [0.0, nan]}
{'': [0.028043808647628746, 0.09697523279093544], 'false': [0.0001309670311766357, 0.11030586672737076], 'false,false': [0.12942886704196818, 0.00018783950297285025], 'true': [nan, 0.028043808647628676], 'true,false': [nan, 0.028043808647628746], 'false,false,false': [3.8271221160526836e-05, 6.139345583092148e-05]}
{'': [0.03675979592298088, 0.06224793660174967], 'false': [nan, 0.06224793660174967], 'false,false': [nan, 0.06224793660174967], 'false,false,false': [nan, 0.06224793660174967], 'true': [0.004834377633406873, 0.017307202660108625]}
{'': [0.0002720864031081101, 0.038883079101869084], 'false': [nan, 0.03888307910186908], 'false,false': [0.008427774665758253, 0.057732186675797326], 'false,false,false': [0.05916877898787966, 0.04858019610730752], 'true': [0.0002720864031081101, nan]}
{'': [0.004773632450071575, 0.033465079229522715], 'false': [0.026956594934772826, 0.046049513221365496], 'false,false': [0.09026777005614306, 0.00013003106597238894], 'false,true': [0.039314543309005745, 0.0005854522076732735], 'false,true,true': [0.039314543309005745, nan], 'false,false,false': [nan, 0.00013003106597238894]}
{'': [0.03641616295331272, 0.03667655529219783], 'false': [0.024371271732912383, 0.06621589526469003], 'false,false': [nan, 0.06621589526469003], 'false,false,false': [nan, 0.06621589526469003], 'true': [0.00487023236655222, 0.03652723552724897], 'true,false': [3.2761765529420477e-06, 0.11242740616158305], 'true,false,false': [0.0001602058975652132, 0.20989024308654844], 'true,true': [0.003118629217731636, 0.01010692030248247]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.136
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.7914822684328456;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7285436863655427;  // std dev = 0.027, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.0802775540403401;  // std dev = 0.192, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.048633906642996313;  // std dev = 0.806, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5082438995261179;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.04992741169150827;  // std dev = 1.757, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5695398607631298;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(E, A) )
%   | | then return 0.6244111211435218;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3567346964522805;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5531255626310874;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5531255626310874;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.09254791139768644;  // std dev = 0.854, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | | else return 0.031234124262872646;  // std dev = 1.303, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2955917794949734;  // std dev = 1.019, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.18213806421529763;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.17811016592893525;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.42811016592893525;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4180273563006238;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5270182906426343;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.6873431177179748;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.715429681237868;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.15266444359140205;  // std dev = 0.073, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.10341495063896163;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14881130906602086;  // std dev = 0.022, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.12476989794606169;  // std dev = 1.280, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.3293889037139856;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32864692825426295;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3782753357981377;  // std dev = 0.087, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.31911420536092305;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5574505047259857;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10390448757267362;  // std dev = 0.675, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.02981867645326432;  // std dev = 0.582, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.012263094363530798;  // std dev = 0.956, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.31042477994246614;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2608681251042657;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.06505129958267251;  // std dev = 0.106, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else return -0.09251835563837664;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25009486868268554;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.34832658607293326;  // std dev = 0.117, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5391950354441419;  // std dev = 0.180, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11809564516530092;  // std dev = 0.148, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.17417505191894772;  // std dev = 0.314, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.24558064754315273;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.20806205566558447;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, E), follows(F, A) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(E, F), follows(E, A) )
%   | | | then return -0.04960508469947319;  // std dev = 0.565, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return -0.0821471052664162;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(E, G), follows(F, G) )
%   | | | then return -0.33592917445129344;  // std dev = 0.469, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11295474831294942;  // std dev = 0.482, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2356374643905622;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.02995421837838925;  // std dev = 0.655, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.027186739715069342;  // std dev = 0.833, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.19761450252680074;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.17420800661859226;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return -0.045818171594909585;  // std dev = 0.574, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return -0.07544439551697216;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07606735053075811;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.266446620030869;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09361191096602038;  // std dev = 0.028, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.08574260309097548;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.0012827026893188188;  // std dev = 0.849, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.17371033330355878;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.15603823660628602;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.15725021608068157;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15325132881293257;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3898061208826138;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return -0.07206961528729675;  // std dev = 0.018, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.1358848952262247;  // std dev = 0.119, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3404486289760647;  // std dev = 0.253, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08986282994080821;  // std dev = 0.020, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1438595420004645;  // std dev = 0.076, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.20831206483770548;  // std dev = 0.275, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.19506215083292563;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06451901882473415;  // std dev = 0.058, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | then return 0.17272183841870004;  // std dev = 0.086, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07693320762351541;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, J) )
%   | | then return -0.07581342562310987;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.005380080440079209;  // std dev = 0.313, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.04193114141933991;  // std dev = 0.560, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.035', 'seconds']
Refined model CLL: -0.096379


******************************************
Best model found
******************************************
Results 

CLL : -0.099804 

AUC ROC : 0.992385 

AUC PR : 0.32719 

Precision : 0.332378 

Recall : 0.920635 

F1 : 0.488421 

Total Learning Time : 4.136 

Total Inference Time : 3.3685293197631836 

Total revision time: 11.397718906402588
Best scored revision CLL: -0.096379


Results 

CLL : -0.099804 

AUC ROC : 0.992385 

AUC PR : 0.32719 

Precision : 0.332378 

Recall : 0.920635 

F1 : 0.488421 

Total Learning Time : 11.421801567077637 

Total Inference Time : 3.3685293197631836 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.531
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8295775065280829;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.3396304165809938;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6907209430698845;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07160613598288733;  // std dev = 0.207, 79.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004501480088665472;  // std dev = 1.539, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7378965687884043;  // std dev = 0.082, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16552411582097812;  // std dev = 3.447, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5775572529677139;  // std dev = 0.166, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7177543628293861;  // std dev = 0.210, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5752803570298999;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.569473053525937;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.569473053525937;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02841458653067403;  // std dev = 3.073, 126.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=15 */
%   | | | else return 0.06718057533030868;  // std dev = 2.895, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5064703561094606;  // std dev = 2.483, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11768080994719213;  // std dev = 0.054, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.1295940952980346;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17488400669658744;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3283005235713068;  // std dev = 0.393, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.3692214446885468;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3108299950328484;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5591761105555747;  // std dev = 1.030, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.10537088493431916;  // std dev = 1.246, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   | | else return 0.06673505844047567;  // std dev = 0.349, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.009533483714148389;  // std dev = 1.862, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24471182303917877;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5090873973692653;  // std dev = 0.816, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13940354808458197;  // std dev = 0.178, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.14783224387655486;  // std dev = 0.196, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24450763950751508;  // std dev = 1.579, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else return -0.08088989417796036;  // std dev = 1.207, 90.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.054998125695019336;  // std dev = 1.862, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16187013140745146;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05334538501966961;  // std dev = 0.132, 70.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.011659868296228778;  // std dev = 1.526, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | | else return 0.07934625584500833;  // std dev = 1.716, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1832599396413644;  // std dev = 0.069, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3224126783385669;  // std dev = 0.654, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08991555510053588;  // std dev = 0.102, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3792122844608376;  // std dev = 0.485, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13933385033573017;  // std dev = 0.230, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15569051182885435;  // std dev = 0.959, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.037868217292223894;  // std dev = 0.997, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.07813564358714241;  // std dev = 0.017, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10747438359996496;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.011110820405518742;  // std dev = 0.846, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.027041041467798406;  // std dev = 0.799, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.15397229099069998;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01195425436176031;  // std dev = 1.477, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.637', 'seconds']
Parameter learned model CLL:-0.114246 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.986, 1, 34], 'true,false,true': [6.83e-08, 69, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.5, 14, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.983, 1, 28], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.207, 74, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.539, 19, 3], 'false,false,false,true': [0.082, 0, 5], 'false,false,false,false': [3.447, 40, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.166, 0, 21], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.21, 0, 2], 'true,false,false': [0.109, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.073, 111, 15], 'false,false,false,false': [2.895, 35, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.483, 4, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 79, 0], 'false,true,false,false': [0.025, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.239, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.393, 0, 28], 'true,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.03, 1, 16], 'false,false,true,false': [1.246, 124, 2], 'false,false,false': [0.349, 25, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.862, 61, 25], 'false,true': [0.028, 0, 8], 'false,false,true': [0.816, 0, 29], 'false,false,false,true': [0.178, 29, 0], 'false,false,false,false': [0.196, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.579, 2, 44], 'true,false': [1.207, 87, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.862, 24, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.981, 1, 28], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.132, 65, 5], 'false,false,false,true': [1.526, 41, 16], 'false,false,false,false': [1.716, 20, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.069, 0, 28], 'false,true,true,true': [0.654, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.102, 77, 0], 'false,false,true': [0.485, 0, 21], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 33, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.959, 1, 27], 'true,true,false': [0.997, 1, 7], 'true,false,true': [0.017, 67, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.846, 11, 2], 'false,true': [0.799, 19, 13], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.477, 24, 12]}]
{'': [0.20118983234180773, 0.24237843285462468], 'false': [0.23070987654320937, 0.24965706447187883], 'false,true': [-2.7328566760003855e-16, 9.654113257610057e-18], 'true': [0.027755102040817953, 0.020823902218198197], 'true,false': [6.75787928032704e-17, 0.07360000000000004], 'false,true,true': [-1.6148698540002277e-16, 0.0]}
{'': [0.03329369797859633, 0.1320761499200446], 'false': [0.0428990484738655, 0.1877257176875471], 'false,false': [0.10760677998039064, 0.20304851180357683], 'false,false,false': [0.0013576507931090554, 0.19476159315829364], 'false,false,true': [nan, 0.10760677998039064], 'false,true': [nan, 0.0428990484738655]}
{'': [0.0042910278382062295, 0.11296281387911575], 'false': [nan, 0.11296281387911476], 'false,false': [6.344131569286608e-17, 0.10481344700028175], 'false,false,false': [0.07492305500889304, 0.17828939740351482], 'true': [0.0013070856122882005, 0.012135207981777172], 'true,false': [0.021987346688745135, 0.0023946832622606883], 'true,true': [0.0013070856122882005, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.09340941630762595, 0.001116044740363975], 'false': [5.428062468019067e-05, 0.0017378072457884218], 'false,false': [nan, 0.0017378072457884218], 'false,false,false': [nan, 0.0017378072457884218], 'false,true': [nan, 5.428062468019067e-05], 'false,true,false': [3.651808236479306e-05, 5.726816225626067e-05]}
{'': [0.02151745876824721, 0.0776935211063611], 'false': [-1.586032892321652e-17, 0.07688716823071867], 'false,false': [0.0645385298305765, 0.12182086356376472], 'false,false,true': [0.06242145218588286, 0.012323565495826814], 'true': [0.005508805086641723, 0.0], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.04031809356875252, 0.0958421695482246], 'false': [9.610812535624375e-05, 0.10190122802122713], 'false,false': [0.022951297706579606, 0.0011837268057692252], 'true': [nan, 0.04031809356875265], 'true,false': [nan, 0.04031809356875252], 'false,false,false': [0.0010925413828147823, 0.0012346918903795739]}
{'': [0.052752214587716846, 0.08889175473128438], 'false': [nan, 0.08889175473128443], 'false,false': [nan, 0.08889175473128438], 'false,false,false': [nan, 0.08889175473128438], 'true': [0.05422828273625178, 0.016184224412749682]}
{'': [0.033167974204158124, 0.04313093479630194], 'false': [nan, 0.04313093479630194], 'false,false': [0.01734615274204437, 0.059655893529471274], 'false,false,false': [0.04087503494984554, 0.08919397521120265], 'true': [0.033167974204158124, nan]}
{'': [0.0047238497830741, 0.04415548046133788], 'false': [0.02587802539172111, 0.06924941514596945], 'false,false': [0.011220284120450105, 0.0016086741255453016], 'false,true': [0.032898864359016164, 0.00013502852955117373], 'false,true,true': [0.032898864359016164, nan], 'false,false,false': [nan, 0.0016086741255453016]}
{'': [0.030908565318618266, 0.041181563494711915], 'false': [0.019926778435029758, 0.05950540070068333], 'false,false': [0.0, 0.06061321707284514], 'false,false,false': [nan, 0.06061321707284511], 'true': [0.05558180432646894, 0.009378432136533513], 'true,true': [0.03284440302681911, 0.12436552536089492], 'true,false': [4.4470257422345065e-06, 0.03902598665657438], 'true,false,false': [-1.982541115402065e-18, 0.05511812175849509]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.961
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.024204006076958388;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7249799725553687;  // std dev = 0.071, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.048633906642996313;  // std dev = 0.243, 55.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=5 */
%   | | else return -0.1254446385283914;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.11106981018562756;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.081703283012684;  // std dev = 0.829, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.11728085199980512;  // std dev = 3.406, 74.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5198144167387035;  // std dev = 0.190, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.6027342878490882;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.7006243137633226;  // std dev = 0.207, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5609674115096539;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10624865668297045;  // std dev = 0.844, 53.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=1 */
%   | | | else return -0.02478525661520077;  // std dev = 1.854, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10326935343705218;  // std dev = 2.108, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.44479939842823857;  // std dev = 1.795, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.44114356146393585;  // std dev = 0.185, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.35277559925529395;  // std dev = 1.022, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.07213113916748252;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.31035663565879273;  // std dev = 0.945, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5585110961483785;  // std dev = 0.983, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.6599807620625422;  // std dev = 0.202, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(I, A) )
%   | then return -0.11456042962783064;  // std dev = 0.009, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( tweets(A, J) )
%   | | then return -0.1517036806161283;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.2329540863193831;  // std dev = 0.224, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3315867173387258;  // std dev = 0.059, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.4152240900460075;  // std dev = 0.116, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.34096448731941426;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0856639767013003;  // std dev = 0.780, 57.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=1 */
%   | | | else return -0.016795997440654083;  // std dev = 1.588, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06315787936478534;  // std dev = 1.832, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | | else return 0.1501901261430172;  // std dev = 1.593, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2680116510403473;  // std dev = 0.032, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6384611973843166;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0938083467868239;  // std dev = 0.040, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.09018315612903387;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2719587833471047;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3107890624856589;  // std dev = 0.278, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.49641689118703847;  // std dev = 0.370, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.15118143897413722;  // std dev = 0.106, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.13567407809793433;  // std dev = 0.259, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.2128606710673419;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(D, A) )
%   | | then return 0.3547871700932285;  // std dev = 0.174, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20555348622286446;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.4836827127900863;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33335981755843364;  // std dev = 0.206, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.10436257692504144;  // std dev = 0.027, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.2257393371513617;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 6.175384326845026E-4;  // std dev = 1.076, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.12433577919846275;  // std dev = 1.008, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.18147453649594916;  // std dev = 0.020, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.23318399224658454;  // std dev = 1.062, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( tweets(E, G), tweets(F, G) )
%   | | then if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.32074484952508503;  // std dev = 0.222, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0864974970118943;  // std dev = 0.336, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return 0.08520743900417013;  // std dev = 0.673, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2838631426991693;  // std dev = 0.334, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11140168593621153;  // std dev = 0.090, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.016068753868630676;  // std dev = 0.645, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return -0.05216864034149475;  // std dev = 1.341, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15214966064669908;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.04190025400006873;  // std dev = 0.947, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.16613346077882182;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.20487856596750978;  // std dev = 0.106, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15002354275595567;  // std dev = 0.089, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.37779729823391944;  // std dev = 0.329, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07796913829850578;  // std dev = 0.106, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.28673234240778883;  // std dev = 0.060, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.1364862706140141;  // std dev = 0.048, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.13497842866536122;  // std dev = 0.083, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.01373031792475172;  // std dev = 0.940, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2398891280179537;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.05759357001750968;  // std dev = 0.087, 82.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return -0.009190953906693207;  // std dev = 0.122, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | else return 0.030598531470102032;  // std dev = 0.381, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1514800498619132;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.03510311723827426;  // std dev = 0.589, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return 0.13804890312723234;  // std dev = 0.784, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '28.172', 'seconds']
Refined model CLL: -0.112092


******************************************
Best model found
******************************************
Results 

CLL : -0.105187 

AUC ROC : 0.993723 

AUC PR : 0.41679 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 7.961 

Total Inference Time : 13.58777904510498 

Total revision time: 27.418271677017213
Best scored revision CLL: -0.112092


Results 

CLL : -0.105187 

AUC ROC : 0.993723 

AUC PR : 0.41679 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 27.44235433769226 

Total Inference Time : 13.58777904510498 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.94
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8248156017661792;  // std dev = 1.390, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.2528857772047755;  // std dev = 0.489, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.729006147862989;  // std dev = 0.136, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06008843940591615;  // std dev = 0.230, 115.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02105985594135071;  // std dev = 1.759, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7369772676889298;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.10591964490125151;  // std dev = 4.023, 95.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5296942743466757;  // std dev = 1.444, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5112916212151513;  // std dev = 0.777, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5745564876232815;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5612356156155673;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5612356156155673;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0341562865876697;  // std dev = 3.387, 166.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=18 */
%   | | | else return 0.12458932981123147;  // std dev = 3.226, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4961644545684838;  // std dev = 2.965, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11956354531231454;  // std dev = 0.065, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.13787283135518374;  // std dev = 0.040, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16902296011317575;  // std dev = 0.320, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30133995355659776;  // std dev = 1.400, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else return 0.5263228512513654;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30763019443337836;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6379898944815692;  // std dev = 0.200, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10317030913778621;  // std dev = 1.445, 151.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=3 */
%   | | else return 0.05287371437452062;  // std dev = 0.332, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024257948277000885;  // std dev = 2.353, 135.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=44 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25858230155686157;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5184469261024669;  // std dev = 0.906, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12782692564312384;  // std dev = 0.185, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.14235260665501245;  // std dev = 0.193, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27719551950632626;  // std dev = 1.263, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return -0.08626349931473043;  // std dev = 1.417, 174.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08401460728109479;  // std dev = 1.831, 47.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15710297981270796;  // std dev = 1.337, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return -0.16351176277974683;  // std dev = 0.624, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05847493878468531;  // std dev = 0.140, 112.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.004615461608868467;  // std dev = 1.749, 80.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=20 */
%   | | | else return 0.04046223007122375;  // std dev = 2.021, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15708440819698738;  // std dev = 0.210, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2898848694200099;  // std dev = 0.717, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09314158059345076;  // std dev = 0.147, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38621661765203186;  // std dev = 0.588, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12831682275280282;  // std dev = 0.266, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18983875283843735;  // std dev = 0.511, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.11068424206226772;  // std dev = 0.808, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.08009507403471884;  // std dev = 0.041, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10908002453611479;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.04003524573715375;  // std dev = 0.925, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.00817302670537216;  // std dev = 1.353, 46.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17434901497674593;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03719803573424405;  // std dev = 1.536, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.894', 'seconds']
Parameter learned model CLL:-0.113682 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.39, 2, 58], 'true,false,true': [8.94e-08, 99, 0], 'true,false,false': [0.3, 27, 3], 'false,true,true,true': [0.0, 0, 14], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.79e-08, 30, 0], 'false,false': [0.489, 23, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.136, 0, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.23, 106, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.759, 27, 4], 'false,false,false,true': [0.096, 0, 6], 'false,false,false,false': [4.023, 69, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.444, 2, 39], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.777, 1, 3], 'true,false,false': [0.129, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.387, 148, 18], 'false,false,false,false': [3.226, 38, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.965, 6, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.065, 95, 0], 'false,true,false,false': [0.04, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.32, 68, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.4, 2, 47], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.2, 0, 20], 'false,false,true,false': [1.445, 148, 3], 'false,false,false': [0.332, 36, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.353, 91, 44], 'false,true': [0.144, 0, 13], 'false,false,true': [0.906, 0, 36], 'false,false,false,true': [0.185, 40, 0], 'false,false,false,false': [0.193, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.263, 1, 69], 'true,false': [1.417, 169, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.831, 28, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.337, 2, 47], 'true,false,true': [0.624, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 103, 9], 'false,false,false,true': [1.749, 60, 20], 'false,false,false,false': [2.021, 31, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.21, 2, 48], 'false,true,true,true': [0.717, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.147, 120, 0], 'false,false,true': [0.588, 0, 26], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.266, 54, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.511, 0, 46], 'true,true,false': [0.808, 1, 12], 'true,false,true': [0.041, 89, 0], 'true,false,false,true': [0.018, 18, 0], 'true,false,false,false': [0.925, 10, 3], 'false,true': [1.353, 29, 17], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.536, 24, 14]}]
{'': [0.21858290641359449, 0.2347404844290672], 'false': [0.23087369850611084, 0.2389196675900272], 'false,true': [-2.0898315757650005e-16, 2.590520390792032e-17], 'true': [0.03222222222222181, 0.022714981070849016], 'true,false': [8.074349270001139e-17, 0.08999999999999984], 'false,true,true': [-2.5376526277146434e-16, 1.4802973661668753e-16]}
{'': [0.0003829630580357198, 0.1210726222590428], 'false': [0.052676130975756706, 0.1680045907316373], 'false,false': [0.09976626147086674, 0.18259643635765846], 'false,false,false': [0.0015319247829693368, 0.17037464081263964], 'false,false,true': [nan, 0.09976626147086674], 'false,true': [nan, 0.052676130975756706]}
{'': [0.05326586695485735, 0.11319570853809681], 'false': [nan, 0.11319570853809605], 'false,false': [0.0, 0.10411210905010106], 'false,false,false': [0.06911427038437552, 0.19268338326606468], 'true': [0.05083181037205247, 0.06293804109576304], 'true,false': [0.1507959646043025, 0.002765114761414648], 'true,true': [0.05083181037205247, nan], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.088775520957073, 0.001085229951296409], 'false': [0.00010452637260402855, 0.0015034394455784943], 'false,false': [nan, 0.0015034394455784943], 'false,false,false': [nan, 0.0015034394455784943], 'false,true': [nan, 0.00010452637260402855], 'false,true,false': [4.4582083706349484e-05, 6.0356509616832366e-05]}
{'': [0.04016577483502189, 0.07948023894320025], 'false': [-2.0185873175002847e-17, 0.07889948662625672], 'false,false': [0.06917412533727291, 0.11050978141252217], 'false,false,true': [0.0020067178393120776, 0.013822699072108416], 'true': [0.03997313844042989, 0.0], 'false,true': [-2.0185873175002847e-17, nan]}
{'': [0.04100051059813041, 0.09291899977084789], 'false': [0.0015882600183919626, 0.09961452745729867], 'false,false': [0.022787043431173732, 0.0009580693724129818], 'true': [nan, 0.0410005105981304], 'true,false': [nan, 0.04100051059813041], 'false,false,false': [0.000856330817218387, 0.0009555834901002843]}
{'': [0.04179852884113798, 0.0712962103380158], 'false': [nan, 0.07129621033801592], 'false,false': [nan, 0.0712962103380158], 'false,false,false': [nan, 0.0712962103380158], 'true': [0.022806087839470583, 0.011540919774218937]}
{'': [0.046558715866508095, 0.04072571910451008], 'true': [0.036488185272462656, 0.1945240321811378], 'true,false': [0.1945240321811378, nan], 'false': [nan, 0.04072571910451025], 'false,false': [0.019681914217877673, 0.056551835403457644], 'false,false,false': [0.03824024972837169, 0.0869110488422756]}
{'': [0.044057322235530154, 0.03802549705613825], 'false': [0.021169877660287495, 0.0632812540198174], 'false,false': [0.013288631425765605, 0.0013097610887246652], 'false,true': [0.027085045760395755, 0.00017952544404103803], 'false,true,true': [0.027085045760395755, nan], 'false,false,false': [nan, 0.0013097610887246652]}
{'': [0.02447482705340626, 0.04976230751892306], 'false': [0.03979923335201915, 0.06094054029180791], 'false,false': [0.0, 0.06206192099984286], 'false,false,false': [nan, 0.06206192099984284], 'true': [0.016580646152119724, 0.008760411881746285], 'true,true': [0.005683372380833829, 0.05025531361325878], 'true,false': [1.9201589526169355e-05, 0.033021459174081086], 'true,false,false': [1.7384500202723295e-05, 0.065808552305881]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.28
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.8025933795439559;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.11995325468150969;  // std dev = 0.146, 137.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7307386205394119;  // std dev = 0.150, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7305483838299365;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.08517162240789397;  // std dev = 1.707, 82.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=4 */
%   | | | else return -0.07802323845329967;  // std dev = 0.822, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.3721332208801844;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05725509650891806;  // std dev = 1.147, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.10104233279141371;  // std dev = 3.835, 95.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.572758813343047;  // std dev = 0.327, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5759142278482937;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.552582960852717;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10985591478052802;  // std dev = 0.882, 81.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=1 */
%   | | | else return -0.026196877199919075;  // std dev = 2.213, 61.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.0849982365999425;  // std dev = 2.952, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | | | else return 0.21782776743754972;  // std dev = 2.163, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( follows(A, D), follows(D, E) )
%   | | | then return 0.38725746647445214;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.09073587929386188;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.4574048872326911;  // std dev = 0.207, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41439772959799076;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.4187028346692588;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5175690478225424;  // std dev = 0.255, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.765783367506147;  // std dev = 0.081, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6941336475506392;  // std dev = 0.175, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.1303912514438968;  // std dev = 0.032, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.3324957554206624;  // std dev = 0.017, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.18863879928586894;  // std dev = 0.709, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16782120695450095;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.5396791210844418;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32215066519274216;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5372197678877473;  // std dev = 0.174, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.0985543545495863;  // std dev = 1.204, 145.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=3 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.05677438610947028;  // std dev = 0.642, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.16707135265076842;  // std dev = 1.752, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2632806208396013;  // std dev = 0.015, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( tweets(A, E) )
%   | | then return -0.06611118366008983;  // std dev = 0.115, 94.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=4 */
%   | | else return -0.05933135715124296;  // std dev = 0.124, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.29424225739613163;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14276999124055073;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.35764173349140493;  // std dev = 0.978, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.5285568634739632;  // std dev = 0.183, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1215756065399697;  // std dev = 0.050, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.14679402435096348;  // std dev = 0.429, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2140326754408293;  // std dev = 0.010, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.04964168901035071;  // std dev = 1.301, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(E, G), follows(A, G) )
%   | | then return -0.06505049370482648;  // std dev = 0.115, 103.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=5 */
%   | | else if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.23061411426407127;  // std dev = 1.144, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.09028511986566116;  // std dev = 0.095, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3188426290597748;  // std dev = 0.139, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11505441786774338;  // std dev = 0.086, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.054617270269366164;  // std dev = 0.990, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.13399856934104856;  // std dev = 1.089, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19284822861805884;  // std dev = 0.052, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.4322584402269883;  // std dev = 0.280, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08175790369257806;  // std dev = 0.088, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3751758232736588;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.04396754925585986;  // std dev = 0.698, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.18863581426413414;  // std dev = 1.052, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.09749911749501998;  // std dev = 0.145, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.0861709135045059;  // std dev = 0.372, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.0021216784014758123;  // std dev = 1.634, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.1558271699868977;  // std dev = 0.016, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return 0.20500657320727372;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16349475179916126;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3993588537500116;  // std dev = 0.222, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07742884659765804;  // std dev = 0.010, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.22046036884256884;  // std dev = 0.116, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3484553313992856;  // std dev = 0.217, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.10064938343551752;  // std dev = 0.085, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.19872189715432245;  // std dev = 0.254, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.10332256536322271;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.1452174749069567;  // std dev = 0.082, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.22929091420476053;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.05925259021277921;  // std dev = 0.075, 112.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13117997438232712;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.019526274265532002;  // std dev = 0.133, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.12938195746962722;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.023646299750486648;  // std dev = 0.681, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return -0.025946458065453128;  // std dev = 1.134, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.284', 'seconds']
Refined model CLL: -0.107484


******************************************
Best model found
******************************************
Results 

CLL : -0.102017 

AUC ROC : 0.991571 

AUC PR : 0.292394 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 10.28 

Total Inference Time : 10.96837067604065 

Total revision time: 30.431415529251097
Best scored revision CLL: -0.107484


Results 

CLL : -0.102017 

AUC ROC : 0.991571 

AUC PR : 0.292394 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 30.455498189926146 

Total Inference Time : 10.96837067604065 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.334
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8211118980624753;  // std dev = 1.700, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.0585177315671544;  // std dev = 0.276, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.1739384087837229;  // std dev = 0.465, 57.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7157563526276582;  // std dev = 1.015, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04535973624646697;  // std dev = 0.249, 149.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04405818661920704;  // std dev = 1.774, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6235124095828778;  // std dev = 0.849, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14482903114450935;  // std dev = 4.528, 111.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5437449709652392;  // std dev = 1.456, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7312583501480345;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6007250545049759;  // std dev = 0.141, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5975360357109322;  // std dev = 0.176, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5654059887162316;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01820055399522799;  // std dev = 4.150, 213.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=28 */
%   | | | else return 0.07234364096757658;  // std dev = 3.674, 80.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5545432964995358;  // std dev = 2.073, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12085247230525101;  // std dev = 0.053, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | | else return -0.1306909385867063;  // std dev = 0.021, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1648910168169662;  // std dev = 0.231, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26380041059898574;  // std dev = 1.980, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | else return 0.4643007810362352;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.295778807148456;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1021623946489097;  // std dev = 0.848, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5554844712235;  // std dev = 1.480, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return -0.10536887791100598;  // std dev = 1.582, 225.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=4 */
%   | | else return 0.02772492680406731;  // std dev = 0.320, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.010491096819696016;  // std dev = 2.864, 209.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=61 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2605456911468676;  // std dev = 0.294, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4461611401047653;  // std dev = 2.189, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12458052321549773;  // std dev = 0.194, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.13651056462705216;  // std dev = 0.205, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2956738581920432;  // std dev = 1.251, 96.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=95 */
%   | else return -0.09121564299720494;  // std dev = 1.697, 208.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03471229839779869;  // std dev = 2.287, 68.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1614507647479352;  // std dev = 1.389, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( follows(A, E) )
%   | | then return 0.31210318427425693;  // std dev = 0.105, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04483943698021189;  // std dev = 0.141, 143.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0066494600382841496;  // std dev = 2.009, 106.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=27 */
%   | | | else return 0.027297159924117978;  // std dev = 2.322, 71.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18966642878296888;  // std dev = 0.066, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29169101913524775;  // std dev = 0.829, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09158755387038972;  // std dev = 0.117, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3478041907710039;  // std dev = 1.554, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12051436809953087;  // std dev = 0.238, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16011719105846278;  // std dev = 1.341, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | else return 0.11662233114486044;  // std dev = 0.833, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.08028473732899556;  // std dev = 0.021, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09808083188123712;  // std dev = 0.028, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.010365400710057754;  // std dev = 0.949, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.029769184402220608;  // std dev = 1.280, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20176197530853135;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.046287619841701315;  // std dev = 1.813, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.878', 'seconds']
Parameter learned model CLL:-0.111461 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.7, 3, 78], 'true,false,true': [0.0, 127, 0], 'true,false,false': [0.276, 44, 4], 'false,true,true,true': [0.0, 0, 20], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.465, 39, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.015, 1, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.249, 135, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.774, 37, 4], 'false,false,false,true': [0.849, 1, 7], 'false,false,false,false': [4.528, 76, 35]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.456, 2, 51], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.218, 0, 3], 'true,false,false': [0.141, 0, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.176, 0, 6], 'false,false,true,false': [0.0, 0, 10], 'false,false,false,true': [4.15, 185, 28], 'false,false,false,false': [3.674, 61, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.073, 1, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.053, 138, 0], 'false,true,false,false': [0.021, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.231, 68, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.98, 4, 60], 'true,false': [0.0, 0, 1], 'false,true,true': [0.012, 0, 15], 'false,true,false': [0.848, 1, 1], 'false,false,true,true': [1.48, 2, 30], 'false,false,true,false': [1.582, 221, 4], 'false,false,false': [0.32, 49, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.864, 148, 61], 'false,true': [0.294, 0, 17], 'false,false,true': [2.189, 3, 46], 'false,false,false,true': [0.194, 78, 0], 'false,false,false,false': [0.205, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.251, 1, 95], 'true,false': [1.697, 202, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.287, 45, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.389, 2, 62], 'true,false,true': [0.105, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 129, 14], 'false,false,false,true': [2.009, 79, 27], 'false,false,false,false': [2.322, 52, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.066, 0, 61], 'false,true,true,true': [0.829, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.117, 170, 0], 'false,false,true': [1.554, 2, 35], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 80, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.341, 2, 64], 'true,true,false': [0.833, 1, 14], 'true,false,true': [0.021, 113, 0], 'true,false,false,true': [0.028, 26, 0], 'true,false,false,false': [0.949, 15, 4], 'false,true': [1.28, 40, 24], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.813, 35, 17]}]
{'': [0.21771240234375056, 0.2266238644901316], 'false': [0.23437500000000117, 0.2160664819944593], 'false,true': [4.440892098500626e-16, 4.163336342344337e-17], 'true': [0.03566529492455353, 0.022334693877550924], 'true,false': [-2.4477358023231797e-17, 0.07638888888888874], 'false,true,true': [-8.881784197001253e-17, 0.0]}
{'': [0.015848691939897627, 0.1259072203371182], 'false': [0.06184534731594399, 0.17232201234348407], 'false,false': [0.07675878621752076, 0.1927239920457982], 'false,false,false': [0.0901255420761573, 0.18471425463787636], 'false,false,true': [nan, 0.07675878621752076], 'false,true': [nan, 0.06184534731594399]}
{'': [0.03652926948936577, 0.11707383481374059], 'false': [nan, 0.11707383481373992], 'false,false': [0.002177592018500263, 0.10646959170500445], 'false,false,false': [0.0808405347041333, 0.16874713510145586], 'true': [0.040005691502535565, 0.010328448455884588], 'true,true': [0.040005691502535565, nan], 'true,false': [0.01584403965833984, 0.0028529412734009186], 'false,false,true': [0.005161699599408302, -1.3322676295501878e-16]}
{'': [0.03437966809408414, 0.0006269832009024714], 'false': [3.287781052452039e-05, 0.00078426796727791], 'false,false': [nan, 0.00078426796727791], 'false,false,false': [nan, 0.00078426796727791], 'false,true': [nan, 3.287781052452039e-05], 'false,true,false': [2.053052234609802e-05, 1.6963613409562643e-05]}
{'': [0.060895598405116214, 0.07595484196318815], 'false': [0.058776564092402, 0.07339270920775512], 'false,false': [0.06587149977174206, 0.10248956086091668], 'false,false,true': [0.06845247076303734, 0.011125950637614467], 'true': [0.06122862446026578, 0.0], 'false,true': [9.909039182002624e-06, 0.3597995357374946]}
{'': [0.03925221492786245, 0.0866751952139773], 'false': [0.0050826795877364165, 0.0891703181318053], 'false,false': [0.09775608383887768, 0.0006019040515454813], 'true': [nan, 0.03925221492786245], 'true,false': [nan, 0.03925221492786245], 'false,false,false': [0.00048462699527017903, 0.0006683707464554303]}
{'': [0.046957030006420264, 0.0768957249062947], 'false': [nan, 0.0768957249062948], 'false,false': [nan, 0.0768957249062947], 'false,false,false': [nan, 0.0768957249062947], 'true': [0.01629754586407961, 0.013839091844681394]}
{'': [0.030079849009229307, 0.03934437898167079], 'false': [nan, 0.03934437898167069], 'false,false': [0.02000287988126757, 0.05337405212326429], 'false,false,false': [0.03807033550868661, 0.07596653961257076], 'true': [0.030160576384810026, 0.005488183648455006], 'true,false': [0.005488183648455006, nan]}
{'': [0.0044004122894256556, 0.039883651436423896], 'false': [0.0213763810230692, 0.06855014590009913], 'false,false': [0.06527539619626481, 0.0007063921205560542], 'false,true': [0.024542961153334448, 8.074075621470138e-05], 'false,true,true': [0.024542961153334448, nan], 'false,false,false': [nan, 0.0007063921205560542]}
{'': [0.026222582833781267, 0.04240407858746485], 'false': [0.025618215320264672, 0.0624668248417599], 'false,false': [0.0, 0.06321202927057203], 'false,false,false': [nan, 0.06321202927057207], 'true': [0.03106286036004549, 0.006678960463239544], 'true,true': [0.027251341164229052, 0.046292075841790244], 'true,false': [4.054809310857899e-06, 0.022879989112000138], 'true,false,false': [3.118894450078137e-05, 0.04735176341203656]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.739
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8331489350995124;  // std dev = 0.156, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.06492798797741088;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.11e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.20814893509951235;  // std dev = 0.477, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7244914035015022;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else return -0.12544463852839122;  // std dev = 6.32e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.7408304540395001;  // std dev = 0.144, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7283005725730874;  // std dev = 0.055, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.06877688203571981;  // std dev = 1.524, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | | | else return 0.16329756260466047;  // std dev = 4.223, 103.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5633961728155659;  // std dev = 0.207, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5718555036093341;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5593564100289754;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5348169754982661;  // std dev = 1.074, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11697551556254744;  // std dev = 0.150, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.08184091975168989;  // std dev = 3.467, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return 0.32133410729483736;  // std dev = 2.131, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.42242677370771203;  // std dev = 0.013, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(D, E), follows(E, A) )
%   | | | then return -0.2427538939298309;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.4865521037834448;  // std dev = 0.452, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.41038463126153374;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.655213134746864;  // std dev = 0.097, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.7021092688225856;  // std dev = 0.171, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(H, A) )
%   | then return -0.1061130286582838;  // std dev = 0.012, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( follows(A, I) )
%   | | then return -0.15489510857532823;  // std dev = 5.16e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.22459097755884136;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3266415069870495;  // std dev = 0.156, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2972228919008547;  // std dev = 0.611, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.19088232372299963;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.3890115544048589;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32572831971733573;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0927107746882735;  // std dev = 0.718, 112.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=1 */
%   | | | else return -0.01584117396534871;  // std dev = 1.522, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04826363924273405;  // std dev = 2.271, 61.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=18 */
%   | | | else return 0.0917117132605424;  // std dev = 2.332, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.2080082490724237;  // std dev = 1.282, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.3197455321503035;  // std dev = 0.244, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.08641554638370401;  // std dev = 0.029, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.2582003867090466;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08932970765375284;  // std dev = 0.108, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2614142043997964;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.43582390752155237;  // std dev = 0.490, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.5295938556833577;  // std dev = 0.300, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13990549694859614;  // std dev = 0.035, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.17241705144689762;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.22124134679082047;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.004067340500002259;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21315754304440387;  // std dev = 0.012, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.049433063031687284;  // std dev = 0.119, 195.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=18 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.33597493130336276;  // std dev = 0.425, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.11282198454162781;  // std dev = 1.078, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.05947680382462241;  // std dev = 0.686, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.1225761750680779;  // std dev = 1.211, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.1852917183393516;  // std dev = 0.009, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.1327905868778481;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.019275253581976667;  // std dev = 1.201, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3348271968794965;  // std dev = 0.361, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07907202718787561;  // std dev = 0.080, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.23915414111414612;  // std dev = 1.029, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return -0.11947239544331491;  // std dev = 0.088, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.015051684723542116;  // std dev = 1.039, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0.12271026048975363;  // std dev = 1.198, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.17332775329559644;  // std dev = 0.037, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return -0.129894438620125;  // std dev = 0.432, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.22180199230123868;  // std dev = 0.380, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.12662164891450076;  // std dev = 0.680, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.07384051930211444;  // std dev = 0.118, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2769947743410799;  // std dev = 0.061, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.18318058102958598;  // std dev = 1.417, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( follows(A, L) )
%   | | | then return -0.10948065378190862;  // std dev = 0.075, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.22069220018549338;  // std dev = 0.162, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.11520212939544022;  // std dev = 0.165, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else return 0.16512035202136077;  // std dev = 0.053, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.061621284627758094;  // std dev = 0.057, 179.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13649625476057514;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.006577207552083612;  // std dev = 0.904, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return 0.018892889784067172;  // std dev = 0.703, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.16512233222136286;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0019076613660469097;  // std dev = 0.938, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0.051296989037986775;  // std dev = 1.061, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.120', 'seconds']
Refined model CLL: -0.10503


******************************************
Best model found
******************************************
Results 

CLL : -0.098985 

AUC ROC : 0.993853 

AUC PR : 0.412891 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 8.739 

Total Inference Time : 15.381305932998657 

Total revision time: 34.46006183433533
Best scored revision CLL: -0.10503


Results 

CLL : -0.098985 

AUC ROC : 0.993853 

AUC PR : 0.412891 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 34.484144495010376 

Total Inference Time : 15.381305932998657 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.799
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.0740544547309962;  // std dev = 0.251, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.1386367399775605;  // std dev = 0.449, 82.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7131482230616664;  // std dev = 1.018, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03788021755814377;  // std dev = 0.259, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07512125756933473;  // std dev = 1.801, 64.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7626187221557948;  // std dev = 0.127, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11694077179206189;  // std dev = 5.013, 145.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5425855873760979;  // std dev = 1.458, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return -0.27105923603738513;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7320435552925783;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5032240600978085;  // std dev = 0.859, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5929800481478739;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5592765892052771;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.00785949517437291;  // std dev = 4.597, 243.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=34 */
%   | | | else return 0.03747475285085952;  // std dev = 4.172, 118.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5319664664063064;  // std dev = 2.962, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12194701072847233;  // std dev = 0.058, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | | else return -0.1262183698375474;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15714148021169538;  // std dev = 0.220, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3102535020504578;  // std dev = 1.157, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4742468622797017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2970471597293401;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5089889606633029;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.616518079955931;  // std dev = 1.074, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10436826333401943;  // std dev = 1.824, 290.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=5 */
%   | | else return 0.013988156896716624;  // std dev = 0.301, 74.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.032195377861193836;  // std dev = 3.133, 232.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24983040001015053;  // std dev = 0.184, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5356021087032526;  // std dev = 1.057, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12032366333063121;  // std dev = 0.169, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return -0.12586871099807445;  // std dev = 0.167, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27209822192516125;  // std dev = 1.915, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.09006534508294216;  // std dev = 1.805, 255.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04980156287917008;  // std dev = 2.271, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16458219787195813;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2599044402147451;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05220864253849968;  // std dev = 0.149, 191.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007981323483328176;  // std dev = 2.173, 120.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=28 */
%   | | | else return 0.06362509804096822;  // std dev = 2.450, 73.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.08760024404993123;  // std dev = 0.294, 86.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26101846139989027;  // std dev = 1.201, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09190103954277522;  // std dev = 0.091, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3994018026872323;  // std dev = 0.783, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12078834167729849;  // std dev = 0.250, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1824591472294047;  // std dev = 1.118, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16023145371889505;  // std dev = 0.359, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0825624420412895;  // std dev = 0.016, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0948785238742407;  // std dev = 0.037, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.012531394746418055;  // std dev = 0.961, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.030175999258941134;  // std dev = 1.269, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1969250000537034;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05714762998304853;  // std dev = 1.885, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.277', 'seconds']
Parameter learned model CLL:-0.11137 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 160, 0], 'true,false,false': [0.251, 55, 4], 'false,true,true,true': [1.351, 2, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.05e-08, 48, 0], 'false,false': [0.449, 59, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.018, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 163, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.801, 60, 4], 'false,false,false,true': [0.127, 0, 8], 'false,false,false,false': [5.013, 105, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.458, 2, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.859, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.597, 209, 34], 'false,false,false,false': [4.172, 95, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.962, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.058, 183, 0], 'false,true,false,false': [0.008, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.22, 104, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.157, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.074, 1, 39], 'false,false,true,false': [1.824, 285, 5], 'false,false,false': [0.301, 61, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.133, 150, 82], 'false,true': [0.184, 0, 22], 'false,false,true': [1.057, 0, 52], 'false,false,false,true': [0.169, 94, 0], 'false,false,false,false': [0.167, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.915, 3, 121], 'true,false': [1.805, 248, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.271, 49, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 172, 19], 'false,false,false,true': [2.173, 92, 28], 'false,false,false,false': [2.45, 49, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.294, 8, 78], 'false,true,true,true': [1.201, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.091, 198, 0], 'false,false,true': [0.783, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.25, 81, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.118, 1, 85], 'true,true,false': [0.359, 0, 19], 'true,false,true': [0.016, 159, 0], 'true,false,false,true': [0.037, 32, 0], 'true,false,false,false': [0.961, 22, 4], 'false,true': [1.269, 40, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.885, 37, 21]}]
{'': [0.2222222222222245, 0.21226013225688753], 'true': [0.009433106575965852, 0.017931235795750608], 'false': [0.22222222222222338, 0.20181439619274338], 'false,true': [0.06858710562414343, 5.3198186596622086e-17], 'false,true,true': [0.07939508506616269, 0.0], 'true,false': [-1.4432899320127036e-16, 0.06320022981901739]}
{'': [0.012052522955295563, 0.11923611368390248], 'false': [0.06732675556060269, 0.15598605394501486], 'false,false': [0.050707507097043227, 0.184983840180185], 'false,false,false': [0.002017727310202888, 0.17327982864415628], 'false,true': [nan, 0.06732675556060269], 'false,false,true': [nan, 0.050707507097043227]}
{'': [0.045038779073579324, 0.11782840696533069], 'false': [nan, 0.11782840696532959], 'false,false': [0.0018545683995023765, 0.10721491518617575], 'false,false,false': [0.08697929795157656, 0.1475031544615565], 'true': [0.039675249752763465, 0.07558480609545244], 'true,false': [0.01708487243678447, 0.0819951936363777], 'true,true': [0.030792854819974992, 0.0], 'false,false,true': [0.005679615723476639, -5.921189464667501e-17]}
{'': [0.054821971961929214, 0.0004302382233387411], 'false': [1.8265463739206902e-05, 0.0004663982043225806], 'false,false': [nan, 0.0004663982043225806], 'false,false,false': [nan, 0.0004663982043225806], 'false,true': [nan, 1.8265463739208996e-05], 'false,true,false': [1.8330854550670276e-05, 2.104027618827622e-06]}
{'': [0.017277369697133123, 0.07434890528079108], 'false': [0.002045940930115802, 0.07309623932410064], 'false,false': [0.06893237413711889, 0.09088105402162222], 'false,false,true': [0.028863734849662048, 0.011467916950783287], 'true': [0.017158446307735158, 0.0], 'false,true': [9.22240599627866e-06, 0.0]}
{'': [0.04230702037443777, 0.0824364138876911], 'false': [0.0015461379922739478, 0.08686076231348777], 'false,false': [0.021484092007861697, 0.00036935202456088976], 'true': [nan, 0.042307020374437496], 'true,false': [nan, 0.04230702037443777], 'false,false,false': [0.00030369457135608627, 0.00045036982348711785]}
{'': [0.047148720350736424, 0.0669975484238874], 'false': [nan, 0.06699754842388736], 'false,false': [nan, 0.0669975484238874], 'false,false,false': [nan, 0.0669975484238874], 'true': [0.029585283150777793, 0.012776064225680816]}
{'': [0.02265370366118283, 0.04089656219181009], 'false': [nan, 0.04089656219181008], 'false,false': [0.022287877900873786, 0.05678298037602859], 'false,false,false': [0.03935714734340032, 0.08224011514136875], 'true': [0.022975484001666963, 0.00010059045213868523], 'true,false': [0.00010059045213868523, nan]}
{'': [0.08618977207566354, 0.039132174861243825], 'false': [0.02324414183688003, 0.06546856498317069], 'false,false': [0.015340459442960253, 0.000769371352121468], 'false,true': [0.03698454690277504, 4.1771023758379314e-05], 'false,true,true': [0.03698454690277504, nan], 'false,false,false': [nan, 0.000769371352121468]}
{'': [0.02178698227247312, 0.04184536674550595], 'false': [0.02476434800950844, 0.05982953729197651], 'false,false': [0.0, 0.061241367678674295], 'false,false,false': [nan, 0.06124136767867433], 'true': [0.013211180511166863, 0.00482830732644236], 'true,true': [0.014539659475003358, 0.006793398050155143], 'true,false': [1.5126829688919422e-06, 0.01761703687631711], 'true,false,false': [4.330336149230979e-05, 0.03550497856956676]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.178
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8273797043302819;  // std dev = 1.392, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12616479039068443;  // std dev = 0.124, 255.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.11529179224236946;  // std dev = 0.437, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.727653288056175;  // std dev = 0.209, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4834200453308073;  // std dev = 0.426, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.05482177181490381;  // std dev = 2.925, 150.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=13 */
%   | | | else return -0.09330972381642473;  // std dev = 0.830, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.07282431218243444;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.07586362114917038;  // std dev = 1.160, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11065228823964006;  // std dev = 4.739, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5676865578401785;  // std dev = 0.024, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.7312386811674939;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5891646793595094;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5533456387898774;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7392199623655065;  // std dev = 0.129, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12127017561850825;  // std dev = 0.062, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09451459318069678;  // std dev = 3.554, 89.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=25 */
%   | | | else return 0.18229701106698507;  // std dev = 2.898, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4183385070788587;  // std dev = 0.019, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.3498184776530722;  // std dev = 1.671, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | else return 0.501979495663244;  // std dev = 0.237, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.56422719146568;  // std dev = 1.087, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.37607157309046696;  // std dev = 1.107, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6349147551913112;  // std dev = 0.345, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7777033196509292;  // std dev = 0.220, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(K, A) )
%   | then return -0.10903662834854937;  // std dev = 0.004, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.16079127844123756;  // std dev = 0.185, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.31431776978016873;  // std dev = 0.123, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.09022592504335024;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.22139184170752194;  // std dev = 1.036, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.49132420223016315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return 0.2746147961218156;  // std dev = 0.210, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5268160760399532;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.06161595289523916;  // std dev = 0.137, 243.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=17 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.0612363466740808;  // std dev = 2.199, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.10842559736883987;  // std dev = 2.937, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.25534032572211357;  // std dev = 0.931, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.36013443104879866;  // std dev = 0.970, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.09339158978486124;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else return 0.030675338253410126;  // std dev = 0.176, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3004039821153906;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2654863992763181;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.2808581683148889;  // std dev = 0.321, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5386633544356938;  // std dev = 0.352, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.12996115817104104;  // std dev = 0.030, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.16990502351896603;  // std dev = 0.979, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return -0.12096630281452221;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2178300462459556;  // std dev = 0.060, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.26073251593396846;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A) )
%   | then return -0.0458175516054748;  // std dev = 0.138, 235.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=23 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3161732015482432;  // std dev = 1.254, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.1283344663890319;  // std dev = 0.093, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08014975710666492;  // std dev = 0.845, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10152057128141853;  // std dev = 1.346, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), tweets(F, E) )
%   | | | then return 0.14821785090708925;  // std dev = 1.349, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.18429099591762058;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19680970565725445;  // std dev = 0.019, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2624638643640623;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04116685490461436;  // std dev = 0.140, 235.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2807732549920702;  // std dev = 0.445, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.11533145813932573;  // std dev = 0.110, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06657854050867584;  // std dev = 0.831, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.010754707367551023;  // std dev = 1.477, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15399188744076678;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return -0.16005406165463718;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.21893726662440832;  // std dev = 0.128, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.32697295865524123;  // std dev = 0.459, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.10399761933204414;  // std dev = 1.261, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return -0.08006191005371885;  // std dev = 0.051, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.22637480418349573;  // std dev = 0.989, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.43401031394410244;  // std dev = 0.154, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12132000071833374;  // std dev = 0.034, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.09809633052896555;  // std dev = 1.687, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | | else return 0.15709173302702006;  // std dev = 0.087, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.10536577114005817;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2501119627617436;  // std dev = 0.988, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.06870577857539815;  // std dev = 0.061, 221.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=4 */
%   else if ( tweets(A, H) )
%   | then return -3.943381903294584E-4;  // std dev = 0.144, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.09228596882767615;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.00878750884706272;  // std dev = 0.829, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.06935386312262358;  // std dev = 1.137, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.309', 'seconds']
Refined model CLL: -0.106424


******************************************
Best model found
******************************************
Results 

CLL : -0.104851 

AUC ROC : 0.993502 

AUC PR : 0.366694 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 15.178 

Total Inference Time : 21.027570486068726 

Total revision time: 48.727644683837894
Best scored revision CLL: -0.106424


Results 

CLL : -0.104851 

AUC ROC : 0.993502 

AUC PR : 0.366694 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 48.75172734451294 

Total Inference Time : 21.027570486068726 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.27
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.024815601766178873;  // std dev = 0.373, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.6081489350995122;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6528067455442875;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1013041227929815;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04489878247426092;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.28881117365523334;  // std dev = 0.609, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.19279151446249043;  // std dev = 1.998, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5857368330983866;  // std dev = 0.161, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.860576107764184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.657695167884817;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5717621504054302;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5717621504054302;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03594638785846302;  // std dev = 1.698, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | | | else return 0.003670301627979663;  // std dev = 1.420, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5047943599272702;  // std dev = 1.063, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11800806879085486;  // std dev = 0.064, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.11511919463374524;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20676750868811633;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3487159268684363;  // std dev = 0.326, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3127030997137149;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5797277881344314;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.052861879864593536;  // std dev = 1.200, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | | else return -0.12195586560841025;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014914195966199906;  // std dev = 1.091, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24969955758763906;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4852371074992539;  // std dev = 0.323, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11965990856875053;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.13163606533075659;  // std dev = 0.141, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27306211309368045;  // std dev = 0.259, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06731242826621996;  // std dev = 1.032, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02150140466673689;  // std dev = 0.263, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.06891077624045516;  // std dev = 1.326, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.08072996573167329;  // std dev = 0.068, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.060269298587200586;  // std dev = 0.823, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.03481614035567124;  // std dev = 0.913, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20251534018582443;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.1920209598074334;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08844303919685956;  // std dev = 0.049, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.256661414251712;  // std dev = 0.851, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11553803981029602;  // std dev = 0.123, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16547099282698818;  // std dev = 0.149, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.16947604551360895;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.07856797850691277;  // std dev = 0.008, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09302009801680897;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.09421577859248878;  // std dev = 0.271, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.1445430586420114;  // std dev = 0.437, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06385652423731528;  // std dev = 0.760, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.479', 'seconds']
Parameter learned model CLL:-0.114879 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [2.79e-08, 31, 0], 'true,false,false': [0.373, 5, 1], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.433, 1, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.966, 1, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.141, 34, 1], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.949, 9, 1], 'false,false,false,true': [0.609, 1, 1], 'false,false,false,false': [1.998, 12, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.161, 0, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.698, 40, 5], 'false,false,false,false': [1.42, 13, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.063, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 35, 0], 'false,true,false,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 4, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.326, 0, 14], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.045, 0, 5], 'false,false,true,false': [1.2, 34, 3], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.091, 30, 14], 'false,true': [0.0, 0, 1], 'false,false,true': [0.323, 0, 10], 'false,false,false,true': [0.026, 6, 0], 'false,false,false,false': [0.141, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.259, 0, 21], 'true,false': [1.032, 42, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.263, 3, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.326, 2, 14], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.068, 38, 1], 'false,false,false,true': [0.823, 10, 7], 'false,false,false,false': [0.913, 6, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.057, 0, 14], 'false,true,true,true': [0.008, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.049, 45, 0], 'false,false,true': [0.851, 1, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.123, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.149, 0, 14], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.008, 36, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.271, 1, 1], 'false,true': [0.437, 2, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.76, 4, 3]}]
{'': [0.21301775147928942, 0.2399999999999999], 'false': [0.2479338842975207, 0.18750000000000006], 'false,true': [-1.4802973661668753e-16, -2.7755575615628915e-18], 'true': [-2.3684757858670006e-16, 0.026296566837107443], 'true,false': [2.5069552168955147e-17, 0.13888888888888892], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.06222222222222236, 0.10809801159072885], 'false': [0.019813992999033473, 0.1780199678951802], 'false,false': [0.08999999999999998, 0.199053263137123], 'false,false,false': [0.18546996371782487, 0.19957343171982642], 'false,false,true': [nan, 0.08999999999999998], 'false,true': [nan, 0.019813992999033473]}
{'': [0.006993037692166494, 0.09278487659406068], 'false': [nan, 0.0927848765940607], 'false,false': [3.700743415417188e-17, 0.08062363314239829], 'false,false,false': [0.06406034283603287, 0.12605007247554378], 'true': [0.002148209320057178, 0.010290168941583855], 'true,false': [0.0, 0.0], 'true,true': [0.002148209320057178, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.04349506215265823, 0.0011126603201414413], 'false': [0.000103957031636992, 0.003979263856267928], 'false,false': [nan, 0.003979263856267928], 'false,false,false': [nan, 0.003979263856267928], 'false,true': [nan, 0.000103957031636992], 'false,true,false': [0.00011776483691961096, -2.7755575615628915e-18]}
{'': [0.007577284353103453, 0.07222406152518614], 'false': [0.0, 0.0713202881201309], 'false,false': [0.07629947752642281, 0.0], 'false,false,true': [0.0004104427780367459, 0.038915503913954645], 'true': [0.007577284353103453, nan], 'false,true': [0.0, nan]}
{'': [0.027074315232045496, 0.08964932520035718], 'false': [0.0, 0.09216392579714884], 'false,false': [0.010401131874005331, 0.0012465456252076185], 'true': [nan, 0.027074315232045443], 'true,false': [nan, 0.027074315232045496], 'false,false,false': [0.00011097980258531019, 0.0018153234010122208]}
{'': [0.04228051386943822, 0.017234751897233943], 'true': [0.0031937584975032835, 0.023658099762322853], 'false': [nan, 0.017234751897233943], 'false,false': [nan, 0.017234751897233943], 'false,false,false': [nan, 0.017234751897233943]}
{'': [0.10991857155561979, 0.030228831027227406], 'true': [0.10991857155561979, nan], 'false': [nan, 0.030228831027227357], 'false,false': [0.004558011935450825, 0.058250771110018626], 'false,false,false': [0.039833153058871376, 0.09261600230327204]}
{'': [0.0032691986341614665, 0.026495566612221983], 'false': [0.004660159246113808, 0.06516603069651636], 'false,false': [0.08054336376396078, 0.0010722587118202679], 'false,true': [1.934482750033199e-05, 5.329345292887089e-05], 'false,false,false': [nan, 0.0010722587118202679], 'false,true,true': [1.934482750033199e-05, nan]}
{'': [0.013988318072370318, 0.052888599529572776], 'false': [0.023888013684325658, 0.08255995723159375], 'false,false': [nan, 0.08255995723159375], 'false,false,false': [nan, 0.08255995723159375], 'true': [0.0014826187209499538, 0.003351227784386753], 'true,false': [1.6692738653582994e-06, 0.03230106790038805], 'true,false,false': [0.0, 0.03676584402069801], 'true,true': [0.0015874506950258288, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.586
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7377419604274745;  // std dev = 0.143, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(D, F), follows(E, D) )
%   | | | then return -0.08703927258569386;  // std dev = 0.825, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return -0.13253463721580774;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.0739682096774179;  // std dev = 1.054, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.1254446385283914;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4195467402759845;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5642452598054072;  // std dev = 0.104, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(E, A) )
%   | | then return 0.7318657101426099;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5508508591118221;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.7205028406943594;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.7043049733293498;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then return -0.12134168637943579;  // std dev = 0.083, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32920007634042786;  // std dev = 0.983, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.189581381947927;  // std dev = 1.153, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.41092660697441596;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.16092660697441596;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4921039306412554;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5026817883559103;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.6606798221806253;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.10444063911990623;  // std dev = 0.024, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.14316782326055677;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.10730079059134638;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.22936018835947342;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.33033788019346555;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.35398697306621013;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3733803570926839;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.4140087053220392;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3869258295435075;  // std dev = 0.155, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07596096819147358;  // std dev = 1.072, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.2618929419829956;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.29559123353371475;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0877519656189715;  // std dev = 0.008, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.011969787220596722;  // std dev = 0.175, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.320143456889435;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2952210705284625;  // std dev = 0.149, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.529357517870182;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.13116247333537892;  // std dev = 0.135, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.1869576749153757;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.23160079703448005;  // std dev = 0.126, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0843448070781709;  // std dev = 0.035, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.07926737777293583;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, C), tweets(G, H) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.08300557193214535;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.013441270045490636;  // std dev = 0.296, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.03987047597663999;  // std dev = 0.309, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, J), follows(J, K) )
%   | then if ( recursion_accounttype(K, B) )
%   | | then return 0.22516403004451976;  // std dev = 0.095, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.15744425938071208;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.12456474698755131;  // std dev = 0.711, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.1686964055966801;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18390115767382775;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.20203039684737517;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21213733073811306;  // std dev = 0.120, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0763409431552617;  // std dev = 0.022, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then if ( tweets(F, H), tweets(G, H) )
%   | | | then return -0.05712128056288019;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.08538260619192244;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.020525895278525406;  // std dev = 0.272, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else return -0.048396420795521;  // std dev = 0.329, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.15396849825640635;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19419884660380612;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.16818545798030501;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23885541382488976;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07495026838523873;  // std dev = 0.010, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1721110624753975;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3627411060997147;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.08797622420838831;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.21369725607454976;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.0831748253657159;  // std dev = 0.252, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.21803466760185297;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.06764881055799885;  // std dev = 0.039, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09715392885470846;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05468719848630733;  // std dev = 0.181, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | then return 0.12610912815340594;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.008274947652836808;  // std dev = 0.295, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, J) )
%   | | then return 0.01158934044258673;  // std dev = 0.230, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.07009452035063019;  // std dev = 0.516, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '1.416', 'seconds']
Refined model CLL: -0.105768


******************************************
Best model found
******************************************
Results 

CLL : -0.112885 

AUC ROC : 0.994072 

AUC PR : 0.348321 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 9.586 

Total Inference Time : 11.568615913391113 

Total revision time: 24.69272904968262
Best scored revision CLL: -0.105768


Results 

CLL : -0.112885 

AUC ROC : 0.994072 

AUC PR : 0.348321 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 24.716811710357668 

Total Inference Time : 11.568615913391113 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.553
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7867203636709403;  // std dev = 1.669, 42.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.05851773156715445;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2581489350995123;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7336614886487068;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.039534025810681654;  // std dev = 0.258, 80.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04396682506278329;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15846467542843096;  // std dev = 2.239, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5468224141073919;  // std dev = 1.022, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.12839357780797114;  // std dev = 0.908, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5694526052707138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5694526052707138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030943732404862936;  // std dev = 2.505, 88.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=10 */
%   | | | else return 0.0042887383712487005;  // std dev = 1.910, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.50394764618632;  // std dev = 1.731, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11904902413815391;  // std dev = 0.026, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.12224900173461373;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17444967981655052;  // std dev = 0.121, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3103928666235407;  // std dev = 1.133, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3113571558611957;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6228841225257675;  // std dev = 0.131, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08173425025142413;  // std dev = 1.555, 99.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=4 */
%   | | else return -0.11380230180058235;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04798442725102395;  // std dev = 1.990, 98.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24877819095876086;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.543734994471962;  // std dev = 0.531, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12296627312741543;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.1179268026101102;  // std dev = 0.103, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29969812027726656;  // std dev = 0.654, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return -0.0913164724397358;  // std dev = 1.492, 109.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.003138420560422353;  // std dev = 0.431, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.10587407275766707;  // std dev = 1.656, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.048955468045054205;  // std dev = 0.169, 71.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.023017013520682843;  // std dev = 0.941, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return 0.08411645981487144;  // std dev = 1.161, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1984995386330872;  // std dev = 0.076, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30893720138397535;  // std dev = 0.382, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0917303867875463;  // std dev = 0.021, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39646227199034634;  // std dev = 0.493, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11767739336515083;  // std dev = 0.110, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1899350482833509;  // std dev = 0.462, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.146091575258259;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08360450102400016;  // std dev = 0.006, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08658543664288773;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.0072853709197045246;  // std dev = 0.520, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.003356896897484872;  // std dev = 0.606, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0447108665113253;  // std dev = 0.982, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.036', 'seconds']
Parameter learned model CLL:-0.113139 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.669, 3, 39], 'true,false,true': [8.16e-08, 90, 0], 'true,false,false': [0.276, 11, 1], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.49, 6, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 72, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.953, 10, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.239, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.022, 1, 28], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.908, 2, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.505, 78, 10], 'false,false,false,false': [1.91, 28, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.731, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.026, 82, 0], 'false,true,false,false': [0.008, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.121, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.133, 1, 30], 'true,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.131, 0, 11], 'false,false,true,false': [1.555, 95, 4], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.99, 62, 36], 'false,true': [5.27e-09, 0, 3], 'false,false,true': [0.531, 0, 11], 'false,false,false,true': [0.081, 12, 0], 'false,false,false,false': [0.103, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.654, 0, 43], 'true,false': [1.492, 105, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.431, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.656, 3, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.169, 63, 8], 'false,false,false,true': [0.941, 17, 7], 'false,false,false,false': [1.161, 9, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.076, 0, 30], 'false,true,true,true': [0.382, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.021, 86, 0], 'false,false,true': [0.493, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.462, 0, 36], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.006, 70, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.52, 6, 1], 'false,true': [0.606, 13, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.982, 9, 4]}]
{'': [0.20061728395061854, 0.2494331065759637], 'false': [0.2479338842975207, 0.23999999999999985], 'false,true': [-1.4802973661668753e-16, -2.7755575615628915e-18], 'true': [0.06632653061224614, 0.009707804690503655], 'true,false': [7.401486830834377e-17, 0.07638888888888894], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [-5.730183352904034e-16, 0.1055855654402075], 'false': [0.06642570039779103, 0.1697022666214107], 'false,false': [0.0826446280991735, 0.1899442559779811], 'false,false,false': [0.0, 0.18573884260924134], 'false,false,true': [nan, 0.0826446280991735], 'false,true': [nan, 0.06642570039779103]}
{'': [0.07114528926671332, 0.09226914655572824], 'false': [nan, 0.09226914655572821], 'false,false': [0.0, 0.08223153037746792], 'false,false,false': [0.0712893185056595, 0.1105079787650858], 'true': [0.036007641720907264, 0.240520813549034], 'true,false': [0.2751179624978895, 0.0], 'true,true': [0.036007641720907264, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.05760121994438299, 0.0005083013061109547], 'false': [9.100850340342434e-06, 0.0009168667484203939], 'false,false': [nan, 0.0009168667484203939], 'false,false,false': [nan, 0.0009168667484203939], 'false,true': [nan, 9.100850340342434e-06], 'false,true,false': [8.307355050684056e-06, 5.001921413812822e-06]}
{'': [0.04138241899797258, 0.06336923231912121], 'false': [1.1102230246251566e-17, 0.06161513242041989], 'false,false': [0.06682097492583923, 5.046468293750712e-18], 'false,false,true': [0.0015501858812113736, 0.024424579694168766], 'true': [0.04138241899797258, nan], 'false,true': [1.1102230246251566e-17, nan]}
{'': [0.04042919421655877, 0.08846117830680651], 'false': [9.25185853854297e-18, 0.09224866831067342], 'false,false': [0.025605066894311846, 0.000558351995829324], 'true': [nan, 0.040429194216558766], 'true,false': [nan, 0.04042919421655877], 'false,false,false': [0.0005415503452536538, 0.0005591327530934095]}
{'': [0.04848070657462391, 0.018607573474187827], 'true': [0.00993474891429489, 0.020434451477286487], 'false': [nan, 0.018607573474187827], 'false,false': [nan, 0.018607573474187827], 'false,false,false': [nan, 0.018607573474187827]}
{'': [0.08062076350263145, 0.04173967428947606], 'true': [0.08062076350263145, nan], 'false': [nan, 0.04173967428947611], 'false,false': [0.028607165806594514, 0.06120006497194108], 'false,false,false': [0.03689708187285896, 0.10364561296091926]}
{'': [0.005711084429645037, 0.030356680817142916], 'false': [0.017649251606940496, 0.06818728706478769], 'false,false': [0.026998608822481864, 0.0006684276886530304], 'false,true': [0.013263855541278008, 5.229222174497797e-06], 'false,true,true': [0.013263855541278008, nan], 'false,false,false': [nan, 0.0006684276886530304]}
{'': [0.0193828594421604, 0.04202906561575794], 'false': [0.019306750366105078, 0.07422320124915159], 'false,false': [nan, 0.07422320124915159], 'false,false,false': [nan, 0.07422320124915159], 'true': [0.005615222267300946, 0.0036669594964095936], 'true,true': [0.005935292061865623, 0.0], 'true,false': [4.825307423905745e-07, 0.0208788254142498], 'true,false,false': [-1.982541115402065e-18, 0.03861340061664901]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.884
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.3581489350995123;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.729227108297664;  // std dev = 0.033, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.40206438202556855;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5582032880961626;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7216725056584679;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return -0.08366857633550595;  // std dev = 0.187, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.02780797142419682;  // std dev = 0.293, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1338374766068115;  // std dev = 2.267, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.527133551652617;  // std dev = 0.194, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.6190070012112031;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.8544152637775855;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.6026437884080111;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11299921640051916;  // std dev = 0.014, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.022659834462086255;  // std dev = 1.575, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.27540383879094976;  // std dev = 1.316, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.07289485319622278;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4411430911239729;  // std dev = 0.126, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.5160932570164003;  // std dev = 0.139, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6117205040818737;  // std dev = 0.223, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.772382455975587;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.1078390412814324;  // std dev = 0.107, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return -0.12041007618027708;  // std dev = 0.059, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.1949483924407548;  // std dev = 0.108, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.3287124800203415;  // std dev = 0.011, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3814028427907586;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08459747583730991;  // std dev = 1.022, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3483818702545742;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4761555258985703;  // std dev = 0.221, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08569956296602176;  // std dev = 1.401, 97.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=4 */
%   | | else return -0.1573645324846183;  // std dev = 0.254, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.22485500192078134;  // std dev = 0.917, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.3066596937791447;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08727515246218968;  // std dev = 0.033, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.024925186038167065;  // std dev = 0.158, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2672693984676606;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3961359260178217;  // std dev = 0.238, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6007412627886373;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.13990700361605524;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.11375566748010547;  // std dev = 0.123, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, E) )
%   | | then return 0.21891916522784824;  // std dev = 0.011, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.23597568057546725;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2949794230706947;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -0.09374675866452489;  // std dev = 0.678, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.07860464150780053;  // std dev = 6.83e-05, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, H), tweets(F, I) )
%   | | | then return 0.045304993944907564;  // std dev = 0.839, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return -0.06096079913728889;  // std dev = 0.566, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | else return 0.06450071363168568;  // std dev = 0.252, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(C, A), follows(D, A) )
%   | | | then return 0.18667417592799107;  // std dev = 0.046, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.03844099918038329;  // std dev = 1.235, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(C, D) )
%   | | | then return 0.27233505276772046;  // std dev = 0.282, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.43838427277916336;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(C, A) )
%   | | then if ( tweets(A, E), tweets(C, E) )
%   | | | then return -0.07599109072618163;  // std dev = 0.062, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.0882527778750309;  // std dev = 0.023, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12889358231779907;  // std dev = 0.030, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.17060955207988457;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0.08069509282477652;  // std dev = 0.281, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.10622446940251494;  // std dev = 0.224, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.17506806961772148;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2782531861106051;  // std dev = 0.206, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1731891802143687;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23468174711463718;  // std dev = 0.218, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07555050861196139;  // std dev = 0.010, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.22298004125124202;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35389782781446777;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.13242399394815815;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11389152692447455;  // std dev = 0.959, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.1946484686471905;  // std dev = 0.198, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1482246475153105;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.06841898102371384;  // std dev = 0.008, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.0734354073903921;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.02394005298349177;  // std dev = 0.419, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.180744607443186;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1055675390545581;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.006665725533429968;  // std dev = 0.190, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.229', 'seconds']
Refined model CLL: -0.105214


******************************************
Best model found
******************************************
Results 

CLL : -0.108916 

AUC ROC : 0.994602 

AUC PR : 0.352883 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 7.884 

Total Inference Time : 10.722345113754272 

Total revision time: 23.960457288742067
Best scored revision CLL: -0.105214


Results 

CLL : -0.108916 

AUC ROC : 0.994602 

AUC PR : 0.352883 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 23.984539949417115 

Total Inference Time : 10.722345113754272 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.739
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8264029033534809;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.21529179224236947;  // std dev = 0.479, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7258358945582696;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.025280166388820375;  // std dev = 0.277, 109.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06023885896138714;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7708523022652903;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12395370383731473;  // std dev = 2.463, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5210991554393755;  // std dev = 1.411, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else return 0.7308377778883669;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8750682580003782;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6110191293997805;  // std dev = 0.100, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5616253799291703;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5616253799291703;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03379420754512824;  // std dev = 3.007, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | | else return -0.015424243281573253;  // std dev = 2.119, 44.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47682710002794776;  // std dev = 2.302, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11969828786932936;  // std dev = 0.024, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.12114271028671783;  // std dev = 0.002, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16412229910226192;  // std dev = 0.120, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33646574825722797;  // std dev = 0.399, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.439959814136906;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3120202579301687;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6369290602023604;  // std dev = 0.101, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08364157615995464;  // std dev = 1.767, 134.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=5 */
%   | | else return -0.10909421021162058;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016632864177729738;  // std dev = 2.797, 168.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=53 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24923217911003986;  // std dev = 1.67e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5238739486860124;  // std dev = 0.628, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1270384409700505;  // std dev = 0.105, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.12391964105894678;  // std dev = 0.129, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27167752388359406;  // std dev = 1.481, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return -0.07781191422047261;  // std dev = 1.586, 158.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021817754483912766;  // std dev = 0.569, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1616176174248503;  // std dev = 1.374, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04011583799642994;  // std dev = 0.153, 116.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=13 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.0018831307386921476;  // std dev = 1.137, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.03065023458680926;  // std dev = 1.310, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12506104878604205;  // std dev = 0.258, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29040282669033324;  // std dev = 0.557, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09079917286669163;  // std dev = 0.023, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37745955118012814;  // std dev = 0.915, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10796306633003654;  // std dev = 0.104, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16354263391159282;  // std dev = 1.559, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | else return 0.14050423124933226;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08374295233826924;  // std dev = 0.006, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08316209746221535;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.008029439214383267;  // std dev = 0.381, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.035570176180355385;  // std dev = 0.806, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21153067889020805;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025188889394301743;  // std dev = 1.093, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.817', 'seconds']
Parameter learned model CLL:-0.109474 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 61], 'true,false,true': [8.94e-08, 99, 0], 'true,false,false': [0.229, 17, 1], 'false,true,true,true': [0.943, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.479, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.277, 96, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.964, 13, 1], 'false,false,false,true': [0.072, 0, 3], 'false,false,false,false': [2.463, 24, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.411, 2, 39], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.1, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.49e-08, 0, 5], 'false,false,true,false': [1.49e-08, 0, 6], 'false,false,false,true': [3.007, 115, 14], 'false,false,false,false': [2.119, 38, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.302, 4, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.024, 98, 0], 'false,true,false,false': [0.002, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.12, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.399, 0, 42], 'true,false': [0.011, 0, 2], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.101, 0, 15], 'false,false,true,false': [1.767, 129, 5], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.797, 115, 53], 'false,true': [1.67e-08, 0, 8], 'false,false,true': [0.628, 0, 14], 'false,false,false,true': [0.105, 22, 0], 'false,false,false,false': [0.129, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.481, 2, 62], 'true,false': [1.586, 151, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.569, 10, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.374, 2, 48], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 103, 13], 'false,false,false,true': [1.137, 30, 9], 'false,false,false,false': [1.31, 16, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.258, 3, 44], 'false,true,true,true': [0.557, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.023, 130, 0], 'false,false,true': [0.915, 1, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.104, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.559, 2, 54], 'true,true,false': [0.011, 0, 7], 'true,false,true': [0.006, 116, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.381, 5, 1], 'false,true': [0.806, 14, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.093, 13, 4]}]
{'': [0.22580246913580262, 0.23070987654320937], 'false': [0.23140495867768604, 0.2295918367346937], 'false,true': [0.09876543209876527, -1.2810265668751807e-17], 'true': [0.030738221214411016, 0.008473957191905895], 'false,true,true': [0.09876543209876527, nan], 'true,false': [8.074349270001139e-17, 0.052469135802469175]}
{'': [-8.141635513917814e-16, 0.11076691499309022], 'false': [0.07659954253934054, 0.171056372916894], 'false,false': [0.0663265306122449, 0.19531125264984583], 'false,false,false': [0.0017415609581901137, 0.17846029916786654], 'false,true': [nan, 0.07659954253934054], 'false,false,true': [nan, 0.0663265306122449]}
{'': [0.04735722308186196, 0.09323410258869957], 'false': [nan, 0.09323410258869963], 'false,false': [0.0, 0.07829919475945563], 'false,false,false': [0.07011278591026238, 0.10204862833478133], 'true': [0.04840169531939492, 0.015588920424991048], 'true,true': [0.04853483662241218, 0.0], 'true,false': [0.0, 0.0033547416546377087], 'false,false,true': [4.4408920985006264e-17, 3.700743415417188e-17]}
{'': [0.06710243586668584, 0.0003653652325395372], 'false': [5.157222504297251e-06, 0.0006225249281197802], 'false,false': [nan, 0.0006225249281197802], 'false,false,false': [nan, 0.0006225249281197802], 'false,true': [nan, 5.157222504297251e-06], 'false,true,false': [5.9234025654782e-06, 2.0285316906425335e-07]}
{'': [0.004083848689941958, 0.06672802872563885], 'false': [-4.0371746350005693e-17, 0.0643284955126797], 'false,false': [0.06804190160954425, -2.7755575615628915e-18], 'false,false,true': [0.0006787513099640208, 0.023311877394604063], 'true': [0.0037883809480982918, 6.451421782044386e-05], 'false,true': [-4.0371746350005693e-17, nan]}
{'': [0.04658003852991224, 0.07587666394979924], 'false': [3.469446951953614e-17, 0.07953635842420295], 'false,false': [0.028141068071358584, 0.000564576589135736], 'true': [nan, 0.046580038529912236], 'true,false': [nan, 0.04658003852991224], 'false,false,false': [0.0004994140382479084, 0.0006133048155930619]}
{'': [0.04626214941222847, 0.020255135732058265], 'true': [0.034259108453204026, 0.015911782532883206], 'false': [nan, 0.020255135732058265], 'false,false': [nan, 0.020255135732058265], 'false,false,false': [nan, 0.020255135732058265]}
{'': [0.03775357759362324, 0.033190946443595666], 'true': [0.03775357759362324, nan], 'false': [nan, 0.03319094644359565], 'false,false': [0.02340210264512041, 0.050329235897557174], 'false,false,false': [0.0331345877991041, 0.08172424872320869]}
{'': [0.06648418920505592, 0.03044346351040133], 'false': [0.019454234668257332, 0.06945205993737713], 'false,false': [0.07609076874444681, 0.00038280875048857244], 'false,true': [0.014754347789140088, 4.0812449641842035e-06], 'false,true,true': [0.014754347789140088, nan], 'false,false,false': [nan, 0.00038280875048857244]}
{'': [0.02632730560924845, 0.04691347902674621], 'false': [0.029536241598441027, 0.06815232431101365], 'false,false': [0.0, 0.0702322144250173], 'false,false,false': [nan, 0.0702322144250173], 'true': [0.038643157911479986, 0.0013689916767809925], 'true,true': [0.04341224810360811, 1.8642599140754135e-05], 'true,false': [2.9558448673943236e-07, 0.011750773399579076], 'true,false,false': [-2.6020852139652106e-18, 0.024192804788321334]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.397
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.13444365749308043;  // std dev = 0.086, 135.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7243278276767332;  // std dev = 0.017, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7927941835770488;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04168625350451258;  // std dev = 2.269, 80.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=8 */
%   | | | else return -0.06585005241611468;  // std dev = 1.153, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.040407116971546676;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.12625954969512002;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7520447295508923;  // std dev = 0.080, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10716221744801974;  // std dev = 2.443, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5671778170311651;  // std dev = 0.111, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.6339167526012681;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8692150896468824;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5909288371413778;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5649436036148845;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.728761629448117;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12054661615675957;  // std dev = 0.041, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2201876806990344;  // std dev = 1.546, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.212325774081411;  // std dev = 1.538, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.4230642238760132;  // std dev = 0.053, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(A, D), tweets(D, F) )
%   | | | then return 0.10158298137026393;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4208334306291712;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.5419133397544125;  // std dev = 0.109, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5653298083971081;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5191319404666213;  // std dev = 0.274, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6985283123728039;  // std dev = 0.194, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.1089799981219463;  // std dev = 0.004, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return -0.19099287072216467;  // std dev = 0.031, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.32429457861176775;  // std dev = 0.044, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.36155630918600085;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21403769091865174;  // std dev = 0.973, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.03367064415262796;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3260613869481222;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4573394479118199;  // std dev = 0.229, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0864906290850021;  // std dev = 1.515, 149.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=5 */
%   | | else return -0.09193536188836034;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2605318875024299;  // std dev = 0.016, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2284383688701757;  // std dev = 0.957, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.09177542189022421;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.06420891216163752;  // std dev = 0.182, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25772725888936143;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3924278783260748;  // std dev = 0.320, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5738108206523149;  // std dev = 0.206, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12224550934807438;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.11373921848593667;  // std dev = 0.200, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( tweets(E, C), follows(A, D) )
%   | | | then return 0.16965240537684764;  // std dev = 0.924, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.22920107605430992;  // std dev = 0.166, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.3075388166424485;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08792261681477469;  // std dev = 0.012, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.25348304368056696;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.05841318793003675;  // std dev = 0.508, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return -0.03204045211294803;  // std dev = 0.394, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.024419396542930405;  // std dev = 0.246, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.04232455124397009;  // std dev = 1.157, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.13987210398314598;  // std dev = 0.986, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.03392837502240346;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( recursion_accounttype(C, B), follows(C, A) )
%   | | | then return 0.1882584090161725;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.24998861491695606;  // std dev = 0.327, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.08291472857716013;  // std dev = 0.013, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.174172983525351;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.037644754756107256;  // std dev = 0.510, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.07544236447135214;  // std dev = 0.968, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return -0.07018656688540618;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16178761727962665;  // std dev = 0.011, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(E, A) )
%   | | then return 0.24260275059831363;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.14508455311575866;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.17076452247418875;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.240759467687698;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07252999401047626;  // std dev = 0.025, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0468355111635988;  // std dev = 0.959, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4234701350717388;  // std dev = 0.181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12685400699155855;  // std dev = 0.030, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09644948524630889;  // std dev = 1.364, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.17186741363649288;  // std dev = 0.118, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1299648732983168;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06490428379156124;  // std dev = 0.032, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.00529629928654845;  // std dev = 0.117, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | else return 0.012105726525941515;  // std dev = 0.393, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.19058857312180055;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.02302047337200886;  // std dev = 0.419, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.02238747352671591;  // std dev = 0.771, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.685', 'seconds']
Refined model CLL: -0.102609


******************************************
Best model found
******************************************
Results 

CLL : -0.102921 

AUC ROC : 0.994149 

AUC PR : 0.362419 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 9.397 

Total Inference Time : 13.661820888519287 

Total revision time: 29.913044296264648
Best scored revision CLL: -0.102609


Results 

CLL : -0.102921 

AUC ROC : 0.994149 

AUC PR : 0.362419 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 29.937126956939696 

Total Inference Time : 13.661820888519287 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.134
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8462441731947502;  // std dev = 0.994, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7240079999761179;  // std dev = 0.142, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030051613546134046;  // std dev = 0.268, 151.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09641437751033571;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.49790643196610296;  // std dev = 0.904, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06718803442444726;  // std dev = 2.811, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5484719264268716;  // std dev = 1.041, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.7278630421196802;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8163268182730079;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6568800565899572;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5571856368593534;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5571856368593534;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04657027861056915;  // std dev = 3.222, 172.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=16 */
%   | | | else return 0.04477100840971265;  // std dev = 2.507, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4955387785334422;  // std dev = 2.112, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1176530151044947;  // std dev = 0.021, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.12706840089464222;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14721183289272236;  // std dev = 0.154, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3229877187917131;  // std dev = 0.450, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return 0.4619042810501765;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3051321783222418;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6323834206166432;  // std dev = 0.156, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08890322714678896;  // std dev = 1.948, 216.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=6 */
%   | | else return -0.10724891096143495;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.044186529372026245;  // std dev = 2.763, 199.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=73 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16958558290825113;  // std dev = 0.971, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5439470536072643;  // std dev = 0.639, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11009796953524179;  // std dev = 0.099, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.11380463870755773;  // std dev = 0.130, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2239714330158259;  // std dev = 2.410, 91.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=85 */
%   | else return -0.08535080084357405;  // std dev = 2.016, 185.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.014853950741739242;  // std dev = 0.697, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1696562620063926;  // std dev = 1.398, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.2625383031601102;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0508564909201302;  // std dev = 0.173, 149.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008618352551008287;  // std dev = 1.137, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return 0.07553465222366096;  // std dev = 1.488, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15496912869604393;  // std dev = 0.185, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2944152784638432;  // std dev = 0.616, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09053531947080856;  // std dev = 0.040, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4536573921204417;  // std dev = 0.526, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0990788427516876;  // std dev = 0.126, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16857873187967862;  // std dev = 1.400, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.14957882089338048;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08393967454415334;  // std dev = 0.032, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07913074548552669;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.02170838855116909;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.01626193715633759;  // std dev = 0.783, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23275641582868956;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05552143488475687;  // std dev = 1.186, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.674', 'seconds']
Parameter learned model CLL:-0.11065 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 83], 'true,false,true': [0.0, 162, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.471, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.142, 0, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 134, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.904, 1, 3], 'false,false,false,false': [2.811, 40, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.041, 1, 55], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.117, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 7], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [3.222, 156, 16], 'false,false,false,false': [2.507, 37, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.112, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 152, 0], 'false,true,false,false': [0.0, 27, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.154, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.45, 0, 58], 'true,false': [0.036, 0, 3], 'false,true,true': [1.49e-08, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.156, 0, 19], 'false,false,true,false': [1.948, 210, 6], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.763, 126, 73], 'false,true': [0.971, 1, 11], 'false,false,true': [0.639, 0, 16], 'false,false,false,true': [0.099, 33, 0], 'false,false,false,false': [0.13, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.41, 6, 85], 'true,false': [2.016, 177, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.697, 22, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.398, 2, 66], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.173, 132, 17], 'false,false,false,true': [1.137, 37, 9], 'false,false,false,false': [1.488, 16, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.185, 2, 61], 'false,true,true,true': [0.616, 0, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 138, 0], 'false,false,true': [0.526, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 34, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.4, 2, 75], 'true,true,false': [0.009, 0, 8], 'true,false,true': [0.032, 153, 0], 'true,false,false,true': [5.27e-09, 11, 0], 'true,false,false,false': [0.471, 10, 2], 'false,true': [0.783, 18, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.186, 13, 6]}]
{'': [0.21570644718792942, 0.2172928927116337], 'false': [0.21301775147929003, 0.22222222222222232], 'true': [0.011763038548752444, 0.010637067869117648], 'false,true': [-2.220446049250313e-16, -3.0839528461809902e-18], 'true,false': [-1.507710280355151e-16, 0.07638888888888894], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.0003017234723960319, 0.09486485998528334], 'false': [0.07172806557915128, 0.13461514523659077], 'false,false': [0.03698224852071001, 0.16796602120811027], 'false,false,false': [0.20414181971476422, 0.15193195762105438], 'false,true': [nan, 0.07172806557915128], 'false,false,true': [nan, 0.03698224852071001]}
{'': [0.020925384674021063, 0.09250012124612844], 'false': [nan, 0.09250012124612844], 'false,false': [6.344131569286608e-17, 0.0778255391288863], 'false,false,false': [0.06035223966859619, 0.1365777524465708], 'true': [0.019557138779734088, 0.010253380573118776], 'true,true': [0.01934179142905501, 0.0], 'true,false': [0.0035589128723871877, 0.004547051115788718], 'false,false,true': [6.344131569286608e-17, 6.344131569286608e-17]}
{'': [0.04371593097076396, 0.0002289832319461514], 'false': [1.3841262784647089e-05, 0.0006962482170557368], 'false,false': [nan, 0.0006962482170557368], 'false,false,false': [nan, 0.0006962482170557368], 'false,true': [nan, 1.3841262784642127e-05], 'false,true,false': [2.928197429337493e-06, -1.850371707708594e-17]}
{'': [0.0042451705432485325, 0.055012735295621194], 'false': [1.586032892321652e-17, 0.05195165976677873], 'false,false': [0.054915095036925536, -1.1102230246251566e-17], 'false,false,true': [0.0012760572206888387, 0.01757021974821614], 'true': [0.0034938681676988104, 0.0004216112195622272], 'false,true': [1.586032892321652e-17, nan]}
{'': [0.03835867903646114, 0.07739108865465516], 'false': [0.07856808149857865, 0.07426757956065735], 'false,false': [0.025548976658594236, 0.00042189346996481837], 'true': [nan, 0.03835867903646105], 'true,false': [nan, 0.03835867903646114], 'false,false,false': [0.00029673009582302387, 0.0005480475242583889]}
{'': [0.05691448890463314, 0.016745174474900794], 'true': [0.06382871961555076, 0.02196668764470171], 'false': [nan, 0.016745174474900794], 'false,false': [nan, 0.016745174474900794], 'false,false,false': [nan, 0.016745174474900794]}
{'': [0.028439486575701754, 0.03817567787854897], 'false': [nan, 0.038175677878548975], 'false,false': [0.03002908374500921, 0.05239079158838331], 'false,false,false': [0.02811695046106033, 0.09621732170129231], 'true': [0.028732684267739145, 0.0], 'true,false': [0.0, nan]}
{'': [0.03422406812881483, 0.0327938157570038], 'false': [0.02258933415784358, 0.06526873157049642], 'false,false': [0.02304995166670054, 0.00046930037351651765], 'false,true': [0.014048305682811412, 1.162920730571458e-05], 'false,true,true': [0.014048305682811412, nan], 'false,false,false': [nan, 0.00046930037351651765]}
{'': [0.021852178227626917, 0.0451369264571256], 'false': [0.023594985930910622, 0.07183260100702601], 'false,false': [0.0, 0.07404265229441231], 'false,false,false': [nan, 0.07404265229441231], 'true': [0.023094977297480397, 0.0015137800024120566], 'true,true': [0.025459531313549427, 9.124427562973852e-06], 'true,false': [6.82581643513162e-06, 0.010487432124368474], 'true,false,false': [2.523234146875356e-18, 0.018523929057146934]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.024
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return -0.13042249347191676;  // std dev = 0.106, 175.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.15226658215833588;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return 0.7018513604542499;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.753145595147685;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5944734122109542;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.7761883032144935;  // std dev = 0.126, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2958678246861023;  // std dev = 1.029, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7336614886487067;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12670382386083323;  // std dev = 1.49e-07, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10498755712779385;  // std dev = 1.765, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.11371841730739109;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5651815679587782;  // std dev = 0.110, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.7269725885488638;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.49052324091786453;  // std dev = 1.071, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5630906263274618;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5859815224154471;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10232159287543624;  // std dev = 0.958, 124.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=2 */
%   | | | else return 0.007805324853441053;  // std dev = 2.054, 62.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07530423049248017;  // std dev = 1.891, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.02098867012197372;  // std dev = 2.080, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.35123159152822814;  // std dev = 1.672, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.2111412924472035;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.4308106161355313;  // std dev = 0.037, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5043044692025358;  // std dev = 0.197, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.5154529230004871;  // std dev = 0.188, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.27512457947823593;  // std dev = 0.729, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.4999383194198375;  // std dev = 0.968, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.7522931378512713;  // std dev = 0.231, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11548078562972643;  // std dev = 0.021, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.27843509632330543;  // std dev = 1.845, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | | else return 0.3515287225617888;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.10279380260390951;  // std dev = 0.553, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5408608877694461;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.31844244390284787;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3386279596032291;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4833835390810849;  // std dev = 0.310, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.07967252603123122;  // std dev = 1.786, 180.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=6 */
%   | | else return -0.09322075029360054;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.24876314353482354;  // std dev = 0.988, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.2832307281409397;  // std dev = 0.094, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.038959525656563423;  // std dev = 0.951, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05502226103512235;  // std dev = 0.132, 140.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=13 */
%   | | else return -0.03989594024169064;  // std dev = 0.138, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2774756058176535;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.40944941305342875;  // std dev = 0.246, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6340467095103888;  // std dev = 0.202, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11993278750855094;  // std dev = 0.027, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2362694817756566;  // std dev = 0.186, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.1467362388101969;  // std dev = 0.969, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.0998786280332588;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.014651147472931836;  // std dev = 1.206, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), follows(A, H) )
%   | then return -0.04784265009875305;  // std dev = 0.116, 207.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=20 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2733635648188915;  // std dev = 0.275, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09484476947405636;  // std dev = 0.095, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.017165932070722655;  // std dev = 0.656, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.16814592928703018;  // std dev = 1.028, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14515832472135443;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.20209433327895318;  // std dev = 0.123, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21525482530354015;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.349500358841737;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, G) )
%   | | | then return 0.3343483121880892;  // std dev = 0.131, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13157128420879016;  // std dev = 1.610, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return -0.08536772448592346;  // std dev = 0.014, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else if ( tweets(A, J) )
%   | | then return -0.04027359051556346;  // std dev = 0.130, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return 0.19549421101727094;  // std dev = 0.321, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.13368150805628448;  // std dev = 0.981, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.16785640991827974;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.19430439182794068;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.24348105973742326;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2345410203204558;  // std dev = 0.068, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.07437366465107531;  // std dev = 0.048, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2686957322849375;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.43307660695055644;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1307390267341611;  // std dev = 0.043, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1522905630055683;  // std dev = 0.087, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.08911687551582614;  // std dev = 1.605, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return 0.12391620322189961;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06622585166654403;  // std dev = 0.033, 159.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.01608420543330023;  // std dev = 0.115, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return -0.08695589921420357;  // std dev = 0.293, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.26639043072576585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.03127806387171636;  // std dev = 0.545, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.00705050532073736;  // std dev = 0.874, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.000', 'seconds']
Refined model CLL: -0.103632


******************************************
Best model found
******************************************
Results 

CLL : -0.102997 

AUC ROC : 0.99482 

AUC PR : 0.410611 

Precision : 0.335498 

Recall : 0.99359 

F1 : 0.501618 

Total Learning Time : 10.024 

Total Inference Time : 12.234984159469604 

Total revision time: 30.99031043815613
Best scored revision CLL: -0.103632


Results 

CLL : -0.102997 

AUC ROC : 0.99482 

AUC PR : 0.410611 

Precision : 0.335498 

Recall : 0.99359 

F1 : 0.501618 

Total Learning Time : 31.014393098831178 

Total Inference Time : 12.234984159469604 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.464
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6993312092320687;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03734602671157527;  // std dev = 0.261, 208.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09987486021250373;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7486990275884147;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11095698293233161;  // std dev = 3.222, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.562658435404087;  // std dev = 1.080, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7288533003685133;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8208470886677754;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.41184450702915115;  // std dev = 0.800, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5627019863304477;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5627019863304477;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04509934893310882;  // std dev = 3.659, 226.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=21 */
%   | | | else return 0.005779986636389399;  // std dev = 2.856, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4880493269175845;  // std dev = 2.526, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11705910189842007;  // std dev = 0.034, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | | else return -0.12204327670754671;  // std dev = 0.000681, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15390900280622527;  // std dev = 0.158, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30511994634267836;  // std dev = 1.409, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.07577252770295125;  // std dev = 1.252, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3103216320887236;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6369442322613582;  // std dev = 0.197, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08382793714207061;  // std dev = 2.349, 259.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=9 */
%   | | else return -0.10574893154112373;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02126480024335223;  // std dev = 3.615, 276.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2634034107359563;  // std dev = 0.192, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5160079045417177;  // std dev = 1.060, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1132270559735538;  // std dev = 0.098, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.10705159838441486;  // std dev = 0.103, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2685685419662221;  // std dev = 2.033, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07421832921337017;  // std dev = 2.077, 245.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.034642922955140876;  // std dev = 0.623, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17303533707937102;  // std dev = 1.398, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2601703838863921;  // std dev = 0.088, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04956267079338945;  // std dev = 0.151, 219.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.012387607261177592;  // std dev = 1.431, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
%   | | | else return 0.13581531264463384;  // std dev = 1.747, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13489523328434264;  // std dev = 0.243, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2566955110139298;  // std dev = 1.107, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08966010059036515;  // std dev = 0.033, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.448724059082454;  // std dev = 0.606, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10993229853341058;  // std dev = 0.147, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17843473612375702;  // std dev = 1.463, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.13893161931813425;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08252153067002595;  // std dev = 0.018, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08202664937575717;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.027798754077739078;  // std dev = 0.513, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.012859846444151791;  // std dev = 1.340, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.30888028710298976;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -7.256094898101528E-4;  // std dev = 1.481, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.020', 'seconds']
Parameter learned model CLL:-0.109026 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 163, 0], 'true,false,false': [0.253, 27, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.463, 20, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 186, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.101, 0, 4], 'false,false,false,false': [3.222, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.08, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.8, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.659, 205, 21], 'false,false,false,false': [2.856, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.526, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 184, 0], 'false,true,false,false': [0.000681, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.158, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.409, 2, 73], 'true,false': [1.252, 2, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.197, 0, 23], 'false,false,true,false': [2.349, 250, 9], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.615, 185, 91], 'false,true': [0.192, 0, 13], 'false,false,true': [1.06, 1, 22], 'false,false,false,true': [0.098, 38, 0], 'false,false,false,false': [0.103, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.033, 3, 107], 'true,false': [2.077, 234, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.623, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.398, 2, 80], 'true,false,true': [0.088, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 197, 22], 'false,false,false,true': [1.431, 56, 13], 'false,false,false,false': [1.747, 12, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.243, 5, 77], 'false,true,true,true': [1.107, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 216, 0], 'false,false,true': [0.606, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 34, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.463, 2, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [0.018, 175, 0], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.513, 13, 2], 'false,true': [1.34, 34, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.481, 24, 8]}]
{'': [0.228896548575605, 0.22222222222222235], 'true': [0.009522928994084868, 0.010308159722222057], 'false': [0.22837370242214483, 0.2140309155766945], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.5801947344358056e-16, 0.06420927467300835], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023573668436066935, 0.09593327225479702], 'false': [0.06831790399515197, 0.14763886037051155], 'false,false': [0.03222222222222227, 0.1806504356527905], 'false,false,false': [0.0025624097825737158, 0.16749059688941098], 'false,true': [nan, 0.06831790399515197], 'false,false,true': [nan, 0.03222222222222227]}
{'': [0.026405980011807474, 0.08694507163971188], 'false': [nan, 0.08694507163971196], 'false,false': [3.134747363647501e-16, 0.07276625351728508], 'false,false,false': [0.05922914380342553, 0.11329448935596839], 'true': [0.016567701835026514, 0.12640112609108262], 'true,false': [0.003255867630989173, 0.12786405467881723], 'true,true': [0.016417428454577276, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.048693363364879755, 0.0002876446561020971], 'false': [8.600176402944663e-06, 0.0005543649231111885], 'false,false': [nan, 0.0005543649231111885], 'false,false,false': [nan, 0.0005543649231111885], 'false,true': [nan, 8.600176402942616e-06], 'false,true,false': [6.3622656384521506e-06, 1.404121803844251e-08]}
{'': [0.047479773151988425, 0.05836806013419253], 'false': [-6.530723674265627e-17, 0.055468713532846554], 'false,false': [0.05861844887356407, -4.625929269271485e-18], 'false,false,true': [0.001694713121326538, 0.021301863908722282], 'true': [0.026468531765376835, 0.2614163660062003], 'false,true': [-6.530723674265627e-17, nan]}
{'': [0.04734562595426139, 0.08177321844533332], 'false': [0.002821734904929899, 0.08740609396051557], 'false,false': [0.048869252176113945, 0.00030917402029039535], 'true': [nan, 0.04734562595426154], 'true,false': [nan, 0.04734562595426139], 'false,false,false': [0.00025146462399467707, 0.0003631636993111508]}
{'': [0.048921968536476824, 0.02042865900938637], 'true': [0.0375792889281524, 0.017605269786539098], 'false': [nan, 0.02042865900938637], 'false,false': [nan, 0.02042865900938637], 'false,false,false': [nan, 0.02042865900938637]}
{'': [0.023529549378985357, 0.0347821951690479], 'false': [nan, 0.03478219516904786], 'false,false': [0.02267376350727373, 0.060596834429351806], 'false,false,false': [0.029658235855173652, 0.1454130822185751], 'true': [0.023828428478211188, 0.0038637641282371488], 'true,false': [0.0038637641282371488, nan]}
{'': [0.059180434267601036, 0.03065331599156064], 'false': [0.018714312499925282, 0.07698297102499481], 'false,false': [0.021616841039943532, 0.0006337273826455906], 'false,true': [0.0371123549932771, 4.894348864228801e-06], 'false,true,true': [0.0371123549932771, nan], 'false,false,false': [nan, 0.0006337273826455906]}
{'': [0.022328778600427965, 0.05178915011305223], 'false': [0.03904174303409962, 0.06928869816769219], 'false,false': [0.0, 0.06854924843376495], 'false,false,false': [nan, 0.06854924843376495], 'true': [0.02051362282468618, 0.0014870998249973163], 'true,true': [0.022301350075697637, 1.7792730217147052e-05], 'true,false': [1.8918290030622841e-06, 0.009500114104557207], 'true,false,false': [-9.251858538542971e-19, 0.017529895894888015]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 64.984
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.8075160237071076;  // std dev = 0.219, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.13228168691005776;  // std dev = 0.097, 209.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7158001069012978;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(E, F) )
%   | | | then return 0.729578274889976;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.323515357282563;  // std dev = 1.094, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.8004103758040653;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7275573023541715;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12649824690794637;  // std dev = 2.11e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13453014631448443;  // std dev = 1.988, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.07584328560697993;  // std dev = 2.445, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5447991253080193;  // std dev = 0.158, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.6498399366865635;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.35849972496430055;  // std dev = 0.993, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.618159710993845;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5632241007381245;  // std dev = 0.007, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5633514639053282;  // std dev = 0.019, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1131682195678574;  // std dev = 1.01e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.049323609711588924;  // std dev = 2.068, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.09588163630348012;  // std dev = 2.381, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.43211466929791986;  // std dev = 0.145, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | | | else return 0.12029248716632095;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.30818215897060464;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5029010338624051;  // std dev = 0.206, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6835837779892602;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6835481803664887;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.757341530001198;  // std dev = 0.241, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10229798979419512;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.1616977457418381;  // std dev = 0.158, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3135122189549665;  // std dev = 0.991, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.08099939025766545;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.35825225419186163;  // std dev = 0.043, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.414306955471889;  // std dev = 0.290, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.17827804676138057;  // std dev = 0.853, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3204691840765561;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.34794914406919136;  // std dev = 1.153, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.07633563921537027;  // std dev = 2.085, 253.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=9 */
%   | | else return -0.0932784629295458;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27161004911509046;  // std dev = 0.021, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.1980213367769066;  // std dev = 0.977, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08701954038623631;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.05411137063149464;  // std dev = 0.103, 54.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2974339410137329;  // std dev = 0.160, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14055292926000862;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.11865806402173291;  // std dev = 1.023, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.530599270692222;  // std dev = 0.413, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11246160409895696;  // std dev = 0.028, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(C, E), tweets(C, F) )
%   | | then if ( follows(A, E), tweets(A, G) )
%   | | | then return 0.19807177612946433;  // std dev = 1.440, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.2525634060147763;  // std dev = 0.250, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.36889562293324335;  // std dev = 0.180, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4714504886008573;  // std dev = 0.317, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.08065583439057489;  // std dev = 0.014, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else if ( follows(C, J) )
%   | | | then return -0.1082741507407041;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.1372844347658518;  // std dev = 0.087, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( follows(K, A), recursion_accounttype(K, B) )
%   | then return 0.2261271861449296;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07727318537119186;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(A, C), follows(C, D) )
%   | | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | | then return 0.1533575183437935;  // std dev = 0.984, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.18429246131460209;  // std dev = 0.044, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.20768007184083795;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.0779017535536764;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.0694045272770715;  // std dev = 0.037, 148.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=3 */
%   | | else return -0.03485684607713287;  // std dev = 0.171, 91.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.0021862364468373087;  // std dev = 0.808, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.018573728046064757;  // std dev = 0.968, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.05323929106651659;  // std dev = 1.142, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16262981583869474;  // std dev = 0.017, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return -0.08004812124355203;  // std dev = 1.152, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.03892784894153887;  // std dev = 0.977, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.22175121651551763;  // std dev = 0.074, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.12909007586337232;  // std dev = 0.961, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.1873404621796495;  // std dev = 0.078, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.07068834853104672;  // std dev = 0.026, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3180749525391626;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10588213911860994;  // std dev = 0.015, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.0824300165457908;  // std dev = 2.126, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   | | | else return 0.16720295689690604;  // std dev = 0.079, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.054982301320001814;  // std dev = 0.278, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06236585015181718;  // std dev = 0.041, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.009816657708171746;  // std dev = 0.128, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | else return 0.037002606172373255;  // std dev = 0.165, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1373574791007005;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.017692250947211954;  // std dev = 0.407, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.013058659940095594;  // std dev = 0.984, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.537', 'seconds']
Refined model CLL: -0.098719


******************************************
Best model found
******************************************
Results 

CLL : -0.097853 

AUC ROC : 0.994764 

AUC PR : 0.37044 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 64.984 

Total Inference Time : 17.484029293060303 

Total revision time: 92.79887084770202
Best scored revision CLL: -0.098719


Results 

CLL : -0.097853 

AUC ROC : 0.994764 

AUC PR : 0.37044 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 92.82295350837707 

Total Inference Time : 17.484029293060303 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.308
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.680545342621046;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.062214340101096215;  // std dev = 0.224, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04890305846946565;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6002081636708644;  // std dev = 0.821, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.020684313128847137;  // std dev = 1.375, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5852993093920306;  // std dev = 0.160, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6228416095109941;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5756115826843011;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03827554738707233;  // std dev = 1.871, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | | else return -0.13089267691184928;  // std dev = 0.027, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47740490618456916;  // std dev = 0.947, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12170326038940836;  // std dev = 0.052, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.10747149914534995;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11937675847623036;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33694845144161506;  // std dev = 0.267, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3212065508871216;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.634488907757811;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06941698302582834;  // std dev = 1.143, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | else return -0.11363782120112316;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0422354763388094;  // std dev = 1.270, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2555097747307825;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.428786187588142;  // std dev = 0.573, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10299060201322581;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.10162910724052818;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.262870633075122;  // std dev = 0.364, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.05621015826336784;  // std dev = 1.026, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 3.5681656499208E-4;  // std dev = 0.504, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20024347437266266;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.06234368098467414;  // std dev = 0.121, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.05041583177982252;  // std dev = 1.101, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.034219393063766736;  // std dev = 0.352, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17685780105156745;  // std dev = 0.050, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3154920759426742;  // std dev = 0.523, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09317885336676075;  // std dev = 0.034, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37996622978180744;  // std dev = 0.199, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08799885514830055;  // std dev = 0.013, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.123505905579795;  // std dev = 0.828, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.13692819842769877;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.0821229611649359;  // std dev = 0.011, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0925066197659008;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.06307482608540135;  // std dev = 0.691, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.05571940353484784;  // std dev = 0.603, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.23688628962738645;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07906967091500836;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.988', 'seconds']
Parameter learned model CLL:-0.099258 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.978, 1, 22], 'true,false,true': [2.98e-08, 32, 0], 'true,false,false': [0.331, 7, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.3, 9, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.976, 1, 20], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.224, 25, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.953, 10, 1], 'false,false,false,true': [0.821, 1, 5], 'false,false,false,false': [1.375, 20, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.16, 0, 17], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.171, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [1.871, 47, 5], 'false,false,false,false': [0.027, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.947, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.052, 45, 0], 'false,true,false,false': [0.013, 8, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.002, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.267, 0, 22], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.016, 0, 3], 'false,false,true,false': [1.143, 46, 2], 'false,false,false': [0.004, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.27, 30, 18], 'false,true': [0.0, 0, 4], 'false,false,true': [0.573, 0, 9], 'false,false,false,true': [0.017, 20, 0], 'false,false,false,false': [0.014, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.364, 0, 25], 'true,false': [1.026, 35, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.504, 9, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.022, 0, 20], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.121, 27, 2], 'false,false,false,true': [1.101, 15, 8], 'false,false,false,false': [0.352, 6, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.05, 0, 22], 'false,true,true,true': [0.523, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 42, 0], 'false,false,true': [0.199, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.013, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.828, 1, 18], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.011, 28, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.691, 4, 1], 'false,true': [0.603, 7, 7], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 8, 0]}]
{'': [0.2317964222726138, 0.19976218787158156], 'true': [0.04158790170132359, 0.024375000000000063], 'false': [0.23268698060941836, 0.09000000000000005], 'false,true': [-2.5376526277146434e-16, -1.1564823173178714e-17], 'true,false': [2.7755575615628914e-17, 0.10937500000000004], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.04535147392290183, 0.10615872681265169], 'false': [0.049975882990060005, 0.1375922490309941], 'false,false': [0.0826446280991735, 0.15168364287384623], 'false,false,false': [0.11227907752561328, 0.08220292896316882], 'false,false,true': [nan, 0.0826446280991735], 'false,true': [nan, 0.049975882990060005]}
{'': [0.0027380756556196154, 0.06967994290781285], 'false': [nan, 0.06967994290781279], 'false,false': [0.0, 0.05167975828242683], 'false,false,false': [0.06734862837364111, 4.195501114197716e-05], 'true': [0.0015016327802184857, 0.005852880837903163], 'true,false': [nan, 0.005852880837903163], 'true,true': [0.0015016327802184857, nan], 'false,false,true': [nan, 0.0]}
{'': [0.028005619895573597, 5.96769838146908e-05], 'false': [7.989103037749262e-05, 1.3411241422647517e-07], 'false,true': [nan, 7.989103037748843e-05], 'false,true,false': [5.981286421022543e-05, 2.0860219505034958e-05], 'false,false': [nan, 1.3411241422647517e-07], 'false,false,false': [nan, 1.3411241422647517e-07]}
{'': [0.0032317179650463487, 0.04896562019368234], 'false': [0.0, 0.044097823060312194], 'false,false': [0.05307328151658453, 1.6700412480426252e-05], 'false,false,true': [8.567524813455722e-05, 0.027238918491897402], 'true': [0.0032317179650463487, nan], 'false,true': [0.0, nan]}
{'': [0.03359443602963514, 0.05526470356334536], 'false': [0.0, 0.05534558337645044], 'false,false': [0.03648249254104832, 1.5118024001266454e-05], 'true': [nan, 0.03359443602963507], 'true,false': [nan, 0.03359443602963514], 'false,false,false': [1.3766448260900399e-05, 1.60739361328646e-05]}
{'': [0.04362222667434677, 0.019542242522457336], 'true': [0.005288665306851819, 0.028469833506739983], 'false': [nan, 0.01954224252245733], 'false,false': [nan, 0.019542242522457336], 'false,false,false': [nan, 0.019542242522457336]}
{'': [2.3490752444033093e-05, 0.03263763972232396], 'false': [nan, 0.03263763972232397], 'false,false': [0.014575494667732822, 0.04584547731641074], 'false,false,false': [0.052739189537116905, 0.017702982273250904], 'true': [2.3490752444033093e-05, nan]}
{'': [0.0024685955780443625, 0.02551645934554514], 'false': [0.023987338214672162, 0.02870631980758735], 'false,false': [0.013185223493918596, 8.694805535501406e-06], 'false,true': [0.04556494767937752, 2.83315190274551e-05], 'false,true,true': [0.04556494767937752, nan], 'false,false,false': [nan, 8.694805535501406e-06]}
{'': [0.030069570747675838, 0.04437929976125782], 'false': [0.025987504271047505, 0.05398515989002052], 'false,false': [0.24999999999999994, 2.3283416403143548e-07], 'true': [0.02982201732857243, 0.016244245667809666], 'true,true': [0.0360690049495936, 0.0], 'true,false': [4.078006361303962e-06, 0.07308511987319243], 'true,false,false': [0.0, 0.09540328602441749], 'false,false,false': [nan, 2.3283416403403756e-07]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,false;tweets(A, I).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.031
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7282736007412697;  // std dev = 0.139, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then return -0.12582423449211416;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.7401919213324014;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13093049624744785;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.1782457436242717;  // std dev = 1.067, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.13341615376656993;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5579115122839114;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.5892977928163324;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return -0.07687695390420063;  // std dev = 0.725, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.01700924921306093;  // std dev = 1.427, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | else return -0.11974103865894226;  // std dev = 0.057, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.41475707061339545;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5201246820465268;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1592937559055262;  // std dev = 0.626, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.4534502626465262;  // std dev = 0.160, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7071246333640845;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10863199779162411;  // std dev = 0.038, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.10088621130005158;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.11511592378715965;  // std dev = 0.079, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.32504510510716367;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.30382047283935043;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.36103304710950757;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4631077885959565;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07954401429131827;  // std dev = 1.010, 73.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.11235683702642396;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.17521805945007582;  // std dev = 0.208, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), follows(D, A) )
%   | | | then return 0.252724073048369;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.26140393907470877;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27306718405285113;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return -0.07187941609859183;  // std dev = 0.089, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else return -0.08554362438185359;  // std dev = 0.000477, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2637617138821923;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.32148608945767826;  // std dev = 0.780, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.09558145789632469;  // std dev = 0.012, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then return 0.2078971831465509;  // std dev = 0.001, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1958864758065584;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22186376642122863;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.07508629337041266;  // std dev = 0.359, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.06452273755195605;  // std dev = 0.499, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | | else return -0.16238758871923603;  // std dev = 0.360, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.05789262781299192;  // std dev = 0.909, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.08536331570713028;  // std dev = 0.033, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.1772922916138452;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.1753391338218594;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.17966828673943094;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.20863126685595765;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3122635462809988;  // std dev = 0.158, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08173803027397444;  // std dev = 0.054, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.20585782239314376;  // std dev = 0.696, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0813511332935096;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.08913481368082689;  // std dev = 0.251, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( tweets(A, F) )
%   | | then return 0.15703319839278007;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17526394983748705;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.26306108724858285;  // std dev = 0.423, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return -0.07121666762306045;  // std dev = 0.012, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.08653893783276706;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2579074122686413;  // std dev = 0.156, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return -0.08550015493448877;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07333376964426619;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1463213032441164;  // std dev = 0.038, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.0655205132458413;  // std dev = 0.003, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.07271867129002155;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.07561763657995613;  // std dev = 0.539, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1438653831015094;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07904751875611947;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.04598335487479075;  // std dev = 0.515, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.2968337144110409;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return -0.06855080084081365;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.424', 'seconds']
Refined model CLL: -0.087884


******************************************
Best model found
******************************************
Results 

CLL : -0.09909 

AUC ROC : 0.992365 

AUC PR : 0.35462 

Precision : 0.338936 

Recall : 0.960317 

F1 : 0.501035 

Total Learning Time : 5.031 

Total Inference Time : 2.9706664085388184 

Total revision time: 11.998998416900633
Best scored revision CLL: -0.087884


Results 

CLL : -0.09909 

AUC ROC : 0.992365 

AUC PR : 0.35462 

Precision : 0.338936 

Recall : 0.960317 

F1 : 0.501035 

Total Learning Time : 39.65052272224426 

Total Inference Time : 2.9706664085388184 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.483
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.0918510649004878;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.221785298735876;  // std dev = 0.481, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0449762527436918;  // std dev = 0.248, 63.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01537687070548794;  // std dev = 1.229, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7413690352725675;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.04337681943697678;  // std dev = 2.775, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.565857004391984;  // std dev = 0.237, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4325690235771587;  // std dev = 0.816, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.025968537913892045;  // std dev = 2.434, 79.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=9 */
%   | | | else return 0.0235665248511033;  // std dev = 2.467, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4897502123377622;  // std dev = 1.978, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12011103217923287;  // std dev = 0.033, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.12422137481595362;  // std dev = 0.012, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1651260161898362;  // std dev = 0.156, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3195806288857273;  // std dev = 0.296, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3051825564981406;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.572214618011364;  // std dev = 1.006, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.08596142529955089;  // std dev = 1.428, 94.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=3 */
%   | | else return -0.01003354715631964;  // std dev = 0.274, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030771842967220214;  // std dev = 1.909, 107.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24454487488914678;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5396180384680087;  // std dev = 0.763, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12139810268927934;  // std dev = 0.123, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.11619471862844967;  // std dev = 0.063, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26042312062273676;  // std dev = 1.240, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else return -0.0824206592606747;  // std dev = 1.253, 102.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04347734625491569;  // std dev = 1.310, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16618176324766643;  // std dev = 0.984, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.045569835156049336;  // std dev = 0.145, 60.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.021022907569745064;  // std dev = 1.357, 45.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=9 */
%   | | | else return 0.042993248438763426;  // std dev = 1.559, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.174663544382924;  // std dev = 0.042, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3159111618796231;  // std dev = 0.636, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09275345327321916;  // std dev = 0.063, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.456521380569942;  // std dev = 0.390, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10308116287196172;  // std dev = 0.153, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17510303750418665;  // std dev = 0.437, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.1615834692419159;  // std dev = 0.234, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08301076065897578;  // std dev = 0.009, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09480208527245432;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.00484546935396893;  // std dev = 0.728, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.005015724103260953;  // std dev = 0.746, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19423049571610596;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04058346527635933;  // std dev = 1.143, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.752', 'seconds']
Parameter learned model CLL:-0.107472 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.23e-07, 0, 45], 'true,false,true': [5.37e-08, 51, 0], 'true,false,false': [0.218, 19, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.481, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 38], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.248, 57, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.229, 14, 2], 'false,false,false,true': [0.098, 0, 5], 'false,false,false,false': [2.775, 44, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.237, 0, 33], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.816, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [2.434, 70, 9], 'false,false,false,false': [2.467, 36, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.978, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.033, 76, 0], 'false,true,false,false': [0.012, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.156, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.296, 0, 38], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.006, 1, 10], 'false,false,true,false': [1.428, 91, 3], 'false,false,false': [0.274, 25, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.909, 70, 37], 'false,true': [0.0, 0, 7], 'false,false,true': [0.763, 0, 18], 'false,false,false,true': [0.123, 34, 0], 'false,false,false,false': [0.063, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.24, 1, 48], 'true,false': [1.253, 99, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.31, 20, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.984, 1, 38], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.145, 54, 6], 'false,false,false,true': [1.357, 36, 9], 'false,false,false,false': [1.559, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.042, 0, 38], 'false,true,true,true': [0.636, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.063, 91, 0], 'false,false,true': [0.39, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.153, 31, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.437, 0, 37], 'true,true,false': [0.234, 0, 8], 'true,false,true': [0.009, 55, 0], 'true,false,false,true': [0.019, 11, 0], 'true,false,false,false': [0.728, 7, 1], 'false,true': [0.746, 19, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.143, 15, 7]}]
{'': [0.23929845422116594, 0.2175999999999995], 'true': [1.105288700071267e-15, 0.013886133703630291], 'false': [0.2040816326530613, 0.23140495867768604], 'false,true': [-2.220446049250313e-16, 2.7755575615628915e-18], 'true,false': [5.659960517696876e-17, 0.04750000000000004], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [-7.47939721852737e-16, 0.11518931980237382], 'false': [0.061514030552554964, 0.15294789058626931], 'false,false': [0.09433366255349176, 0.16570041073208053], 'false,false,false': [0.001917673237024875, 0.1399903227237686], 'false,false,true': [nan, 0.09433366255349176], 'false,true': [nan, 0.061514030552554964]}
{'': [0.020816293766203878, 0.10911375944251311], 'false': [nan, 0.10911375944251318], 'false,false': [0.0, 0.09821860879356775], 'false,false,false': [0.07499941744731986, 0.13833164336473625], 'true': [0.0017058061476992147, 0.11089147227362335], 'true,false': [nan, 0.11089147227362335], 'true,true': [0.0017058061476992147, nan], 'false,false,true': [nan, 0.0]}
{'': [0.06111318798908699, 0.0006111274458308634], 'false': [1.5576945569765236e-05, 0.0005899640948969559], 'false,false': [nan, 0.0005899640948969559], 'false,false,false': [nan, 0.0005899640948969559], 'false,true': [nan, 1.5576945569765236e-05], 'false,true,false': [1.411282700843137e-05, 8.574838508527277e-06]}
{'': [0.0022992259049780263, 0.07219612275875822], 'false': [-1.586032892321652e-17, 0.07086216734897452], 'false,false': [0.0696831892878851, 0.07509274721122142], 'false,false,true': [0.0920870531385798, 0.021679053454899233], 'true': [0.0022992259049780263, nan], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.034050492906440154, 0.08572363086970983], 'false': [0.0, 0.09069349472595852], 'false,false': [0.032319518775874766, 0.0003688236451023094], 'true': [nan, 0.03405049290644027], 'true,false': [nan, 0.034050492906440154], 'false,false,false': [0.00044707227749580673, 0.0002114307767356035]}
{'': [0.04634511469903043, 0.05538595483295473], 'false': [nan, 0.055385954832954734], 'false,false': [nan, 0.05538595483295473], 'false,false,false': [nan, 0.05538595483295473], 'true': [0.031355898137426, 0.015403094833454273]}
{'': [0.024808451316507184, 0.041635624741771037], 'false': [nan, 0.041635624741771037], 'false,false': [0.021150192989509202, 0.05645241737164888], 'false,false,false': [0.04091266622546256, 0.07591021748130128], 'true': [0.024808451316507184, nan]}
{'': [0.00180216848736354, 0.03591217315899875], 'false': [0.022195581840958347, 0.06471209372496035], 'false,false': [0.013806366313073172, 0.0007586289051485184], 'false,true': [0.03113210328658454, 4.308996040201231e-05], 'false,true,true': [0.03113210328658454, nan], 'false,false,false': [nan, 0.0007586289051485184]}
{'': [0.021482067046206043, 0.038175855628012616], 'false': [0.02061498017873067, 0.05782695174325227], 'false,false': [0.0, 0.05942904042093971], 'false,false,false': [nan, 0.0594290404209397], 'true': [0.005486752864045065, 0.007957675213636259], 'true,false': [1.5263553751648279e-06, 0.030312310937271415], 'true,false,false': [3.1946366142341064e-05, 0.06619907608713783], 'true,true': [0.005162294801867173, 0.006837086671352539]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.139
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5766162693538116;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.1254446385283914;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.036684032070032686;  // std dev = 0.931, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.15619471171805724;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.08765691276531062;  // std dev = 2.513, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462844;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.3082321225544282;  // std dev = 0.691, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5960526174841312;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.4303664367462843;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10033606520946736;  // std dev = 0.700, 48.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=1 */
%   | | | else return -0.00938010455775927;  // std dev = 1.641, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01583443172104171;  // std dev = 1.550, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return 0.15781813328313504;  // std dev = 1.914, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.42444039113888093;  // std dev = 0.071, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.16751358415830997;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.46723619270174505;  // std dev = 0.079, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6471094280217177;  // std dev = 0.135, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7553915917438134;  // std dev = 0.124, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7437939193303159;  // std dev = 0.132, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.11119895780400423;  // std dev = 0.012, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return -0.15774388785030447;  // std dev = 0.125, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.31920468014169406;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.37742261766766405;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3550639516486366;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34695993393424956;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5003061109092831;  // std dev = 0.269, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10121148772556458;  // std dev = 0.111, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.041951731329432036;  // std dev = 1.293, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return 0.12542048609893908;  // std dev = 1.463, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2582271548547808;  // std dev = 0.065, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.2963793418412542;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then return -0.05243513001059529;  // std dev = 0.113, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | else return -0.08763672572336938;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2730130145760032;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.26321819898175436;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5300764258178228;  // std dev = 0.268, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.12847453108784157;  // std dev = 0.083, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.12392860180753676;  // std dev = 0.172, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2116264893471897;  // std dev = 0.010, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.22730079654187652;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(F, E) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return -0.0703825620577018;  // std dev = 0.590, 59.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=2 */
%   | | | else return -0.04981938565079198;  // std dev = 1.259, 48.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=7 */
%   | | else return 0.028774414724331187;  // std dev = 0.468, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.41313336696055697;  // std dev = 0.120, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10698465758010418;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.22228459670885048;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.01564501745983369;  // std dev = 0.993, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(C, B), follows(E, D) )
%   | | then return 0.15184742870768492;  // std dev = 0.166, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.48267755669488266;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.14945755273226594;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.07464251568963602;  // std dev = 0.050, 93.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.2934853034451318;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10326375569719624;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.18623130050622136;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.08148826238460187;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.017772232617873522;  // std dev = 1.136, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16239177752074527;  // std dev = 0.019, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.14023822740592862;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.03463880204634462;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.32467450292316097;  // std dev = 0.107, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07582006119424191;  // std dev = 0.009, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.31216056473732307;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4853406195223138;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08869424514285774;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.13095125216372777;  // std dev = 0.093, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1296107118509786;  // std dev = 0.147, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.06517093758399761;  // std dev = 0.278, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.06562410180985723;  // std dev = 0.043, 93.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.12416667711513596;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.02255692210664931;  // std dev = 0.492, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.035502434154857675;  // std dev = 0.423, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.12416667711513596;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.012615765084660445;  // std dev = 0.639, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return -0.07310734353634814;  // std dev = 0.719, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.988', 'seconds']
Refined model CLL: -0.097268


******************************************
Best model found
******************************************
Results 

CLL : -0.098534 

AUC ROC : 0.992873 

AUC PR : 0.3495 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 8.139 

Total Inference Time : 12.870034217834473 

Total revision time: 26.82047297668457
Best scored revision CLL: -0.097268


Results 

CLL : -0.098534 

AUC ROC : 0.992873 

AUC PR : 0.3495 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 54.4719972820282 

Total Inference Time : 12.870034217834473 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.901
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8278459047964823;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.06290369647943514;  // std dev = 0.270, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.132658739021081;  // std dev = 0.446, 51.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7096243203144035;  // std dev = 1.003, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.048081612627313246;  // std dev = 0.245, 121.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024368284125757072;  // std dev = 1.557, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6400701585863897;  // std dev = 0.871, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.08406083667110976;  // std dev = 3.672, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5582807119340519;  // std dev = 0.879, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8684441705131456;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6448724778520408;  // std dev = 0.159, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6626837315189498;  // std dev = 0.138, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.565258064503806;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03210120779929282;  // std dev = 3.355, 154.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=17 */
%   | | | else return 0.09405744667512149;  // std dev = 3.045, 51.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5356461844804294;  // std dev = 1.908, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11946145643392696;  // std dev = 0.045, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.13320712400792578;  // std dev = 0.024, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15716778346596091;  // std dev = 0.196, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27731561928699017;  // std dev = 1.600, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29986447151553886;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.48873926949602964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6584431012995946;  // std dev = 0.212, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.097164530569503;  // std dev = 1.665, 165.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=4 */
%   | | else return -0.0029041913881295363;  // std dev = 0.295, 42.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02849853803314828;  // std dev = 2.559, 154.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=53 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2526017716857456;  // std dev = 0.124, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49833639476686514;  // std dev = 1.458, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12613558606668462;  // std dev = 0.137, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.12178944463908051;  // std dev = 0.118, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26750741164698466;  // std dev = 1.663, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | else return -0.0810917875371818;  // std dev = 1.547, 148.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029238027421724648;  // std dev = 1.754, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1768510288910297;  // std dev = 0.990, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else if ( follows(A, E) )
%   | | then return 0.2584770903718103;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0444074054942327;  // std dev = 0.152, 100.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01213037453569954;  // std dev = 1.606, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return 0.028830313733996586;  // std dev = 2.014, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14876884620523348;  // std dev = 0.200, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2988902914192762;  // std dev = 0.708, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09257281807601526;  // std dev = 0.092, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43801632473856766;  // std dev = 0.552, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1111228174995712;  // std dev = 0.187, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17145937954311277;  // std dev = 1.022, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.15028488714637292;  // std dev = 0.244, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08273268079657477;  // std dev = 0.035, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09424528573919237;  // std dev = 0.031, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.007480434511254002;  // std dev = 0.891, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.007762159176468444;  // std dev = 1.019, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2019733643930015;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04527913758817982;  // std dev = 1.463, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.952', 'seconds']
Parameter learned model CLL:-0.108628 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.393, 2, 64], 'true,false,true': [8.43e-08, 106, 0], 'true,false,false': [0.27, 35, 3], 'false,true,true,true': [0.949, 1, 9], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.36e-08, 27, 0], 'false,false': [0.446, 37, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.003, 1, 53], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.245, 110, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.557, 23, 3], 'false,false,false,true': [0.871, 1, 6], 'false,false,false,false': [3.672, 63, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.879, 1, 45], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.159, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.138, 0, 2], 'false,false,true,false': [2.98e-08, 0, 9], 'false,false,false,true': [3.355, 137, 17], 'false,false,false,false': [3.045, 38, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.908, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.045, 95, 0], 'false,true,false,false': [0.024, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.196, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.6, 3, 52], 'true,false': [0.0, 0, 0], 'false,true,true': [0.019, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.212, 0, 19], 'false,false,true,false': [1.665, 161, 4], 'false,false,false': [0.295, 35, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.559, 101, 53], 'false,true': [0.124, 0, 11], 'false,false,true': [1.458, 1, 29], 'false,false,false,true': [0.137, 41, 0], 'false,false,false,false': [0.118, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.663, 2, 72], 'true,false': [1.547, 143, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.754, 31, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.99, 1, 52], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 89, 11], 'false,false,false,true': [1.606, 59, 14], 'false,false,false,false': [2.014, 38, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.2, 2, 52], 'false,true,true,true': [0.708, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.092, 144, 0], 'false,false,true': [0.552, 0, 20], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.187, 51, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.022, 1, 53], 'true,true,false': [0.244, 0, 11], 'true,false,true': [0.035, 104, 0], 'true,false,false,true': [0.031, 17, 0], 'true,false,false,false': [0.891, 16, 3], 'false,true': [1.019, 39, 12], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.463, 24, 12]}]
{'': [0.2172562358276646, 0.20408163265306234], 'true': [0.02938475665748315, 0.020399305555555462], 'false': [0.20999999999999946, 0.19915417147251005], 'false,true': [0.07100591715976314, 2.05596856412066e-17], 'false,true,true': [0.08999999999999977, 1.4802973661668753e-16], 'true,false': [6.70323335622736e-17, 0.07271468144044306]}
{'': [0.01862834541886234, 0.11626026279513144], 'false': [0.05985037776570922, 0.1648949261639372], 'false,false': [0.09326424687580594, 0.1804319201636361], 'false,false,false': [0.10834224960666836, 0.16246705453739102], 'false,false,true': [nan, 0.09326424687580594], 'false,true': [nan, 0.05985037776570922]}
{'': [0.01748753906668273, 0.1144958048701577], 'false': [nan, 0.11449580487015727], 'false,false': [0.003137772096973796, 0.10312112108743748], 'false,false,false': [0.07309862293422596, 0.1818208776438196], 'true': [0.01681552403935546, 0.0097097337240125], 'true,true': [0.01681552403935546, nan], 'true,false': [0.0, 0.004187408140964521], 'false,false,true': [0.009491760593345666, 9.868649107779169e-17]}
{'': [0.038320483400204726, 0.0005228063814968748], 'false': [5.191368104485558e-05, 0.0006962423582066567], 'false,false': [nan, 0.0006962423582066567], 'false,false,false': [nan, 0.0006962423582066567], 'false,true': [nan, 5.191368104485558e-05], 'false,true,false': [2.1620666831118365e-05, 2.4921569943634772e-05]}
{'': [0.04652060315941241, 0.07343454369850731], 'false': [0.0029813855651684607, 0.07171206334740461], 'false,false': [0.0681812130625206, 0.08696594122312487], 'false,false,true': [0.0023744988807048216, 0.016802896269451164], 'true': [0.04652060315941241, nan], 'false,true': [3.646145694248259e-05, 0.0]}
{'': [0.04253730322910524, 0.0908784559938055], 'false': [0.001394560883867004, 0.09583054825999295], 'false,false': [0.07085467242036322, 0.0004080822753141387], 'true': [nan, 0.042537303229105226], 'true,false': [nan, 0.04253730322910524], 'false,false,false': [0.0004547214230031116, 0.0003507160778507268]}
{'': [0.050240862617609953, 0.06548727549909247], 'false': [nan, 0.06548727549909253], 'false,false': [nan, 0.06548727549909247], 'false,false,false': [nan, 0.06548727549909247], 'true': [0.03735194703768712, 0.016178186516957037]}
{'': [0.018285252603653053, 0.04034866307440949], 'false': [nan, 0.040348663074409596], 'false,false': [0.022978982437287104, 0.05304965655345957], 'false,false,false': [0.035314467697387955, 0.07650532353157886], 'true': [0.018506871926928906, 0.0], 'true,false': [0.0, nan]}
{'': [0.04005945966281561, 0.03542086688301149], 'false': [0.02010696745944551, 0.06580068443142556], 'false,false': [0.015231610201691836, 0.0006869622324258989], 'false,true': [0.02383708619559717, 5.92906709678126e-05], 'false,true,true': [0.02383708619559717, nan], 'false,false,false': [nan, 0.0006869622324258989]}
{'': [0.02242521750816683, 0.0371459957329394], 'false': [0.020345373022008825, 0.05754173444838337], 'false,false': [0.0, 0.05944623006729552], 'false,false,false': [nan, 0.05944623006729558], 'true': [0.017040848934195232, 0.006387654438086295], 'true,true': [0.019333697350206496, 0.0054125646511381876], 'true,false': [1.1963507340153313e-05, 0.023933374299845007], 'true,false,false': [5.505455055464645e-05, 0.04174323198637404]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 16.434
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.19148226843284558;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7222458111366195;  // std dev = 0.121, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.6194734122109542;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7398043376658275;  // std dev = 0.157, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.12831125555079734;  // std dev = 0.105, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.010832466429567618;  // std dev = 1.730, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
%   | | | else return 0.13257205873673986;  // std dev = 2.842, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5581753861509614;  // std dev = 0.112, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(E, A) )
%   | | then return 0.7169371971720525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6375843062760798;  // std dev = 0.117, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5799035947890409;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5670002096591761;  // std dev = 0.158, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11355018529439612;  // std dev = 0.072, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.02406207954572308;  // std dev = 1.710, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
%   | | | else return 0.1195602404347317;  // std dev = 2.796, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.416156850761161;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3247634111032866;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.42664340346012203;  // std dev = 0.121, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.5131663566280961;  // std dev = 0.145, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.6754491297991987;  // std dev = 0.132, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7305379847943952;  // std dev = 0.158, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.10359863585737007;  // std dev = 0.008, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else return -0.15153031237790876;  // std dev = 0.198, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3283686876932669;  // std dev = 0.060, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.35411927927862924;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23556747959417557;  // std dev = 0.283, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33006748500849714;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.40947032478557244;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.38032118480702637;  // std dev = 1.167, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.08746529184822821;  // std dev = 1.222, 157.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06692898795462654;  // std dev = 0.391, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.11180811606351285;  // std dev = 1.437, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2635258328812287;  // std dev = 0.011, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.11153106542419347;  // std dev = 1.213, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.08511645288661578;  // std dev = 2.36e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.12454378265316027;  // std dev = 0.142, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26649020021921854;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.15283108923190308;  // std dev = 0.871, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.3962096475360711;  // std dev = 1.318, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11099750084027726;  // std dev = 0.065, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.11171611413411053;  // std dev = 0.265, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(E, A), follows(C, E) )
%   | | | then return 0.16586018585913306;  // std dev = 0.983, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.07587727952393451;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.21496215721864873;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.23730904045287807;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A), follows(A, F) )
%   | then return -0.059908364638490606;  // std dev = 0.112, 92.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=8 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return -0.03933852197987671;  // std dev = 0.819, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return 0.013075881276501725;  // std dev = 1.068, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.21742649226583421;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0026424968415632755;  // std dev = 1.680, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.16098589650427866;  // std dev = 0.945, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.18354122725667676;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18482203982221043;  // std dev = 0.025, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.26839569054720425;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20841979029112062;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.16027010821186805;  // std dev = 0.923, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.07608136913090684;  // std dev = 0.059, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.030280716072763066;  // std dev = 1.472, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.02039225866191262;  // std dev = 1.534, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(F, B) )
%   | | | then return 0.1593180746051074;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.11315748431233312;  // std dev = 0.973, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.1779951459259921;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G) )
%   | | then return 0.1540501907464551;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.3115804451115335;  // std dev = 0.965, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.18898802888037058;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07112526862543132;  // std dev = 0.067, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.38784111804411625;  // std dev = 0.071, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.11409108183401322;  // std dev = 0.032, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12526300386972652;  // std dev = 0.134, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.034454576468934;  // std dev = 0.342, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | else return -0.0607754226219965;  // std dev = 0.045, 137.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.21449156128288915;  // std dev = 0.225, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08035656252159196;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.06945898616943744;  // std dev = 0.212, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.21873570521850438;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.028722997240983594;  // std dev = 0.886, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return -0.018412208087073865;  // std dev = 0.894, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.583', 'seconds']
Refined model CLL: -0.099115


******************************************
Best model found
******************************************
Results 

CLL : -0.097306 

AUC ROC : 0.993659 

AUC PR : 0.38883 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 16.434 

Total Inference Time : 10.293617010116577 

Total revision time: 35.25481554031372
Best scored revision CLL: -0.099115


Results 

CLL : -0.097306 

AUC ROC : 0.993659 

AUC PR : 0.38883 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 62.90633984565735 

Total Inference Time : 10.293617010116577 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.282
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else return -0.07935106490048774;  // std dev = 0.242, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7217167933994653;  // std dev = 0.147, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03133473104551179;  // std dev = 0.268, 142.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06456017121497078;  // std dev = 1.591, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7565732824206084;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13387566571030454;  // std dev = 4.342, 103.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5287216088944857;  // std dev = 1.431, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7147968023921435;  // std dev = 0.226, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5958415614778021;  // std dev = 0.180, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6578574918704617;  // std dev = 0.146, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.4714790664879842;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011830571839069224;  // std dev = 4.161, 204.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=28 */
%   | | | else return 0.048224518535840664;  // std dev = 3.633, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5107605248510956;  // std dev = 2.984, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12204518421248765;  // std dev = 0.047, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | | else return -0.1281797174454751;  // std dev = 0.008, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16247344531328897;  // std dev = 0.221, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2853877710584651;  // std dev = 1.529, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3149393949561993;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.49725409130095466;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6117744281989758;  // std dev = 0.958, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.10188940206693091;  // std dev = 1.815, 214.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=5 */
%   | | else return -0.03135759129062359;  // std dev = 0.260, 65.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03931810651129732;  // std dev = 2.738, 194.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=68 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25760214409707655;  // std dev = 0.131, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5185951973483648;  // std dev = 1.011, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12012477966129231;  // std dev = 0.148, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return -0.12373098627895907;  // std dev = 0.170, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2981667716433931;  // std dev = 0.954, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | else return -0.09062767133060336;  // std dev = 1.678, 237.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03714884986118679;  // std dev = 1.797, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14764390682386147;  // std dev = 1.683, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.25654450399652207;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04924624103556332;  // std dev = 0.153, 151.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0268430276269264;  // std dev = 2.256, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
%   | | | else return 0.014967345591039053;  // std dev = 2.326, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16371685800175553;  // std dev = 0.136, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3095274039214964;  // std dev = 0.744, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09214335345371176;  // std dev = 0.068, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4016130121430374;  // std dev = 0.715, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10792748816622523;  // std dev = 0.196, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18704037919649122;  // std dev = 0.611, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.0386704465260954;  // std dev = 1.196, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.0837364163870953;  // std dev = 0.018, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08876564670834619;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.004461216715275517;  // std dev = 0.915, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.041416827488650304;  // std dev = 1.130, 50.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18056813377476533;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03112415267505488;  // std dev = 1.705, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.835', 'seconds']
Parameter learned model CLL:-0.110603 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 82], 'true,false,true': [5.16e-08, 118, 0], 'true,false,false': [0.242, 45, 3], 'false,true,true,true': [0.973, 1, 18], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.71e-08, 45, 0], 'false,false': [0.463, 40, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.147, 0, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 126, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.591, 39, 3], 'false,false,false,true': [0.13, 0, 8], 'false,false,false,false': [4.342, 72, 31]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.431, 2, 55], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 2], 'true,false,false': [0.18, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.146, 0, 2], 'false,false,true,false': [0.957, 1, 11], 'false,false,false,true': [4.161, 176, 28], 'false,false,false,false': [3.633, 68, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.984, 6, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 165, 0], 'false,true,false,false': [0.008, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.221, 77, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.529, 3, 65], 'true,false': [0.0, 0, 0], 'false,true,true': [0.037, 0, 12], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.958, 1, 33], 'false,false,true,false': [1.815, 209, 5], 'false,false,false': [0.26, 57, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.738, 126, 68], 'false,true': [0.131, 0, 14], 'false,false,true': [1.011, 0, 42], 'false,false,false,true': [0.148, 64, 0], 'false,false,false,false': [0.17, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.954, 0, 99], 'true,false': [1.678, 231, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.797, 41, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.683, 3, 65], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 135, 16], 'false,false,false,true': [2.256, 80, 23], 'false,false,false,false': [2.326, 53, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.136, 1, 65], 'false,true,true,true': [0.744, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.068, 176, 0], 'false,false,true': [0.715, 0, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.196, 72, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.611, 0, 69], 'true,true,false': [1.196, 2, 13], 'true,false,true': [0.018, 134, 0], 'true,false,false,true': [0.022, 19, 0], 'true,false,false,false': [0.915, 15, 3], 'false,true': [1.13, 29, 21], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.705, 36, 16]}]
{'': [0.22526990114464177, 0.21465600000000135], 'true': [-6.932124251318051e-16, 0.017745681521265683], 'false': [0.2151926932501672, 0.2140309155766939], 'false,true': [0.04338842975206614, 4.9343245538895844e-17], 'false,true,true': [0.04986149584487499, 1.4802973661668753e-16], 'true,false': [2.258080728051166e-17, 0.058593749999999854]}
{'': [0.00032712934520302616, 0.12808681796139082], 'false': [0.07175061130250193, 0.17048850887561812], 'false,false': [0.0602890613922573, 0.19593402317919237], 'false,false,false': [0.002122817859408044, 0.18304120739278926], 'false,true': [nan, 0.07175061130250193], 'false,false,true': [nan, 0.0602890613922573]}
{'': [0.03321238871306075, 0.11498894864957059], 'false': [nan, 0.11498894864957138], 'false,false': [0.07124658928550133, 0.1059472682098106], 'false,false,false': [0.08485343268012657, 0.1534467419879361], 'false,false,true': [0.010618290995416502, 0.07638888888888902], 'true': [0.035944939609343425, 0.010605592284282706], 'true,true': [0.035944939609343425, nan], 'true,false': [0.02559500906594414, 0.004028168220669537]}
{'': [0.06848854513009242, 0.0005014623286812304], 'false': [1.687166227499402e-05, 0.0006356994593395611], 'false,false': [nan, 0.0006356994593395611], 'false,false,false': [nan, 0.0006356994593395611], 'false,true': [nan, 1.6871662274996252e-05], 'false,true,false': [1.3484955936792994e-05, 2.104323952664852e-06]}
{'': [0.034386782423814405, 0.0768056573493044], 'false': [0.002467387960256567, 0.075319010363061], 'false,false': [0.07723471520117232, 0.06741894428579973], 'false,false,true': [0.026979179924309617, 0.015393650265990792], 'true': [0.034386782423814405, nan], 'false,true': [0.00011618450797434843, 0.0]}
{'': [0.03863915972892099, 0.08175753240736908], 'false': [0.001228731005692136, 0.08503794657358385], 'false,false': [0.024350979571916332, 0.00042357817964794363], 'true': [nan, 0.03863915972892093], 'true,false': [nan, 0.03863915972892099], 'false,false,false': [0.0003433553376308903, 0.0005067744167820585]}
{'': [0.04250367511000403, 0.05381270961119995], 'false': [nan, 0.053812709611199834], 'false,false': [nan, 0.05381270961119995], 'false,false,false': [nan, 0.05381270961119995], 'true': [0.009187175323591501, 0.011882150050213114]}
{'': [0.041238496635197665, 0.0436290640292185], 'false': [nan, 0.0436290640292185], 'false,false': [0.02334505424043261, 0.06040471983337453], 'false,false,false': [0.049393689792670656, 0.07512772401455876], 'true': [0.041673070621437734, 0.0], 'true,false': [0.0, nan]}
{'': [0.018517194276998977, 0.03614529051636715], 'false': [0.0218408032189586, 0.05996020715120033], 'false,false': [0.01649173033526343, 0.0005342754609096291], 'false,true': [0.019764185015199703, 2.655113383690334e-05], 'false,true,true': [0.019764185015199703, nan], 'false,false,false': [nan, 0.0005342754609096291]}
{'': [0.024175713588783523, 0.04064171696906042], 'false': [0.02553081633423352, 0.054622409020978265], 'false,false': [0.0, 0.05589610411058838], 'false,false,false': [nan, 0.05589610411058825], 'true': [0.024694968713438268, 0.005642536238641453], 'true,true': [0.005409531040961298, 0.09532535167918188], 'true,false': [2.4200090084710763e-06, 0.0247946841673799], 'true,false,false': [2.5742281530107358e-05, 0.04647660505015853]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 22.388
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8461007423284279;  // std dev = 0.109, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.08629550934493217;  // std dev = 0.229, 54.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7245611081985999;  // std dev = 0.145, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return 0.6385653403946836;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.721898673728017;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return -0.08692903342582738;  // std dev = 0.177, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.006667430389958557;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.08674289859427564;  // std dev = 0.831, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11035105038416004;  // std dev = 4.154, 112.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.5258345548792996;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.35708455487929963;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.5732581277166738;  // std dev = 0.199, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.6095942359873633;  // std dev = 0.105, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.11613476464546033;  // std dev = 0.086, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.6495701499526347;  // std dev = 0.283, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1380596757126959;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.10768075947735743;  // std dev = 2.395, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0.16668031071169193;  // std dev = 2.293, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(D, B) )
%   | | | then return 0.4110048431421347;  // std dev = 1.002, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.2930656434146185;  // std dev = 1.458, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.43587405153935604;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7240563972426376;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.39479693618871453;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5528695857808136;  // std dev = 0.094, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6493133782473998;  // std dev = 0.187, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7534777320452306;  // std dev = 0.198, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11861536762737603;  // std dev = 0.026, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then return 0.33534537963983196;  // std dev = 0.090, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.42979447762751727;  // std dev = 0.239, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.32046790578314077;  // std dev = 0.079, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return 0.3342502973569042;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.5089007315429395;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.0913408139827779;  // std dev = 0.473, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   | | | else return -0.008121129653857539;  // std dev = 1.645, 75.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=14 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.03267567153251016;  // std dev = 1.781, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.059096797743933734;  // std dev = 2.456, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26358489777805133;  // std dev = 0.087, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3417463241348269;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08578959856108263;  // std dev = 0.030, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.061224968191009144;  // std dev = 0.134, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3048290042576626;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.26346260651488335;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2866984317776645;  // std dev = 0.270, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.46428667869869406;  // std dev = 0.991, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return -0.12493190545406183;  // std dev = 0.030, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, C) )
%   | | then if ( tweets(C, E), tweets(A, E) )
%   | | | then return 0.15426106218711938;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.2094803558928755;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21269387138918638;  // std dev = 0.018, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.23011198451606113;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then return -0.050192390429927985;  // std dev = 0.121, 211.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=19 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.28207493533560996;  // std dev = 1.209, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.12585600061629698;  // std dev = 0.603, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( tweets(A, I) )
%   | | | then return 8.949645606192006E-4;  // std dev = 0.725, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.04807594795973664;  // std dev = 1.169, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.18502038314435512;  // std dev = 0.059, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.17368842094207518;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.16534436794344856;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.26732539973497815;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.20754310227741285;  // std dev = 0.095, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.06984571208373618;  // std dev = 0.646, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.046766379410803936;  // std dev = 0.111, 188.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.003871438391591988;  // std dev = 1.501, 78.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return 0.03708722835247534;  // std dev = 1.565, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.13019648527870012;  // std dev = 0.982, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.15884309600733407;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.25068417413235045;  // std dev = 0.198, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return 0.12799836498672257;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.05905323316799679;  // std dev = 0.647, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2545698290943005;  // std dev = 0.106, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.07887645060863105;  // std dev = 0.054, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.32600336204792585;  // std dev = 0.091, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.11956043819675341;  // std dev = 0.034, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.10696581961135251;  // std dev = 0.180, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.16737185344731997;  // std dev = 0.197, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return -0.061990510122775185;  // std dev = 0.059, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11437894171163743;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0367724686574313;  // std dev = 1.080, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.005294677833894858;  // std dev = 0.653, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.11831867030885841;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.022081276104846146;  // std dev = 1.091, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return -0.004542371622387379;  // std dev = 1.020, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.231', 'seconds']
Refined model CLL: -0.102066


******************************************
Best model found
******************************************
Results 

CLL : -0.101938 

AUC ROC : 0.992704 

AUC PR : 0.340927 

Precision : 0.337838 

Recall : 0.992063 

F1 : 0.504032 

Total Learning Time : 22.388 

Total Inference Time : 16.82915997505188 

Total revision time: 50.075532836914064
Best scored revision CLL: -0.102066


Results 

CLL : -0.101938 

AUC ROC : 0.992704 

AUC PR : 0.340927 

Precision : 0.337838 

Recall : 0.992063 

F1 : 0.504032 

Total Learning Time : 77.72705714225769 

Total Inference Time : 16.82915997505188 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.829
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.05296217601159886;  // std dev = 0.285, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.1386367399775605;  // std dev = 0.449, 82.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7247582494560776;  // std dev = 0.200, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04808940590456529;  // std dev = 0.244, 208.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05650773090441652;  // std dev = 1.782, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7565217810813368;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11651494591638017;  // std dev = 5.001, 144.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5545409014309577;  // std dev = 1.073, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7276266030237212;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5960667785315101;  // std dev = 0.189, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5895953298969233;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5564129383133507;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018473765318809714;  // std dev = 4.620, 264.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=34 */
%   | | | else return 0.04970888317126242;  // std dev = 4.138, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5311041011731625;  // std dev = 2.780, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1212143546535472;  // std dev = 0.078, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | | else return -0.12753999378722555;  // std dev = 0.023, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15788144255781367;  // std dev = 0.238, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2662999120522457;  // std dev = 2.067, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return 0.46741455629273265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24789333881007547;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.501876115066532;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6145580769974177;  // std dev = 1.098, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10312008524214822;  // std dev = 1.816, 276.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=5 */
%   | | else return 0.021012885258400595;  // std dev = 0.314, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02719355665987518;  // std dev = 3.282, 239.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2562445284411776;  // std dev = 0.168, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4885301758022794;  // std dev = 1.914, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12265593385819504;  // std dev = 0.184, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.12515082970252925;  // std dev = 0.141, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2871156327755639;  // std dev = 1.531, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08657260466145147;  // std dev = 1.705, 250.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07942626699312515;  // std dev = 2.152, 69.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18975151856695288;  // std dev = 0.083, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2518346852262121;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.045363798193473054;  // std dev = 0.152, 177.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.011870070258083294;  // std dev = 2.225, 125.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=28 */
%   | | | else return 0.04817269563797677;  // std dev = 2.506, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17833843149934156;  // std dev = 0.060, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25861336252395356;  // std dev = 1.255, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09253650554034193;  // std dev = 0.130, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38458084969370676;  // std dev = 1.135, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11533563797417584;  // std dev = 0.227, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1603239709307001;  // std dev = 1.538, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.1587953055926024;  // std dev = 0.363, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08164710075074823;  // std dev = 0.021, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10060042476265679;  // std dev = 0.045, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.024767165583956634;  // std dev = 0.968, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.02016961709720802;  // std dev = 1.310, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18380374514581133;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03577511424763219;  // std dev = 1.991, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.967', 'seconds']
Parameter learned model CLL:-0.111859 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 161, 0], 'true,false,false': [0.285, 41, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 51, 0], 'false,false': [0.449, 59, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.2, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.244, 189, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.782, 43, 4], 'false,false,false,true': [0.137, 0, 8], 'false,false,false,false': [5.001, 104, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.073, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.225, 0, 3], 'true,false,false': [0.189, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.62, 230, 34], 'false,false,false,false': [4.138, 88, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.78, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.078, 188, 0], 'false,true,false,false': [0.023, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 105, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.067, 4, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.974, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.098, 1, 39], 'false,false,true,false': [1.816, 271, 5], 'false,false,false': [0.314, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.282, 157, 82], 'false,true': [0.168, 0, 22], 'false,false,true': [1.914, 2, 52], 'false,false,false,true': [0.184, 98, 0], 'false,false,false,false': [0.141, 61, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.531, 2, 121], 'true,false': [1.705, 243, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.152, 41, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.083, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 158, 19], 'false,false,false,true': [2.225, 97, 28], 'false,false,false,false': [2.506, 56, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.06, 0, 78], 'false,true,true,true': [1.255, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.13, 210, 0], 'false,false,true': [1.135, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.227, 94, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.538, 2, 85], 'true,true,false': [0.363, 0, 19], 'true,false,true': [0.021, 154, 0], 'true,false,false,true': [0.045, 32, 0], 'true,false,false,false': [0.968, 26, 4], 'false,true': [1.31, 47, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.991, 46, 21]}]
{'': [0.22667259436937415, 0.2107511569953729], 'true': [0.009433106575965852, 0.019040437364501735], 'false': [0.2192612582222983, 0.20181439619274338], 'false,true': [0.03698224852071082, 5.659960517696876e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.5170749404815803e-16, 0.08098765432098749]}
{'': [0.0004703767866304782, 0.11669555333796586], 'false': [0.05952338161579378, 0.16503595530920334], 'false,false': [0.06755648773620022, 0.18508612201846988], 'false,false,false': [0.0023463551493022594, 0.1736799760754075], 'false,false,true': [nan, 0.06755648773620022], 'false,true': [nan, 0.05952338161579378]}
{'': [0.016873664743965167, 0.11413323662195574], 'false': [nan, 0.11413323662195375], 'false,false': [0.0017976671203358578, 0.10354421373578149], 'false,false,false': [0.08085861848732222, 0.1542263359925555], 'true': [0.016942401048894513, 0.011291369111139572], 'true,true': [0.016942401048894513, nan], 'true,false': [0.016878598233507274, 0.004475797984682284], 'false,false,true': [0.005505355556027676, 2.3684757858670006e-16]}
{'': [0.04830687040767314, 0.0004690022050219506], 'false': [3.4949847670398426e-05, 0.000537751438603275], 'false,false': [nan, 0.000537751438603275], 'false,false,false': [nan, 0.000537751438603275], 'false,true': [nan, 3.4949847670390566e-05], 'false,true,false': [3.249904368660069e-05, 1.3789136470040839e-05]}
{'': [0.05261354328287346, 0.07818740113826257], 'false': [0.04594812751481158, 0.0762056165960739], 'false,false': [0.07119439331480898, 0.09858121953464571], 'false,false,true': [0.030133423757889587, 0.011947543967281673], 'true': [0.052769835881312115, 0.0], 'false,true': [0.045203985830811956, 0.0]}
{'': [0.04507248270587609, 0.08450624495661159], 'false': [0.0012869297627545841, 0.0883763500357731], 'false,false': [0.06787469682919053, 0.00033989515659155304], 'true': [nan, 0.045072482705876035], 'true,false': [nan, 0.04507248270587609], 'false,false,false': [0.00034504020201399566, 0.00032779285838549634]}
{'': [0.04494315523742973, 0.06709413260430543], 'false': [nan, 0.06709413260430552], 'false,false': [nan, 0.06709413260430543], 'false,false,false': [nan, 0.06709413260430543], 'true': [0.019064509716397428, 0.011626986227208789]}
{'': [0.00017166250649570212, 0.041319580703878374], 'false': [nan, 0.04131958070387812], 'false,false': [0.022976418437714845, 0.055655865080744424], 'false,false,false': [0.03961394694336523, 0.07852310989207664], 'true': [8.281691331990392e-05, 9.512491337843043e-05], 'true,false': [9.512491337843043e-05, nan]}
{'': [0.0036434366656607872, 0.03802316010131732], 'false': [0.02267969626878107, 0.06276979731168093], 'false,false': [0.03140281288322509, 0.0005505765441865327], 'false,true': [0.040373061965335445, 8.076154547406336e-05], 'false,true,true': [0.040373061965335445, nan], 'false,false,false': [nan, 0.0005505765441865327]}
{'': [0.02335079973740317, 0.04066638869006259], 'false': [0.02382230412195393, 0.0580406844739925], 'false,false': [0.0, 0.05913809800019239], 'false,false,false': [nan, 0.05913809800019236], 'true': [0.023545542955578282, 0.0048264024895318955], 'true,true': [0.027173069785527543, 0.006933370569542387], 'true,false': [2.931937312030689e-06, 0.016582901326832565], 'true,false,false': [6.384854286096801e-05, 0.031235129742769343]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.502
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8434430527465715;  // std dev = 0.993, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12164904469846805;  // std dev = 0.141, 198.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return 0.20814893509951235;  // std dev = 0.477, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.726565848865759;  // std dev = 0.236, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.037592597276246774;  // std dev = 0.262, 169.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=18 */
%   | | else return -0.1027615774336629;  // std dev = 0.143, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.038988877425591026;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.08061383360485169;  // std dev = 1.164, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.09720317892872465;  // std dev = 4.741, 152.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.49677895698284785;  // std dev = 1.729, 53.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=49 */
%   | | | else return 0.5500512102506953;  // std dev = 0.896, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.7309369984082289;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4442553256351734;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5638065106883259;  // std dev = 0.046, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.11684157155058228;  // std dev = 0.847, 160.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=1 */
%   | | | else return 0.010130645701695052;  // std dev = 3.170, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08119167917306506;  // std dev = 3.595, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0.1715928145563217;  // std dev = 2.826, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.4186074405367418;  // std dev = 0.849, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.5095817855021518;  // std dev = 0.228, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.351241049145587;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B), tweets(H, J) )
%   | | | then return 0.4645959511396433;  // std dev = 0.828, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.6965392540707952;  // std dev = 0.158, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.7303748329299826;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6723494491763924;  // std dev = 0.940, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(M, A) )
%   | then return -0.11575208847437891;  // std dev = 0.008, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.1587384152041694;  // std dev = 0.237, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3397926186304225;  // std dev = 0.194, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.31581668551270925;  // std dev = 0.896, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.36289204041946965;  // std dev = 0.102, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.03372252220052052;  // std dev = 0.739, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3368808597637804;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09611892502555122;  // std dev = 0.754, 130.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=1 */
%   | | | else return -0.002903088243324503;  // std dev = 2.560, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0712533440933569;  // std dev = 2.679, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
%   | | | else return 0.09664154139873934;  // std dev = 2.356, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.23314867621230037;  // std dev = 0.176, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else return 0.4070498925497539;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.03274619314844665;  // std dev = 0.199, 136.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=14 */
%   | | else return -0.07690648144152053;  // std dev = 0.117, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), follows(A, I) )
%   | | | then return 0.30304619063641924;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.024077247011137375;  // std dev = 0.903, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.26099765679096787;  // std dev = 0.012, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.486179674838917;  // std dev = 0.114, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.13138598347852057;  // std dev = 0.029, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.23160345029891635;  // std dev = 0.032, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return 0.14805706470115432;  // std dev = 0.259, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then return -0.07871447406332432;  // std dev = 0.075, 112.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5785345263083495;  // std dev = 0.025, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10657991672567604;  // std dev = 0.035, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2881425984317622;  // std dev = 1.256, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return -0.10965198048683404;  // std dev = 0.181, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07792521127591659;  // std dev = 1.368, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | | else return 0.01968670541192962;  // std dev = 1.769, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1727983457337091;  // std dev = 0.112, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.38437342994731866;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return -0.04879171631936082;  // std dev = 0.652, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19968699647465601;  // std dev = 0.170, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.04683680535956251;  // std dev = 0.846, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4556790531278549;  // std dev = 0.256, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08593063122309103;  // std dev = 0.139, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.004958318348486756;  // std dev = 2.124, 114.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=29 */
%   | | | else return 0.03379468770255604;  // std dev = 1.749, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.15201952443457117;  // std dev = 1.022, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.0504217604796563;  // std dev = 0.637, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.28800013675197367;  // std dev = 0.216, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.006432190565012985;  // std dev = 0.352, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.18063681261502404;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.24567816387917518;  // std dev = 0.105, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07997925115213403;  // std dev = 0.134, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3603376237612557;  // std dev = 0.071, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.1260289249807324;  // std dev = 0.022, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11531120385841516;  // std dev = 0.154, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else return 0.26998131326500846;  // std dev = 0.055, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.07105227454671567;  // std dev = 0.067, 227.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.16176847869129096;  // std dev = 0.967, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.10154252738211857;  // std dev = 0.842, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else return 0.035539607713347916;  // std dev = 0.165, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.16746722926510105;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.020036496028107444;  // std dev = 1.214, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return 7.860835689346238E-4;  // std dev = 1.300, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.063', 'seconds']
Refined model CLL: -0.106659


******************************************
Best model found
******************************************
Results 

CLL : -0.103875 

AUC ROC : 0.993571 

AUC PR : 0.399538 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 12.502 

Total Inference Time : 11.621062278747559 

Total revision time: 36.54110732650757
Best scored revision CLL: -0.106659


Results 

CLL : -0.103875 

AUC ROC : 0.993571 

AUC PR : 0.399538 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 64.1926316318512 

Total Inference Time : 11.621062278747559 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.099
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.0581489350995122;  // std dev = 0.400, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.036505896345302345;  // std dev = 0.259, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.1490779674864458;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.11049197834856082;  // std dev = 1.331, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5139372189047194;  // std dev = 0.998, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0389139343140979;  // std dev = 1.583, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | | | else return 0.09900288386837149;  // std dev = 1.118, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3815307847917651;  // std dev = 1.853, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11542220545458871;  // std dev = 0.019, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.13105012457610773;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14153542069241495;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.34743179355824644;  // std dev = 0.178, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6722972643499161;  // std dev = 0.104, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08737655584976428;  // std dev = 1.024, 58.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=2 */
%   | | else return -0.09782469139419182;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038415526384897106;  // std dev = 1.570, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6325826546917358;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1153957576918067;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.12521636797020852;  // std dev = 0.078, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3013535261309695;  // std dev = 0.402, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.08031299148855883;  // std dev = 0.821, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07982898331179177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20419297920470822;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.037505146932347355;  // std dev = 0.157, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.04897524178414843;  // std dev = 0.733, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.03795221286082478;  // std dev = 0.467, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13245263027490314;  // std dev = 0.224, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.4050714972891358;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09110592158388477;  // std dev = 0.045, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46152110525628065;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10615483532618183;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18439409851946717;  // std dev = 0.295, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.5459442474374261;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08641484126927834;  // std dev = 0.031, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07131701057112143;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.07505685459258873;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, G) )
%   | then return 0.14689130071182915;  // std dev = 0.468, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0279452128804366;  // std dev = 0.359, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.739', 'seconds']
Parameter learned model CLL:-0.103004 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [5.96e-08, 0, 22], 'true,false,true': [2.36e-08, 27, 0], 'true,false,false': [0.0, 2, 0], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.4, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 34, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [1.331, 8, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true,true': [0.998, 1, 19], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.583, 36, 4], 'false,false,false,false': [1.118, 6, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.853, 4, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.019, 27, 0], 'false,true,false,false': [0.009, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.056, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true,true': [0.178, 0, 19], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.104, 0, 4], 'false,false,true,false': [1.024, 56, 2], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.57, 42, 22], 'false,true': [0.0, 0, 0], 'false,false,true': [0.019, 0, 3], 'false,false,false,true': [0.04, 3, 0], 'false,false,false,false': [0.078, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.402, 0, 23], 'true,false': [0.821, 47, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.0, 0, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 29, 4], 'false,false,false,true': [0.733, 7, 2], 'false,false,false,false': [0.467, 5, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.224, 1, 19], 'false,true,true,true': [0.027, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.045, 48, 0], 'false,false,true': [0.079, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.035, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.295, 0, 22], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.031, 51, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.468, 2, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.359, 4, 1]}]
{'': [0.24529027297193487, 0.17751479289940816], 'true': [1.6148698540002277e-16, 2.2970131543968756e-17], 'false': [0.18750000000000003, 0.16000000000000003], 'false,true': [0.0, -6.938893903907228e-18], 'true,false': [2.05596856412066e-17, 0.0], 'false,true,true': [0.0, nan]}
{'': [1.9737298215558337e-16, 0.08486939890451799], 'false': [0.06723584881943498, 0.1231222688155271], 'false,false': [0.0, 0.15268128238864706], 'false,false,false': [0.0, 0.16094668590436748], 'false,true': [nan, 0.06723584881943498], 'false,false,true': [nan, 0.0]}
{'': [0.04975278604518283, 0.08089953266654822], 'false': [nan, 0.08089953266654822], 'false,false': [nan, 0.08089953266654822], 'false,false,false': [0.06266241288557386, 0.15623425762343984], 'true': [0.04975278604518283, nan], 'true,true': [0.04975278604518283, nan]}
{'': [0.11836598677508979, 0.00020792336953904625], 'false': [5.328528096181196e-05, 0.0002898234538583268], 'false,false': [nan, 0.0002898234538583268], 'false,false,false': [nan, 0.0002898234538583268], 'false,true': [nan, 5.328528096181196e-05], 'false,true,false': [1.3711362290907763e-05, 1.1978711814311649e-05]}
{'': [0.001668081643141677, 0.051150136421501256], 'false': [nan, 0.05115013642150109], 'false,false': [0.05191902093497828, 0.0], 'false,false,true': [0.002713166409730794, 0.018079991814791637], 'true': [0.001668081643141677, nan]}
{'': [0.038514300776161206, 0.09659793381536656], 'false': [nan, 0.09659793381536656], 'false,false': [0.00011525256218458679, 0.0007241281433934897], 'true': [nan, 0.03851430077616122], 'true,false': [nan, 0.038514300776161206], 'false,false,false': [0.0005467225965715324, 0.0007643522090225591]}
{'': [0.0432701712317298, 0.0], 'true': [0.0070197452078523655, 0.01375241891551729], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [-3.0839528461809905e-17, 0.033888272787905155], 'false': [nan, 0.03388827278790517], 'false,false': [0.024744138350398563, 0.052167087904529404], 'false,false,false': [0.059722468834771184, 0.03630018708653444], 'true': [-3.0839528461809905e-17, nan]}
{'': [0.05014105522766099, 0.02417635398949821], 'false': [0.01368412270085248, 0.061043860282519534], 'false,false': [0.002073383375069867, 0.00013669253929022974], 'false,true': [0.00024307421717817412, 4.2304054641359674e-05], 'false,true,true': [0.00024307421717817412, nan], 'false,false,false': [nan, 0.00013669253929022974]}
{'': [0.01988771630231938, 0.046181663383498335], 'false': [0.05465889287809351, 0.025814188016667277], 'false,false': [nan, 0.025814188016667277], 'false,false,false': [nan, 0.025814188016667277], 'true': [0.025973305371271356, 2.4360091817463487e-05], 'true,true': [0.0039628623532637075, 0.0], 'true,false': [1.8575340537143126e-05, 3.4966083262265996e-06], 'true,false,false': [0.0, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;recursion_accounttype(E, B).;true;true
5;false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.521
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7327299667445832;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.04338697635744712;  // std dev = 0.261, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | else return -0.060450942317672465;  // std dev = 0.225, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24109628872282446;  // std dev = 1.187, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.5685132372860081;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.6084215081932913;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4040520610480189;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.12438211588479535;  // std dev = 0.025, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(F, E), follows(A, F) )
%   | | | then return 0.12178354432026677;  // std dev = 1.015, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.11865026928666365;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then return 0.17472201019526695;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.032455666838675304;  // std dev = 1.164, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.20303677060345557;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.4348376115619027;  // std dev = 0.075, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.42409114878570975;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23527014167603094;  // std dev = 0.933, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.6666229482539998;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6934661004360584;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, A) )
%   | | | then return -0.11384695676623717;  // std dev = 0.052, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.10067343258300619;  // std dev = 0.000424, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12240539233708654;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1778433364427947;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3317519086897363;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.4338196117511058;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E) )
%   | then if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09766283904748314;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.027773473913013297;  // std dev = 0.825, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.010155973908218003;  // std dev = 0.969, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.0019390946483964812;  // std dev = 0.745, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return -0.09175841122819384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2581893621847241;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2512319633837502;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3354484960985734;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.052226037900459654;  // std dev = 0.165, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return 0.027139165996792426;  // std dev = 0.608, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.5242997061354081;  // std dev = 0.163, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.15615800439246444;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0869416406080477;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.15176707988123872;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.12864883192246832;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.21373159403853184;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27166079735208315;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10426809756186277;  // std dev = 0.609, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.07448164161517509;  // std dev = 1.024, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03280920765764104;  // std dev = 0.576, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.0013876443758063517;  // std dev = 0.555, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.07791267354003528;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.12117832697954682;  // std dev = 0.248, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.21547853800967248;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.07744177774051253;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.0822740653439221;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.4705407264437225;  // std dev = 0.240, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12251995609338404;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.08697585746891327;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.05332689027338828;  // std dev = 0.624, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.01719288111997145;  // std dev = 0.572, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.10831213636261233;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.1812994800207272;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.42286838394510556;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.08025126381151398;  // std dev = 0.093, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.09969977643599921;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.40345876627186583;  // std dev = 0.163, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1423689939804226;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15583837771405953;  // std dev = 0.030, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.32435135147048005;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07787763557452142;  // std dev = 0.096, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.09192931139376787;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.062024689800107446;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.08028115924170283;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, I), follows(I, J) )
%   | then return -0.013745085087041286;  // std dev = 0.504, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.06991913003377209;  // std dev = 0.367, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.504', 'seconds']
Refined model CLL: -0.103642


******************************************
Best model found
******************************************
Results 

CLL : -0.103937 

AUC ROC : 0.99529 

AUC PR : 0.427374 

Precision : 0.376045 

Recall : 0.865385 

F1 : 0.524272 

Total Learning Time : 4.521 

Total Inference Time : 3.2645537853240967 

Total revision time: 11.12770664215088
Best scored revision CLL: -0.103004


Results 

CLL : -0.103937 

AUC ROC : 0.99529 

AUC PR : 0.427374 

Precision : 0.376045 

Recall : 0.865385 

F1 : 0.524272 

Total Learning Time : 38.77923094749451 

Total Inference Time : 3.2645537853240967 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.483
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8354216623722391;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.10814893509951223;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7240375275582283;  // std dev = 8.43e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.023506778597997137;  // std dev = 0.276, 75.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07586879517892003;  // std dev = 2.125, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5159230319215308;  // std dev = 1.297, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return 0.7287095310740985;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5598469191003145;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5598469191003145;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0229724075416307;  // std dev = 2.367, 76.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=9 */
%   | | | else return 0.06965361909392247;  // std dev = 1.678, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5009319705560934;  // std dev = 1.465, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11923986493736059;  // std dev = 0.034, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return -0.1305954443910016;  // std dev = 1.05e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14157603826429704;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24806430247789335;  // std dev = 1.535, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | else return 0.4399028397360718;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30571312454095045;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6447389794447113;  // std dev = 0.156, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08420325754272937;  // std dev = 1.472, 98.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=4 */
%   | | else return -0.09889991308287513;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.045415837811426;  // std dev = 2.104, 110.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=40 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24490906559098757;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6053369889270458;  // std dev = 0.227, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10802583343055834;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.1145621360014026;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27625074700390145;  // std dev = 1.221, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return -0.07913118955408734;  // std dev = 1.210, 93.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0037378047155602195;  // std dev = 0.411, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17708717828100723;  // std dev = 0.985, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05206551096341964;  // std dev = 0.140, 89.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.016995831695234442;  // std dev = 0.974, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return -0.010886971907358378;  // std dev = 1.035, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10886332797283112;  // std dev = 0.284, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3068870375789702;  // std dev = 0.348, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09261055202795519;  // std dev = 0.056, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44802324761728124;  // std dev = 0.308, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10551968945073988;  // std dev = 0.061, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17301877905104524;  // std dev = 1.108, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.13486954994616585;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.0874839574483299;  // std dev = 0.026, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07386105328191266;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07536897959630198;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then return 0.010043957294069443;  // std dev = 0.849, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009337185491619611;  // std dev = 0.752, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.155', 'seconds']
Parameter learned model CLL:-0.104661 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.989, 1, 43], 'true,false,true': [7.6e-08, 80, 0], 'true,false,false': [0.0, 6, 0], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.433, 9, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [8.43e-08, 0, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.276, 66, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.125, 22, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [1.297, 2, 32], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.367, 67, 9], 'false,false,false,false': [1.678, 14, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.465, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 60, 0], 'false,true,false,false': [1.05e-08, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.067, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.535, 3, 32], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.156, 0, 9], 'false,false,true,false': [1.472, 94, 4], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.104, 70, 40], 'false,true': [0.0, 0, 3], 'false,false,true': [0.227, 0, 7], 'false,false,false,true': [0.063, 12, 0], 'false,false,false,false': [0.079, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.221, 1, 43], 'true,false': [1.21, 89, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.411, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.985, 1, 34], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 80, 9], 'false,false,false,true': [0.974, 26, 4], 'false,false,false,false': [1.035, 10, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.284, 3, 33], 'false,true,true,true': [0.348, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 78, 0], 'false,false,true': [0.308, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.061, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.108, 1, 40], 'true,true,false': [2.63e-09, 0, 3], 'true,false,true': [0.026, 72, 0], 'true,false,false,true': [1.86e-09, 3, 0], 'true,false,false,false': [0.016, 5, 0], 'false,true': [0.849, 10, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.752, 9, 3]}]
{'': [0.22136094674556323, 0.18311533888228312], 'true': [0.022210743801654168, 7.229359230117299e-17], 'false': [0.1799307958477507, 0.1874999999999999], 'false,true': [0.15999999999999986, -1.1564823173178714e-17], 'false,true,true': [0.0, 0.0], 'true,false': [7.216449660063518e-17, -6.938893903907228e-18]}
{'': [2.0898315757650005e-16, 0.09221738024667352], 'false': [0.07620306677271729, 0.12098078392115305], 'false,false': [2.523234146875356e-18, 0.15572509467526463], 'false,false,false': [nan, 0.15572509467526463], 'false,true': [nan, 0.07620306677271729], 'false,false,true': [nan, 2.523234146875356e-18]}
{'': [0.049320185377158154, 0.09970125861982049], 'false': [nan, 0.09970125861982068], 'false,false': [0.0, 0.0909104714778019], 'false,false,false': [0.07373019790433032, 0.15651272198631483], 'true': [0.049320185377158154, nan], 'true,true': [0.04947711922981872, 0.0], 'false,false,true': [0.0, -3.700743415417188e-17]}
{'': [0.04207633862386623, 0.0001324078925162438], 'false': [3.5625142787963547e-05, 0.0003476393449081512], 'false,false': [nan, 0.0003476393449081512], 'false,false,false': [nan, 0.0003476393449081512], 'false,true': [nan, 3.5625142787963547e-05], 'false,true,false': [1.8741591539380337e-05, 7.401486830834377e-18]}
{'': [0.06644158847771565, 0.058775181328843296], 'true': [0.06731764112215233, 0.0], 'false': [0.0, 0.05707221940070052], 'false,false': [0.06142443584392464, -3.0839528461809902e-18], 'false,false,true': [0.002692692297612117, 0.022124606050373835], 'false,true': [0.0, nan]}
{'': [0.04024029791607291, 0.08672398830246059], 'false': [-9.25185853854297e-18, 0.09178267849205907], 'false,false': [0.00738076802375628, 0.0004347518402001126], 'true': [nan, 0.04024029791607275], 'true,false': [nan, 0.04024029791607291], 'false,false,false': [0.0003284174032736435, 0.0005197246514777575]}
{'': [0.04909815870022398, 0.016928063541960147], 'true': [0.033883958240820716, 0.01573395302766621], 'false': [nan, 0.016928063541960147], 'false,false': [nan, 0.016928063541960147], 'false,false,false': [nan, 0.016928063541960147]}
{'': [0.0277145692197973, 0.028886807233516477], 'false': [nan, 0.02888680723351645], 'false,false': [0.01969414253019684, 0.04699460672137929], 'false,false,false': [0.031642872095270815, 0.08239565069668481], 'true': [0.0277145692197973, nan]}
{'': [0.0806471374443147, 0.030619547911230813], 'false': [0.017489555137349046, 0.07278085321721847], 'false,false': [0.013540943540605406, 0.00026421366289462733], 'false,true': [0.012129224464796872, 4.060382506545843e-05], 'false,true,true': [0.012129224464796872, nan], 'false,false,false': [nan, 0.00026421366289462733]}
{'': [0.025035721015546786, 0.04952119122287214], 'false': [0.05152953171618555, 0.04717785833826307], 'false,false': [nan, 0.04717785833826307], 'false,false,false': [nan, 0.04717785833826307], 'true': [0.02801732000881885, 2.5877231508819598e-05], 'true,true': [0.029968138472435582, 2.3129646346357427e-18], 'true,false': [9.161047511994153e-06, 3.1608451478238285e-05], 'true,false,false': [1.1564823173178713e-18, 4.972083170157182e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(C, E).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.016
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.050941973991396876;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.725031709739562;  // std dev = 0.031, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.004742059851341995;  // std dev = 0.296, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.02961572425643304;  // std dev = 1.449, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return 0.14821171828437937;  // std dev = 1.532, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5617722558850395;  // std dev = 0.035, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.2813727323583362;  // std dev = 0.881, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7204295120324534;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5539934820219574;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5539934820219574;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5828769492939795;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11527403089634418;  // std dev = 0.048, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.048091309934594074;  // std dev = 1.548, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.3112114103118824;  // std dev = 1.199, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.38048935710533466;  // std dev = 0.976, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.4147521865141108;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.423241505782781;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6022243137272051;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.726034648162212;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7455838312168126;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.1046287308235887;  // std dev = 0.005, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( tweets(A, I) )
%   | | then return -0.14337729599340385;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.24060347472049992;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.33502423020601463;  // std dev = 0.013, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.3468579433884105;  // std dev = 0.069, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4070773583290128;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32603120821861925;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.06657882098242895;  // std dev = 1.189, 72.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=6 */
%   | | | else return 0.07819732518003425;  // std dev = 1.571, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | else return -0.09218874260431702;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26843061765998744;  // std dev = 0.032, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.32801823984543077;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08676600155965598;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.04027851051530705;  // std dev = 0.154, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.01043772993324843;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.542606422581387;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5644909277170476;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12814449187847257;  // std dev = 0.198, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.13478120854140488;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.22022476512875944;  // std dev = 0.017, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.03546640618635009;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return -0.17086989497735192;  // std dev = 0.963, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3233471372924127;  // std dev = 0.254, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.08253670287506938;  // std dev = 0.045, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.12205175019487126;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.42595468994992963;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14711686156798962;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07487087104992632;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.18215525518089729;  // std dev = 0.008, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.29787494376034696;  // std dev = 0.145, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return -0.04714212198744083;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.046627483298116466;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07373428017311898;  // std dev = 0.002, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), follows(A, I) )
%   | | | then return -0.10160471226588434;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.005550755402174019;  // std dev = 0.865, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.06763161868810827;  // std dev = 0.542, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.030863042800064792;  // std dev = 0.477, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.10464332514336555;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.1555412173196298;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.24123161487665937;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.03886603749748261;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.24874976904101292;  // std dev = 0.158, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07099219001822155;  // std dev = 0.006, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.30613621702609406;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3451637904205427;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12054853612733431;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1183200275116581;  // std dev = 0.949, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.21511980728115507;  // std dev = 0.128, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17225425276587913;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.066092574736221;  // std dev = 0.005, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2453939492671442;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.08609055268217139;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.10474844846551773;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.030056642989535025;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.07612889698401745;  // std dev = 0.133, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '46.537', 'seconds']
Refined model CLL: -0.097936


******************************************
Best model found
******************************************
Results 

CLL : -0.104009 

AUC ROC : 0.994425 

AUC PR : 0.352177 

Precision : 0.33871 

Recall : 0.942308 

F1 : 0.498305 

Total Learning Time : 8.016 

Total Inference Time : 13.640377283096313 

Total revision time: 26.83501808547974
Best scored revision CLL: -0.097936


Results 

CLL : -0.104009 

AUC ROC : 0.994425 

AUC PR : 0.352177 

Precision : 0.33871 

Recall : 0.942308 

F1 : 0.498305 

Total Learning Time : 54.48654239082337 

Total Inference Time : 13.640377283096313 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.899
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.15226658215833588;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6643566450658859;  // std dev = 1.689, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.012804958046915399;  // std dev = 0.288, 128.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06305886969720072;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.28881117365523334;  // std dev = 0.609, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.10003092949644601;  // std dev = 2.510, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5708302801893691;  // std dev = 0.913, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.7252249338889758;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8203818551592088;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.657695167884817;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5728203363461895;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5728203363461895;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.034991725446729356;  // std dev = 2.976, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | | else return 0.012202943816654993;  // std dev = 2.280, 42.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49913084543712327;  // std dev = 2.180, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12113661702633263;  // std dev = 0.032, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return -0.12537860747311805;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1500357621805969;  // std dev = 0.092, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27662836528944446;  // std dev = 1.781, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | else return -0.020010440548241054;  // std dev = 0.954, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3146252014457869;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6336139715392792;  // std dev = 0.164, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08158269968663405;  // std dev = 1.879, 154.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=6 */
%   | | else return -0.11095350674861207;  // std dev = 1.86e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018821018146420638;  // std dev = 2.802, 189.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2829438710040312;  // std dev = 0.207, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.588871712884368;  // std dev = 0.453, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11964531823764063;  // std dev = 0.072, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.11861501820923397;  // std dev = 0.114, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28351864028790147;  // std dev = 1.649, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else return -0.07978937423121087;  // std dev = 1.584, 160.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 9.629059272061331E-4;  // std dev = 0.541, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20328515153773305;  // std dev = 0.045, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(A, E) )
%   | | then return 0.3388394392551126;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03396793164381097;  // std dev = 0.174, 120.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010785289106470789;  // std dev = 1.119, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return 0.20982111090702182;  // std dev = 1.091, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20280122886932647;  // std dev = 0.065, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30146488945362754;  // std dev = 0.507, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09244901546988495;  // std dev = 0.025, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4431807020557203;  // std dev = 0.423, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11652610176000025;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19743599662184502;  // std dev = 0.616, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return -0.034491951837957203;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08544025687036844;  // std dev = 0.014, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.082195926102493;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09924627138256978;  // std dev = 0.361, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.04958666004935855;  // std dev = 1.352, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08543325886107979;  // std dev = 0.935, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.707', 'seconds']
Parameter learned model CLL:-0.112004 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 62], 'true,false,true': [8.94e-08, 99, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.456, 12, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.689, 3, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.288, 111, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.964, 13, 1], 'false,false,false,true': [0.609, 1, 1], 'false,false,false,false': [2.51, 28, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 42], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.074, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [1.49e-08, 0, 5], 'false,false,false,true': [2.976, 115, 14], 'false,false,false,false': [2.28, 35, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.18, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 105, 0], 'false,true,false,false': [7.45e-09, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.092, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.781, 3, 44], 'true,false': [0.954, 2, 2], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.164, 0, 15], 'false,false,true,false': [1.879, 148, 6], 'false,false,false': [1.86e-09, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.802, 133, 56], 'false,true': [0.207, 0, 7], 'false,false,true': [0.453, 0, 12], 'false,false,false,true': [0.072, 18, 0], 'false,false,false,false': [0.114, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.649, 2, 64], 'true,false': [1.584, 154, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.541, 11, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.045, 0, 45], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.174, 103, 17], 'false,false,false,true': [1.119, 32, 7], 'false,false,false,false': [1.091, 5, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.065, 0, 46], 'false,true,true,true': [0.507, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.025, 104, 0], 'false,false,true': [0.423, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.111, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.616, 0, 57], 'true,true,false': [0.913, 1, 5], 'true,false,true': [0.014, 105, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.361, 2, 2], 'false,true': [1.352, 16, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.935, 7, 5]}]
{'': [0.2251136721095829, 0.21551020408163216], 'true': [0.015621063240110127, 0.015868886576482794], 'false': [0.22222222222222232, 0.20761245674740467], 'false,true': [-1.4802973661668753e-16, -1.1564823173178714e-17], 'true,false': [8.074349270001139e-17, 0.07360000000000004], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.05824095296825809, 0.10334844227245828], 'false': [0.0828432021003263, 0.14772435059367373], 'false,false': [0.06632653061224489, 0.1684964270188217], 'false,false,false': [0.18546996371782487, 0.16582118395279952], 'false,true': [nan, 0.0828432021003263], 'false,false,true': [nan, 0.06632653061224489]}
{'': [0.020938881172701474, 0.09410106561410884], 'false': [nan, 0.09410106561410889], 'false,false': [1.6653345369377348e-16, 0.08261613613111611], 'false,false,false': [0.0686629798758289, 0.12379198728897058], 'true': [0.01949271413845458, 0.007705289137729239], 'true,true': [0.019404266956201892, 0.0], 'true,false': [0.0027356143011553202, 0.0], 'false,false,true': [0.0, 4.4408920985006264e-17]}
{'': [0.060946859572833835, 0.00015074226768947368], 'false': [1.0722467271271865e-05, 0.00046924034237389817], 'false,false': [nan, 0.00046924034237389817], 'false,false,false': [nan, 0.00046924034237389817], 'false,true': [nan, 1.0722467271271865e-05], 'false,true,false': [9.814958178701514e-06, 2.220446049250313e-18]}
{'': [0.08640039590338992, 0.061796036243626666], 'true': [0.06750389794511921, 0.22734120155907184], 'false': [-1.3877787807814457e-17, 0.0596764116268412], 'false,false': [0.0624185477931846, 3.0839528461809902e-18], 'false,false,true': [0.0017871064734881277, 0.02292424211175251], 'false,true': [-1.3877787807814457e-17, nan]}
{'': [0.041549257184750825, 0.0813183073777557], 'false': [0.006116910537499187, 0.08284467321818344], 'false,false': [0.017113136539472995, 0.0003704244787207712], 'true': [nan, 0.041549257184750804], 'true,false': [nan, 0.041549257184750825], 'false,false,false': [0.0002884839973621187, 0.0004176128772931727]}
{'': [0.05043034982314513, 0.018302869690688155], 'true': [0.041201656121308786, 0.01569064134987764], 'false': [nan, 0.018302869690688155], 'false,false': [nan, 0.018302869690688155], 'false,false,false': [nan, 0.018302869690688155]}
{'': [0.0004354743719529331, 0.03920319055503758], 'false': [nan, 0.03920319055503737], 'false,false': [0.0302862932616989, 0.05773741244654567], 'false,false,false': [0.03210516637351515, 0.11896806671606683], 'true': [4.569582111928483e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.004243986141495633, 0.03528685803322476], 'false': [0.022358118672518464, 0.08284883763826134], 'false,false': [0.017918177664506096, 0.0008272617923877364], 'false,true': [0.013506230260757928, 6.224534144098797e-06], 'false,true,true': [0.013506230260757928, nan], 'false,false,false': [nan, 0.0008272617923877364]}
{'': [0.024701106238670084, 0.0836800658304004], 'false': [0.08313782200917098, 0.07287805223627798], 'false,false': [nan, 0.07287805223627798], 'false,false,false': [nan, 0.07287805223627798], 'true': [0.023881718063289047, 0.0022806486329938684], 'true,true': [0.006652788341001917, 0.1388888888888889], 'true,false': [1.9044530667737074e-06, 0.020958507181144857], 'true,false,false': [-1.1564823173178713e-18, 0.03264350533593702]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 19.691
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.19e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.7748156017661789;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7233366780137804;  // std dev = 0.071, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.7330692916126208;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.0907174385511524;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7224748329788929;  // std dev = 0.021, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1254446385283913;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.19952384252520317;  // std dev = 1.482, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.14914136389512128;  // std dev = 1.852, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5341556309940189;  // std dev = 0.152, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.5725138670185754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.2729583816506452;  // std dev = 0.883, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7008048923894099;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5569724956470054;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5583487230575127;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11231637819360621;  // std dev = 8.82e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14616889661494095;  // std dev = 1.482, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.10911776432445751;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.34337393028197793;  // std dev = 1.359, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.4231378332390437;  // std dev = 0.056, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.18517003891261194;  // std dev = 0.764, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then return 0.6186671400375234;  // std dev = 0.112, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7974091182984185;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1015963294878363;  // std dev = 2.11e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.18448805207355942;  // std dev = 0.074, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2967153480365318;  // std dev = 0.994, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.32441964423765957;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.34537229333126257;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.440619128922765;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3244163070355456;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15163320359390361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.38634013303447834;  // std dev = 0.440, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07561108568792206;  // std dev = 1.642, 154.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=6 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.23609148324541648;  // std dev = 0.188, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return 0.26729113290550605;  // std dev = 0.012, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.055396036439239175;  // std dev = 0.938, 95.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=9 */
%   | | | else return -0.004700878276244713;  // std dev = 0.283, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.03922268573271858;  // std dev = 0.119, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.16058016747422857;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.26680579587836856;  // std dev = 1.080, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.586467849025407;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12658107519707115;  // std dev = 0.030, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.23171713376146447;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0718826590680711;  // std dev = 0.921, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2247526632402832;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.24413173845247654;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A) )
%   | then return -0.04842201423857019;  // std dev = 0.120, 155.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=18 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3720344410795483;  // std dev = 0.205, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1276363284022604;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0893043567050641;  // std dev = 0.643, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.020574287851584935;  // std dev = 0.996, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.19386429996269022;  // std dev = 0.011, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.04449438614455311;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.23413485755218466;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), follows(H, A) )
%   | | then return 0.24658351523296443;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20710847327930337;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.179404536974205;  // std dev = 0.947, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.07824678255919468;  // std dev = 0.022, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.00954682719338012;  // std dev = 0.841, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.13041688646991842;  // std dev = 1.013, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.1666970180455296;  // std dev = 0.009, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.2158779353644412;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.19505650728400126;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2286121038705614;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07285564443465332;  // std dev = 0.002, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.30761194262560526;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41621992227165755;  // std dev = 0.159, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12276252951135014;  // std dev = 0.068, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.14950677004902244;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.08579152155379532;  // std dev = 1.655, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.1584492475184472;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16167597323184907;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06424935203143314;  // std dev = 0.033, 145.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.2208449791244508;  // std dev = 0.125, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10666417813545226;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( follows(A, K) )
%   | | | then return -0.029565213744675564;  // std dev = 0.365, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07477827774668402;  // std dev = 0.391, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0.011849675612933083;  // std dev = 0.241, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.463', 'seconds']
Refined model CLL: -0.102808


******************************************
Best model found
******************************************
Results 

CLL : -0.104103 

AUC ROC : 0.994089 

AUC PR : 0.350648 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 19.691 

Total Inference Time : 8.76522159576416 

Total revision time: 35.496692504882816
Best scored revision CLL: -0.102808


Results 

CLL : -0.104103 

AUC ROC : 0.994089 

AUC PR : 0.350648 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 63.148216810226444 

Total Inference Time : 8.76522159576416 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.098
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460237;  // std dev = 1.398, 86.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6832939447230081;  // std dev = 1.704, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03045967158129463;  // std dev = 0.268, 161.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09826220807654362;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.0917536245828761;  // std dev = 2.888, 51.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5835665127736027;  // std dev = 0.343, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.7301860171291021;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8196123275945594;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5699906327406855;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4033239660740188;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.025114992621194477;  // std dev = 3.170, 136.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=16 */
%   | | | else return 0.04338871214849902;  // std dev = 2.532, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5127580179614173;  // std dev = 1.792, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11983004190110055;  // std dev = 0.009, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | | else return -0.12712135199943578;  // std dev = 0.004, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16117077558300333;  // std dev = 0.160, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32621473309848226;  // std dev = 0.486, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else return 0.4491815026658662;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3251244703206853;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6279312609806318;  // std dev = 0.153, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08192606587317389;  // std dev = 2.195, 201.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=8 */
%   | | else return -0.10928145451410162;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029824507870230367;  // std dev = 2.975, 224.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=77 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2783557920155689;  // std dev = 0.088, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5023502919688011;  // std dev = 1.421, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1107502039718562;  // std dev = 0.063, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.1158230264109661;  // std dev = 0.129, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28645948789458414;  // std dev = 0.824, 87.000 (wgt'ed) examples reached here.  /* #pos=87 */
%   | else return -0.07778940089556939;  // std dev = 1.906, 199.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0031482632590731285;  // std dev = 0.723, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19084443684575847;  // std dev = 0.093, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.21358854673409672;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0487070048151282;  // std dev = 0.154, 161.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021869586986656468;  // std dev = 1.204, 52.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=8 */
%   | | | else return 0.10550404922464128;  // std dev = 1.553, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13381010907452545;  // std dev = 0.220, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28608880371706863;  // std dev = 0.571, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09199322029798597;  // std dev = 0.034, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4747990848529541;  // std dev = 0.526, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10797593956878009;  // std dev = 0.139, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1694976671832113;  // std dev = 1.237, 80.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | | else return 0.15296481724812871;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08519860484545902;  // std dev = 0.024, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08015688605419656;  // std dev = 6.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.02471452905001884;  // std dev = 0.467, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.05289700065828741;  // std dev = 0.772, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04393614917546722;  // std dev = 1.287, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.722', 'seconds']
Parameter learned model CLL:-0.112211 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.398, 2, 84], 'true,false,true': [0.0, 134, 0], 'true,false,false': [0.282, 21, 2], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.471, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.704, 3, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 143, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 26, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.888, 38, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.343, 0, 59], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [3.17, 120, 16], 'false,false,false,false': [2.532, 38, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.792, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.009, 148, 0], 'false,true,false,false': [0.004, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.16, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.486, 0, 61], 'true,false': [0.015, 0, 2], 'false,true,true': [0.063, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.153, 0, 17], 'false,false,true,false': [2.195, 193, 8], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.975, 147, 77], 'false,true': [0.088, 0, 8], 'false,false,true': [1.421, 1, 15], 'false,false,false,true': [0.063, 25, 0], 'false,false,false,false': [0.129, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.824, 0, 87], 'true,false': [1.906, 191, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.723, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.093, 0, 65], 'true,false,true': [0.032, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 143, 18], 'false,false,false,true': [1.204, 44, 8], 'false,false,false,false': [1.553, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.22, 3, 63], 'false,true,true,true': [0.571, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 154, 0], 'false,false,true': [0.526, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 30, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.237, 1, 79], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.024, 137, 0], 'true,false,false,true': [6.45e-09, 15, 0], 'true,false,false,false': [0.467, 10, 2], 'false,true': [0.772, 11, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.287, 16, 7]}]
{'': [0.22865755558942658, 0.196745562130177], 'true': [0.022714981070848902, 0.012576575114608973], 'false': [0.174817898022893, 0.22222222222222232], 'false,true': [-2.5376526277146434e-16, 9.25185853854297e-18], 'true,false': [-5.633967587650048e-17, 0.07939508506616262], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.041470722599202606, 0.09241656289466935], 'false': [0.07167592134830864, 0.13183223898526483], 'false,false': [0.03566529492455418, 0.16780733854309654], 'false,false,false': [0.0, 0.16352013751876368], 'false,true': [nan, 0.07167592134830864], 'false,false,true': [nan, 0.03566529492455418]}
{'': [0.0039991048373877, 0.1050371376257404], 'false': [nan, 0.10503713762574046], 'false,false': [0.07100591715976323, 0.09083395390038704], 'false,false,false': [0.07389189794718257, 0.13637026156158763], 'false,false,true': [0.0, 0.1388888888888889], 'true': [0.002309630506141088, 0.017620851926849035], 'true,false': [0.003155980946874082, 0.0], 'true,true': [0.001990488801615252, 0.0]}
{'': [0.031797582943129066, 0.00034533239527359414], 'false': [8.649941002939562e-06, 0.0007130969440813958], 'false,false': [nan, 0.0007130969440813958], 'false,false,false': [nan, 0.0007130969440813958], 'false,true': [nan, 8.649941002939562e-06], 'false,true,false': [5.965998180584403e-07, 4.740458690294707e-07]}
{'': [0.004218947230393158, 0.05957883439637795], 'false': [0.0003276863616504995, 0.05638436580885035], 'false,false': [0.05844092576765186, -4.625929269271485e-18], 'false,false,true': [0.001381462354441881, 0.023972097248179464], 'true': [0.003873484651956506, 0.00011475569036073496], 'false,true': [0.0003276863616504995, nan]}
{'': [0.03950289579154322, 0.08814718357126812], 'false': [0.0009603864108258808, 0.09090079122572198], 'false,false': [0.12625156302057267, 0.0003572679593845634], 'true': [nan, 0.039502895791543265], 'true,false': [nan, 0.03950289579154322], 'false,false,false': [0.00016095467824517985, 0.0004907119231465982]}
{'': [0.04315889130053619, 0.03734398466548602], 'true': [0.007798003686027217, 0.018258310155251718], 'false': [nan, 0.03734398466548602], 'false,false': [nan, 0.03734398466548602], 'false,false,false': [nan, 0.03734398466548602]}
{'': [0.00015888787769002987, 0.03472842824500413], 'false': [nan, 0.03472842824500411], 'false,false': [0.02372095489638036, 0.056232680366159596], 'false,false,false': [0.02789249131827545, 0.1148515338883545], 'true': [0.0001328881411566157, 0.0005020264083117273], 'true,false': [0.0005020264083117273, nan]}
{'': [0.04855702515568746, 0.03206289323231706], 'false': [0.018515574581595955, 0.07853315218446191], 'false,false': [0.02132136526519897, 0.0006470781866822798], 'false,true': [0.013602331766564843, 7.654506630812855e-06], 'false,true,true': [0.013602331766564843, nan], 'false,false,false': [nan, 0.0006470781866822798]}
{'': [0.021116129092491557, 0.05493707414045666], 'false': [0.033114580713794244, 0.0719802949772836], 'false,false': [nan, 0.0719802949772836], 'false,false,false': [nan, 0.0719802949772836], 'true': [0.018023126563948222, 0.0015819183237961532], 'true,true': [0.01913349343731404, 0.0], 'true,false': [4.095931386632444e-06, 0.008851893051047156], 'true,false,false': [2.7755575615628915e-18, 0.018209062170312384]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.144
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8417554924765617;  // std dev = 0.127, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048782;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.13592671287729013;  // std dev = 0.448, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.724469904354924;  // std dev = 0.128, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.638887392576874;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6536858859280485;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.12544463852839108;  // std dev = 7.88e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.03392394242472678;  // std dev = 0.263, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.021527587339896615;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.13017130432000226;  // std dev = 0.030, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.04372125160748137;  // std dev = 2.977, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5489643124100867;  // std dev = 0.129, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return 0.7295160189842949;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7913163325428538;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.05536643674628447;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5576380512388702;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10239196382423636;  // std dev = 0.962, 123.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=2 */
%   | | | else return -0.02372880063078378;  // std dev = 2.138, 75.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05063974036495453;  // std dev = 1.755, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.4269079919960243;  // std dev = 1.657, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4276239835780015;  // std dev = 0.244, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.32284869472742656;  // std dev = 0.771, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( recursion_accounttype(D, B), follows(G, D) )
%   | | | then return 0.43051092016124703;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5713870371024219;  // std dev = 0.379, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6604442782844817;  // std dev = 0.137, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6156729043064788;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7667105653985787;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(K, A) )
%   | then return -0.10815994700691617;  // std dev = 0.010, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return -0.20038711942594037;  // std dev = 0.271, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.2683180830005983;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.335848344263557;  // std dev = 0.263, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.3669463283095831;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4189704340447046;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3218946116556635;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.44815959803379773;  // std dev = 0.971, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.08699027766995186;  // std dev = 1.906, 206.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=8 */
%   | | else return -0.09257647104028786;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.23896496606232345;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.25319092706188634;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.27606681042902675;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.31169550904272453;  // std dev = 0.181, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08768470377710293;  // std dev = 0.031, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.05881404419088028;  // std dev = 0.182, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2597815401725567;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5117508089832601;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.13196984933864586;  // std dev = 0.040, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2190417987406754;  // std dev = 0.081, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return -0.0702428573147352;  // std dev = 0.545, 90.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=2 */
%   | | | else return -0.0862784383336475;  // std dev = 0.020, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, D), tweets(D, G) )
%   | | | then return 0.008351226183920483;  // std dev = 1.362, 62.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=16 */
%   | | | else return -0.06371892741410826;  // std dev = 0.464, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.31915877969169265;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10675960336178121;  // std dev = 0.095, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.06535414779813999;  // std dev = 0.305, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18330634526206396;  // std dev = 0.058, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.20299670518502538;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return -0.06584103005571108;  // std dev = 0.560, 100.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=2 */
%   | | | else return -0.08140449458155875;  // std dev = 0.007, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.2936895914870409;  // std dev = 0.408, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09127274088995396;  // std dev = 0.048, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0018648715412704871;  // std dev = 0.542, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.12707426926646587;  // std dev = 0.450, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.008587000134858469;  // std dev = 0.301, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.16158873681918628;  // std dev = 0.025, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.1174273697975551;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.20217707813016336;  // std dev = 0.171, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.17953787802470425;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.07333625993481992;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.26957678331490836;  // std dev = 0.304, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07384810720924465;  // std dev = 0.007, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.36088853728819753;  // std dev = 0.104, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12355284159765281;  // std dev = 0.040, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.058990332254383104;  // std dev = 2.232, 66.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=60 */
%   | | | else return 0.19265890966296198;  // std dev = 0.318, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.13880613072802206;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06618962205371495;  // std dev = 0.034, 172.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.06460193519414853;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19865903089546733;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09056974324564603;  // std dev = 0.021, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.01382448941451971;  // std dev = 0.502, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.0739742522002191;  // std dev = 0.273, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.501', 'seconds']
Refined model CLL: -0.103275


******************************************
Best model found
******************************************
Results 

CLL : -0.106064 

AUC ROC : 0.994968 

AUC PR : 0.390326 

Precision : 0.349887 

Recall : 0.99359 

F1 : 0.517529 

Total Learning Time : 11.144 

Total Inference Time : 17.150031089782715 

Total revision time: 37.77795495223999
Best scored revision CLL: -0.103275


Results 

CLL : -0.106064 

AUC ROC : 0.994968 

AUC PR : 0.390326 

Precision : 0.349887 

Recall : 0.99359 

F1 : 0.517529 

Total Learning Time : 65.42947925758361 

Total Inference Time : 17.150031089782715 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.587
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8118526388032147;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.08470820775763062;  // std dev = 0.232, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.11529179224236952;  // std dev = 0.437, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7183535127261153;  // std dev = 1.005, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.019873501198870096;  // std dev = 0.281, 178.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09851568114786395;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5740196383042966;  // std dev = 0.796, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1500701889976691;  // std dev = 3.139, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5308899004065384;  // std dev = 1.860, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.732632650243289;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8207549444867743;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6312655181214724;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4670422943657201;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5670422943657201;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03945331992559581;  // std dev = 3.647, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | | | else return 0.009610983094022939;  // std dev = 2.853, 71.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5227238289411996;  // std dev = 1.807, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1191140324947492;  // std dev = 0.047, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | | else return -0.1242714824791999;  // std dev = 0.002, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15260243394692447;  // std dev = 0.126, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29232393645210036;  // std dev = 1.807, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.4241211299751295;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.26223040244258267;  // std dev = 0.963, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5484563539334905;  // std dev = 1.382, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08392306772634069;  // std dev = 2.304, 240.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=9 */
%   | | else return -0.10510079579159354;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028655501625783047;  // std dev = 3.396, 280.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26681491446274386;  // std dev = 0.096, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4907527934524794;  // std dev = 1.336, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11357123444767697;  // std dev = 0.097, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.11824826301585145;  // std dev = 0.128, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2596148982164643;  // std dev = 2.316, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.08037334287764451;  // std dev = 2.157, 259.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011430449624502808;  // std dev = 0.674, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1916002182209631;  // std dev = 0.996, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23188335127602705;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04272634257449073;  // std dev = 0.161, 194.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.022172508479097148;  // std dev = 1.350, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | | else return 0.09204538402182079;  // std dev = 1.695, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17117610687025933;  // std dev = 0.146, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26951369366666267;  // std dev = 1.113, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0914103105480922;  // std dev = 0.029, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45377944155632344;  // std dev = 0.604, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11261397136997459;  // std dev = 0.117, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19615594478233403;  // std dev = 0.829, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.08845698654093251;  // std dev = 0.508, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08452509424698415;  // std dev = 0.016, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.081439477922741;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.030774398742763543;  // std dev = 0.472, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.016854873780175087;  // std dev = 0.983, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2421326141796205;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024981072665639325;  // std dev = 1.417, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.663', 'seconds']
Parameter learned model CLL:-0.111323 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 103], 'true,false,true': [0.0, 167, 0], 'true,false,false': [0.232, 33, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.437, 26, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.005, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 156, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.796, 1, 4], 'false,false,false,false': [3.139, 37, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.86, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.14, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.949, 1, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.647, 182, 21], 'false,false,false,false': [2.853, 60, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.807, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 181, 0], 'false,true,false,false': [0.002, 45, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.807, 3, 73], 'true,false': [0.133, 0, 4], 'false,true,true': [0.963, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.382, 2, 23], 'false,false,true,false': [2.304, 231, 9], 'false,false,false': [2.28e-09, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.396, 189, 91], 'false,true': [0.096, 0, 13], 'false,false,true': [1.336, 1, 22], 'false,false,false,true': [0.097, 38, 0], 'false,false,false,false': [0.128, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.316, 5, 107], 'true,false': [2.157, 248, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.674, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 80], 'true,false,true': [0.018, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 172, 22], 'false,false,false,true': [1.35, 34, 13], 'false,false,false,false': [1.695, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.146, 2, 77], 'false,true,true,true': [1.113, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 205, 0], 'false,false,true': [0.604, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.117, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.829, 0, 94], 'true,true,false': [0.508, 1, 9], 'true,false,true': [0.016, 151, 0], 'true,false,false,true': [9.13e-09, 19, 0], 'true,false,false,false': [0.472, 12, 2], 'false,true': [0.983, 25, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.417, 23, 8]}]
{'': [0.22398543184183364, 0.20829200555445368], 'true': [0.04415294924554408, 0.009802960494069044], 'false': [0.22222222222222174, 0.19102040816326543], 'false,true': [-1.4802973661668753e-16, 9.25185853854297e-18], 'true,false': [-1.6753066000331702e-16, 0.05387755102040817], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.01217491338186455, 0.10737812323336193], 'false': [0.0790300611717985, 0.15601226086976816], 'false,false': [0.032222222222222166, 0.19167047310636798], 'false,false,false': [0.12687103150286685, 0.1824387997447349], 'false,true': [nan, 0.0790300611717985], 'false,false,true': [nan, 0.032222222222222166]}
{'': [0.045905671454113305, 0.09386247084095013], 'false': [nan, 0.09386247084095022], 'false,false': [0.0524691358024691, 0.07872428825236467], 'false,false,false': [0.06553291323412767, 0.11465695825982034], 'false,false,true': [0.08999999999999994, 0.0], 'true': [0.046672529322658675, 0.01236406417216318], 'true,true': [0.046760570683547685, 0.0], 'true,false': [0.0033953307490136586, 0.0048796833156540265]}
{'': [0.025698083978147924, 0.00021039405233847118], 'false': [1.3914954605094405e-05, 0.0003790308422075072], 'false,false': [nan, 0.0003790308422075072], 'false,false,false': [nan, 0.0003790308422075072], 'false,true': [nan, 1.391495460509637e-05], 'false,true,false': [1.204903545886253e-05, 1.1712459145761676e-07]}
{'': [0.041876508815448535, 0.06265092955460043], 'false': [0.05151652556208597, 0.058262885203185795], 'false,false': [0.06140857396549689, 5.204170427930421e-18], 'false,false,true': [0.07638999676933342, 0.022121241831718156], 'false,true': [0.05151652556208597, nan], 'true': [0.04297788849713292, 0.0044483196539258085]}
{'': [0.04118296763132724, 0.08259329241683937], 'false': [0.0007112201888247716, 0.08725562081665708], 'false,false': [0.07762954439068849, 0.00037060819352820515], 'true': [nan, 0.041182967631327734], 'true,false': [nan, 0.04118296763132724], 'false,false,false': [0.0002479012044119398, 0.0005001996203170629]}
{'': [0.051356189805383236, 0.018934692929256123], 'true': [0.04787630942141959, 0.017965303598805094], 'false': [nan, 0.018934692929256123], 'false,false': [nan, 0.018934692929256123], 'false,false,false': [nan, 0.018934692929256123]}
{'': [0.011995034171347162, 0.038038925824984166], 'false': [nan, 0.03803892582498405], 'false,false': [0.025791323221166056, 0.06374922505186026], 'false,false,false': [0.03877226157295242, 0.1026153185784185], 'true': [0.012248119002097201, 0.00016146966443713467], 'true,false': [0.00016146966443713467, nan]}
{'': [0.021360518823511754, 0.032583559749008686], 'false': [0.020769268855019507, 0.07458645091215534], 'false,false': [0.021474111186369518, 0.00035181451479774733], 'false,true': [0.03756113063790635, 4.077257984096037e-06], 'false,true,true': [0.03756113063790635, nan], 'false,false,false': [nan, 0.00035181451479774733]}
{'': [0.020862336737692715, 0.04382798704031562], 'false': [0.026104075453295714, 0.06420201618691525], 'false,false': [0.0, 0.064799461717704], 'false,false,false': [nan, 0.064799461717704], 'true': [0.010098340917749197, 0.0014114955462785628], 'true,true': [0.007308615421556021, 0.025837989745516744], 'true,false': [1.6849501295184335e-06, 0.0073666327292502285], 'true,false,false': [4.382459307730881e-18, 0.01588626466688774]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 24.22
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.8196873966379742;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.13190081614426943;  // std dev = 0.099, 201.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13592671287729013;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.7133474953801763;  // std dev = 0.121, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( tweets(A, E) )
%   | | then return 0.644918589769815;  // std dev = 0.267, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.11053326443956646;  // std dev = 0.116, 160.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7325605036588647;  // std dev = 0.145, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.12654033775899604;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05724034541525108;  // std dev = 2.116, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.11531303932603529;  // std dev = 2.384, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5498523720808847;  // std dev = 0.993, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.49633688802145004;  // std dev = 0.980, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.5521324844899278;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6480014770612269;  // std dev = 0.250, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5681330426964563;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5971085743501939;  // std dev = 0.294, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1142666067417039;  // std dev = 0.011, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06005684039396911;  // std dev = 2.086, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.1368721219531322;  // std dev = 2.305, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4325737009603492;  // std dev = 0.126, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2867600261983061;  // std dev = 1.054, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4531689151842825;  // std dev = 0.325, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.47140671672978796;  // std dev = 0.235, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6821756818181246;  // std dev = 0.044, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7632405422641833;  // std dev = 0.149, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10329203347295769;  // std dev = 0.009, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.10291820806209849;  // std dev = 0.004, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.151460445909576;  // std dev = 0.126, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.2825916809421527;  // std dev = 1.382, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.33807013501906025;  // std dev = 0.105, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.15372784598589748;  // std dev = 0.383, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.3962874841159161;  // std dev = 0.291, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3215836953299228;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.33097595575870636;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.059992548660250375;  // std dev = 1.674, 195.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=15 */
%   | | | else return 0.0736628109797217;  // std dev = 2.420, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   | | else return -0.09449099177459358;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2240350073704196;  // std dev = 1.381, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.2716730662769322;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2907687895677349;  // std dev = 0.031, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04918961166623435;  // std dev = 0.144, 150.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=15 */
%   | | else return -0.041733533656392485;  // std dev = 0.125, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.29035469441969136;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.06216421108812749;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4841163334884964;  // std dev = 0.130, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.12056304271479834;  // std dev = 0.033, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(C, B), follows(F, C) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.22642461287405666;  // std dev = 0.087, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.13920737148940382;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.34904323096325635;  // std dev = 0.088, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.08417632176009875;  // std dev = 0.003, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.22319530088718953;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.23732532573345935;  // std dev = 0.995, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.060482805705891506;  // std dev = 0.686, 50.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=3 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.038595905646123495;  // std dev = 0.921, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -7.664391798783277E-4;  // std dev = 2.035, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.14408148810368032;  // std dev = 1.381, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.18299594319366433;  // std dev = 0.068, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2111977152754151;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.24997990745454196;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04255088448227535;  // std dev = 0.112, 233.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.32421280166890604;  // std dev = 0.360, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12104574109684754;  // std dev = 0.028, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09552856797671941;  // std dev = 0.648, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.0910707152715096;  // std dev = 1.247, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16560136756112998;  // std dev = 0.013, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return -0.029388413915329665;  // std dev = 0.991, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.16521983977579946;  // std dev = 1.121, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.28919014243467384;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17827374182232816;  // std dev = 0.082, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3227831442514153;  // std dev = 0.291, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07517922382340654;  // std dev = 0.003, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3743503887972837;  // std dev = 0.084, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13599507988455337;  // std dev = 0.033, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.09878508743994213;  // std dev = 0.210, 85.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=81 */
%   | | else return 0.2477374704904693;  // std dev = 0.059, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.06690121297147694;  // std dev = 0.034, 198.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.12283537249326337;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0032565682190489526;  // std dev = 0.653, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.026379971214791277;  // std dev = 0.508, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.18529670148703925;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.023001405601139117;  // std dev = 0.590, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.031231840695037042;  // std dev = 1.116, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '52.813', 'seconds']
Refined model CLL: -0.103299


******************************************
Best model found
******************************************
Results 

CLL : -0.101969 

AUC ROC : 0.994765 

AUC PR : 0.37995 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 24.22 

Total Inference Time : 34.549463748931885 

Total revision time: 69.58347376060486
Best scored revision CLL: -0.103299


Results 

CLL : -0.101969 

AUC ROC : 0.994765 

AUC PR : 0.37995 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 97.23499806594849 

Total Inference Time : 34.549463748931885 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.125
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.14981560176617903;  // std dev = 0.455, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08521044563604158;  // std dev = 0.180, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7791946915124662;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1721776830646163;  // std dev = 2.311, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6227631345349409;  // std dev = 0.116, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05078769770276524;  // std dev = 1.785, 55.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=5 */
%   | | | else return 0.08483440467601559;  // std dev = 2.068, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5434100093911582;  // std dev = 0.927, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11059974018546968;  // std dev = 0.009, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.12354052536417715;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17658058262811283;  // std dev = 0.141, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.18738028432124787;  // std dev = 1.223, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29392459280858985;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6428905459553232;  // std dev = 0.146, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0900544993130545;  // std dev = 0.807, 44.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=1 */
%   | | else return 0.07224339927885215;  // std dev = 0.360, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.00958930268284755;  // std dev = 1.254, 51.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23679653566148015;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4511636258427629;  // std dev = 0.930, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13884118223162537;  // std dev = 0.113, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.12058882724292512;  // std dev = 0.101, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2190719855628148;  // std dev = 1.363, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return -0.08903898033764072;  // std dev = 0.727, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1143555538044028;  // std dev = 0.991, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20254749632659572;  // std dev = 0.079, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.07396294384335066;  // std dev = 0.154, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.04174162347375688;  // std dev = 0.701, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0.0933553659979454;  // std dev = 1.254, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18292603759941592;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22054203048143192;  // std dev = 0.350, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08156796765926656;  // std dev = 0.032, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41466506913109263;  // std dev = 0.343, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10729255590756878;  // std dev = 0.072, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.018886040016475515;  // std dev = 1.555, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return 0.12331016777322419;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.0760742163595873;  // std dev = 0.017, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08474634713833193;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.087270747607404;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return 0.002395675399497861;  // std dev = 0.520, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19324195653961607;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03596021052011913;  // std dev = 1.034, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.037', 'seconds']
Parameter learned model CLL:-0.109469 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false': [0.0, 11, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 16, 0], 'false,false': [0.455, 17, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.18, 40, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 13, 0], 'false,false,false,true': [0.084, 0, 2], 'false,false,false,false': [2.311, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.116, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [1.785, 50, 5], 'false,false,false,false': [2.068, 18, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.927, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.009, 41, 0], 'false,true,false,false': [0.006, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.141, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.223, 2, 14], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.146, 0, 7], 'false,false,true,false': [0.807, 43, 1], 'false,false,false': [0.36, 8, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.254, 37, 14], 'false,true': [1.05e-08, 0, 6], 'false,false,true': [0.93, 1, 11], 'false,false,false,true': [0.113, 18, 0], 'false,false,false,false': [0.101, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.363, 2, 22], 'true,false': [0.727, 50, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.991, 7, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.079, 0, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 31, 2], 'false,false,false,true': [0.701, 23, 4], 'false,false,false,false': [1.254, 11, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.016, 0, 14], 'false,true,true,true': [0.35, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.032, 32, 0], 'false,false,true': [0.343, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.072, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.555, 3, 14], 'true,true,false': [0.01, 0, 6], 'true,false,true': [0.017, 31, 0], 'true,false,false,true': [0.032, 7, 0], 'true,false,false,false': [0.007, 2, 0], 'false,true': [0.52, 9, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.034, 11, 6]}]
{'': [0.21484374999999956, 0.18749999999999947], 'true': [-8.881784197001253e-17, 4.794144879063176e-17], 'false': [0.15999999999999986, 0.20659722222222232], 'false,true': [0.0, -6.938893903907228e-18], 'true,false': [3.027880976250427e-17, -1.0092936587501423e-17], 'false,true,true': [1.4802973661668753e-16, 0.0]}
{'': [1.9737298215558337e-16, 0.10975523919865585], 'false': [0.03237580555397616, 0.1682831918481906], 'false,false': [4.270088556250602e-18, 0.2080477270740196], 'false,false,false': [0.0035666312014090984, 0.1977827750167817], 'false,true': [nan, 0.03237580555397616], 'false,false,true': [nan, 4.270088556250602e-18]}
{'': [0.0015211936511919813, 0.1123703551241653], 'false': [nan, 0.11237035512416575], 'false,false': [-7.401486830834377e-17, 0.0983750730762988], 'false,false,false': [0.0579343006049034, 0.1782463432479269], 'true': [-2.590520390792032e-16, 0.006754942810218101], 'true,false': [nan, 0.006754942810218101], 'false,false,true': [0.0, -4.4408920985006264e-17], 'true,true': [-2.590520390792032e-16, nan]}
{'': [0.027710325886924028, 0.001205279631851846], 'false': [2.3390458724729946e-05, 0.0008303944590164711], 'false,false': [nan, 0.0008303944590164711], 'false,false,false': [nan, 0.0008303944590164711], 'false,true': [nan, 2.3390458724729946e-05], 'false,true,false': [2.1721513116347807e-06, 4.627017207062267e-06]}
{'': [0.09348526086166893, 0.08508303026703719], 'true': [0.09348526086166893, nan], 'false': [0.0, 0.08676809810693294], 'false,false': [0.07678521852054929, 0.1299211277624438], 'false,false,true': [0.0030343795627476894, 0.014783814856479942], 'false,true': [0.0, nan]}
{'': [0.03081082702614762, 0.080510587773434], 'false': [1.850371707708594e-17, 0.08594687431545787], 'false,false': [0.07200771949285967, 0.0007797841264242268], 'true': [nan, 0.030810827026147607], 'true,false': [nan, 0.03081082702614762], 'false,false,false': [0.0007116604044730105, 0.0006798152495110324]}
{'': [0.05246499001209772, 0.06542279888878876], 'false': [nan, 0.06542279888878871], 'false,false': [nan, 0.06542279888878876], 'false,false,false': [nan, 0.06542279888878876], 'true': [0.07739832811811416, 0.0103532968942001]}
{'': [0.00034270208956784415, 0.04087079787984265], 'false': [nan, 0.040870797879842755], 'false,false': [0.02380729472299022, 0.05023599952681537], 'false,false,false': [0.018180751886609187, 0.0873681530485342], 'true': [0.00034270208956784415, nan]}
{'': [0.00025152755773516104, 0.04199377020061979], 'false': [0.01768678371099189, 0.07492908416513896], 'false,false': [0.013062403250816597, 0.0005758839114613717], 'false,true': [0.015289631044939932, 3.198168219027339e-05], 'false,true,true': [0.015289631044939932, nan], 'false,false,false': [nan, 0.0005758839114613717]}
{'': [0.04276058415064045, 0.044398568591198014], 'false': [0.020811900227635887, 0.060682951712743655], 'false,false': [0.0, 0.06287822890589194], 'false,false,false': [nan, 0.06287822890589194], 'true': [0.1072363948822078, 4.826339775597446e-05], 'true,true': [0.14223395323944987, 1.687343022998879e-05], 'true,false': [9.019141644193581e-06, 0.00011736907865194441], 'true,false,false': [0.00014228742588089788, 2.519839845086056e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.168
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2047684843043145;  // std dev = 1.885, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.11955863113395906;  // std dev = 1.370, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.40101041844675506;  // std dev = 0.674, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.058903810780214096;  // std dev = 1.019, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return -0.11231637819360638;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.12566326909393752;  // std dev = 1.508, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.18196145340386635;  // std dev = 1.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.4175135841583098;  // std dev = 1.18e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2508469174916433;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.6298930333197662;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6439506366214657;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7234363599214877;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.10533132605859094;  // std dev = 0.002, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return -0.16639165407818363;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.16815969730267094;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.22629168444075415;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3580504771773676;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4040626343469537;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3269349521630193;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.04046547495366398;  // std dev = 0.798, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return -0.09448836476653993;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.007534865715068189;  // std dev = 1.246, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.13510282820736907;  // std dev = 1.097, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2627764200297623;  // std dev = 0.037, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4225883986835708;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09346892215913889;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.03388577219556571;  // std dev = 0.125, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2594664324763348;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.44615965394200097;  // std dev = 0.191, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5285447603942236;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1290068042538079;  // std dev = 0.092, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.14069880696280912;  // std dev = 0.256, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.20638079829757627;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.0729129885164333;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(A, F) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.05874538003746415;  // std dev = 0.474, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return -0.02441148937737872;  // std dev = 0.456, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.07938365378790672;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.33116853959080883;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13097933219974747;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.10612748162675636;  // std dev = 0.770, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.011366536546825253;  // std dev = 0.740, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.006141290096190484;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.21796319485047455;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1764812857366609;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19540860771895563;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.0204931342162148;  // std dev = 0.654, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.07784002740125358;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.07935649352094712;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.06916969001257042;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.022152224114040983;  // std dev = 0.223, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.1692826894595093;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.20973494411454627;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.34188979432503075;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1494790037226963;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0772394543664045;  // std dev = 0.007, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2843288812318047;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.37231198444342684;  // std dev = 0.108, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.13393019591697897;  // std dev = 0.050, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.1860948088094995;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11328748852780457;  // std dev = 0.248, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.1335854765193362;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07204558089473793;  // std dev = 0.005, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return -0.09044592518216717;  // std dev = 0.927, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.3438539854504145;  // std dev = 0.543, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.052233133846384616;  // std dev = 0.277, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18511680053720947;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18607434785265498;  // std dev = 0.354, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.009074206536436017;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.190', 'seconds']
Refined model CLL: -0.109526


******************************************
Best model found
******************************************
Results 

CLL : -0.103906 

AUC ROC : 0.993405 

AUC PR : 0.408558 

Precision : 0.340058 

Recall : 0.936508 

F1 : 0.498943 

Total Learning Time : 4.168 

Total Inference Time : 5.123737335205078 

Total revision time: 13.115913408279418
Best scored revision CLL: -0.109469


Results 

CLL : -0.103906 

AUC ROC : 0.993405 

AUC PR : 0.408558 

Precision : 0.340058 

Recall : 0.936508 

F1 : 0.498943 

Total Learning Time : 13.131209390640258 

Total Inference Time : 5.123737335205078 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.58
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.832507909458486;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.0918510649004878;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.35814893509951234;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7246193361189032;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04448616475245858;  // std dev = 0.250, 63.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08557901077870532;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7638092535711855;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17770468905794273;  // std dev = 3.367, 56.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=20 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.57426032420252;  // std dev = 0.235, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.3981019179317213;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6022929977714617;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5604214725265415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5604214725265414;  // std dev = 3.65e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03103035255007551;  // std dev = 2.734, 105.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=12 */
%   | | | else return 0.0887930006243879;  // std dev = 2.832, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5228996336351638;  // std dev = 2.017, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1183604440483934;  // std dev = 0.044, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.13065687856676325;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17267287086894245;  // std dev = 0.255, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32990625208571156;  // std dev = 0.492, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30144036434239463;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6263882735242166;  // std dev = 0.109, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1179489947089828;  // std dev = 0.852, 94.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=1 */
%   | | else return 0.0661938610419209;  // std dev = 0.356, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0030021351155674423;  // std dev = 2.101, 99.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=29 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24479496052560704;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4712751153059987;  // std dev = 1.039, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1417832843671718;  // std dev = 0.219, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.131165959538791;  // std dev = 0.205, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2453823181469024;  // std dev = 1.624, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return -0.09289960114770626;  // std dev = 0.977, 112.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07203067616293249;  // std dev = 1.486, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19126405335107294;  // std dev = 0.032, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05075295692794588;  // std dev = 0.130, 75.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.005205630319446255;  // std dev = 1.407, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | | else return 0.09692956718960137;  // std dev = 1.582, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15846546614080817;  // std dev = 0.192, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.1648095557960606;  // std dev = 1.123, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09059077412531953;  // std dev = 0.288, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3692719766190552;  // std dev = 0.429, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15016425828128316;  // std dev = 0.323, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18820038833363242;  // std dev = 0.486, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.0610097727995221;  // std dev = 0.650, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.0779793289077117;  // std dev = 0.024, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09451736569531856;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.023773108436984294;  // std dev = 0.609, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -4.116708055434959E-5;  // std dev = 1.181, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.14815954639702944;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030995907171505473;  // std dev = 1.352, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.736', 'seconds']
Parameter learned model CLL:-0.11778 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.987, 1, 38], 'true,false,true': [6.5e-08, 64, 0], 'true,false,false': [0.218, 19, 1], 'false,true,true,true': [0.943, 1, 8], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 17, 0], 'false,false': [0.5, 13, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.25, 57, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.055, 0, 3], 'false,false,false,false': [3.367, 36, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.235, 0, 25], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.819, 1, 2], 'true,false,false': [0.075, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [3.65e-08, 0, 7], 'false,false,false,true': [2.734, 93, 12], 'false,false,false,false': [2.832, 31, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.017, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 76, 0], 'false,true,false,false': [0.002, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.255, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.492, 0, 30], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.109, 0, 16], 'false,false,true,false': [0.852, 93, 1], 'false,false,false': [0.356, 18, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.101, 70, 29], 'false,true': [0.024, 0, 9], 'false,false,true': [1.039, 1, 24], 'false,false,false,true': [0.219, 31, 0], 'false,false,false,false': [0.205, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.624, 2, 46], 'true,false': [0.977, 110, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.486, 20, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.032, 0, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.13, 69, 6], 'false,false,false,true': [1.407, 31, 11], 'false,false,false,false': [1.582, 16, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.192, 1, 30], 'false,true,true,true': [1.123, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.288, 101, 0], 'false,false,true': [0.429, 0, 20], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.323, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.486, 0, 30], 'true,true,false': [0.65, 1, 8], 'true,false,true': [0.024, 59, 0], 'true,false,false,true': [0.025, 7, 0], 'true,false,false,false': [0.609, 8, 1], 'false,true': [1.181, 17, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.352, 18, 12]}]
{'': [0.21653777513385022, 0.2445130315500697], 'false': [0.22959183673469394, 0.24999999999999956], 'false,true': [0.0826446280991734, -3.2653618371328133e-18], 'true': [0.024983563445103548, 0.011763038548752866], 'false,true,true': [0.09876543209876527, 0.0], 'true,false': [6.591949208711867e-17, 0.04750000000000004]}
{'': [-2.220446049250313e-16, 0.1362745510043103], 'false': [0.06226560752321995, 0.1808354100799938], 'false,false': [0.04338842975206611, 0.2087561837253221], 'false,false,false': [0.0010094370196664926, 0.20241842827605866], 'false,true': [nan, 0.06226560752321995], 'false,false,true': [nan, 0.04338842975206611]}
{'': [0.026442999603884094, 0.11722436522113873], 'false': [nan, 0.11722436522113884], 'false,false': [1.6653345369377348e-16, 0.10767126978456876], 'false,false,false': [0.07120556229612192, 0.18652927858156676], 'true': [0.0022024088806618636, 0.12302182532797072], 'true,false': [0.2233356328340288, 0.0018610192788529971], 'true,true': [0.0022024088806618636, nan], 'false,false,true': [0.0, 1.9032394707859825e-16]}
{'': [0.06353719738314623, 0.0010915197416472146], 'false': [4.166090553772736e-05, 0.0019112457247187058], 'false,false': [nan, 0.0019112457247187058], 'false,false,false': [nan, 0.0019112457247187058], 'false,true': [nan, 4.166090553772492e-05], 'false,true,false': [2.4920368250712e-05, 2.0078227878824368e-07]}
{'': [0.008064393814538502, 0.08572875776555282], 'false': [0.0, 0.08587184889480033], 'false,false': [0.07557110781517441, 0.12650413176631406], 'false,false,true': [0.0007413992724015772, 0.007720738553903928], 'true': [0.008064393814538502, nan], 'false,true': [0.0, nan]}
{'': [0.04460745385678175, 0.08540372230968943], 'false': [6.36734136033601e-05, 0.09050798925520054], 'false,false': [0.04318499420351614, 0.0015274145471065649], 'true': [nan, 0.04460745385678177], 'true,false': [nan, 0.04460745385678175], 'false,false,false': [0.0015509442348309347, 0.0014440195359336169]}
{'': [0.046481116373800556, 0.06494790248094914], 'false': [nan, 0.06494790248094917], 'false,false': [nan, 0.06494790248094914], 'false,false,false': [nan, 0.06494790248094914], 'true': [0.05492938052281215, 0.008530034662016454]}
{'': [3.1815213817648624e-05, 0.04254298394959119], 'false': [nan, 0.04254298394959099], 'false,false': [0.01696554165625757, 0.06564954429601673], 'false,false,false': [0.047106474951404166, 0.08633421924847759], 'true': [3.1815213817648624e-05, nan]}
{'': [0.036727854643645454, 0.03598376693506829], 'false': [0.01837367348275851, 0.06477067986104763], 'false,false': [0.009211165101420771, 0.002612436531714607], 'false,true': [0.09696858049932516, 0.000819065132011819], 'false,true,true': [0.09696858049932516, nan], 'false,false,false': [nan, 0.002612436531714607]}
{'': [0.022358886972418782, 0.05612420808211088], 'false': [0.051699780320061256, 0.05941344570580911], 'false,false': [0.0, 0.06095107717482314], 'false,false,false': [nan, 0.06095107717482311], 'true': [0.01977949138930754, 0.005307830263417038], 'true,true': [0.007886779119299336, 0.04697767125347904], 'true,false': [9.588181341664958e-06, 0.024419650278609126], 'true,false,false': [8.868670260306355e-05, 0.04115415496337007]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.355
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8278459047964812;  // std dev = 0.171, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.13175005479947755;  // std dev = 0.100, 99.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.21529179224236947;  // std dev = 0.479, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7255486463834696;  // std dev = 1.33e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7401919213324014;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12655700202914572;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.12655700202914558;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.07344299797085443;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12655700202914558;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17149450821386028;  // std dev = 3.189, 58.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=20 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.566885287583097;  // std dev = 0.094, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(E, A) )
%   | | then return 0.7132201551231843;  // std dev = 0.215, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462844;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5613408105653874;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5613408105653875;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.06898499903711926;  // std dev = 1.282, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   | | | else return -0.11723139295792633;  // std dev = 0.044, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11112696295025684;  // std dev = 2.484, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | | else return 0.2615463814432815;  // std dev = 1.848, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.32969845960548394;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.42060755051457493;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.41908407325086006;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4992013457168567;  // std dev = 0.296, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5672510341965373;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6369562841123996;  // std dev = 0.923, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   else if ( follows(I, A) )
%   | then return -0.10551537214560226;  // std dev = 0.005, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( follows(A, J) )
%   | | then return -0.15986544192774677;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.240184672375672;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.3363773699533498;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.3228101266449412;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3127615846321917;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.38435877954536596;  // std dev = 0.307, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3243571389385338;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.485772864288999;  // std dev = 0.137, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1047468122117053;  // std dev = 0.647, 113.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09270427789648504;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.09894585790774768;  // std dev = 1.617, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2671094832554336;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.2569724334285921;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05714725233246098;  // std dev = 0.107, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else return -0.08426189745895939;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2547793073419469;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3677822594541842;  // std dev = 0.318, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5538748928983369;  // std dev = 0.192, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12352251822939105;  // std dev = 0.049, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.12236513108443273;  // std dev = 0.267, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.21646176743874482;  // std dev = 0.008, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.3262417923212928;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.08274610354692702;  // std dev = 0.002, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.25083262156976327;  // std dev = 0.258, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.30337410555736133;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10996598364073584;  // std dev = 0.009, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.21199263858855838;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.060612870611652554;  // std dev = 0.898, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.022554033574920994;  // std dev = 1.272, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.13231889793224283;  // std dev = 0.214, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.1777640392005786;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.07372450406945161;  // std dev = 1.580, 86.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=9 */
%   | | | else return -0.030625880759436314;  // std dev = 1.263, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
%   | | else if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.3451526116687726;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10209334129406888;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(I, A) )
%   | | then return -0.07773197443760389;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1568269645863424;  // std dev = 0.373, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10052320668447794;  // std dev = 1.088, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1598581728745336;  // std dev = 0.008, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.2018572990347274;  // std dev = 0.157, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.2691003373788932;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15411132124325777;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07305553938481785;  // std dev = 0.003, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.01420412890260611;  // std dev = 0.721, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return -0.04512551899868435;  // std dev = 0.525, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.050777136236568196;  // std dev = 0.789, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.0827124363818804;  // std dev = 1.114, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1490712752835298;  // std dev = 0.026, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.06762058346563343;  // std dev = 0.002, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.054601999754302695;  // std dev = 0.077, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.2119642201704195;  // std dev = 0.161, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09829083740798171;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.01399534982955802;  // std dev = 0.192, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1451601117079251;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.024374672950400904;  // std dev = 0.808, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return -0.0035531707905034826;  // std dev = 1.208, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.311', 'seconds']
Refined model CLL: -0.11215


******************************************
Best model found
******************************************
Results 

CLL : -0.100641 

AUC ROC : 0.992647 

AUC PR : 0.332683 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 6.355 

Total Inference Time : 7.837644100189209 

Total revision time: 20.208299217224123
Best scored revision CLL: -0.11215


Results 

CLL : -0.100641 

AUC ROC : 0.992647 

AUC PR : 0.332683 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 20.223595199584963 

Total Inference Time : 7.837644100189209 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.932
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.825362049853611;  // std dev = 1.391, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return -0.05094197399139688;  // std dev = 0.287, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.2391013160518933;  // std dev = 0.486, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7289220298204403;  // std dev = 0.137, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.043997997350811495;  // std dev = 0.250, 115.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.040368826064899783;  // std dev = 1.572, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7622769555095819;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.10566159428725241;  // std dev = 4.031, 95.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5702578187864275;  // std dev = 0.239, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7281299605133104;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6027357966207338;  // std dev = 0.159, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5611217635285896;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5611217635285896;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.011817033127950672;  // std dev = 3.733, 139.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=23 */
%   | | | else return 0.0525287489933344;  // std dev = 3.225, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5248187038900282;  // std dev = 2.414, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12491697886551104;  // std dev = 0.056, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | | else return -0.12947263377167917;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1703974679755307;  // std dev = 0.210, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29657731370123674;  // std dev = 1.105, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return 0.4673144987439478;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3014874938920937;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6301561239300667;  // std dev = 0.275, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10838086947291692;  // std dev = 1.249, 158.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=2 */
%   | | else return 0.0423515071303905;  // std dev = 0.338, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012262357447256483;  // std dev = 2.577, 149.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=47 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24902765651143902;  // std dev = 0.114, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5157511058080333;  // std dev = 0.856, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12679095090425194;  // std dev = 0.161, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.13318375461793694;  // std dev = 0.154, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2816499198319576;  // std dev = 1.316, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else return -0.09772079509873234;  // std dev = 1.404, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06636447529741706;  // std dev = 1.750, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16836217597824574;  // std dev = 0.992, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.24436031929145785;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.046088560988881845;  // std dev = 0.141, 113.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.012676437941061713;  // std dev = 1.600, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
%   | | | else return 0.03215097463876767;  // std dev = 1.940, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15610373806777791;  // std dev = 0.165, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3064429916937364;  // std dev = 0.709, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09338256947200864;  // std dev = 0.120, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37320877054401935;  // std dev = 0.627, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11455725580244054;  // std dev = 0.164, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.187082380437681;  // std dev = 0.536, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.1481088645663457;  // std dev = 0.250, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08118506966517504;  // std dev = 0.010, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10741308326509309;  // std dev = 0.028, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.004294324592842028;  // std dev = 0.891, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.009197682814302704;  // std dev = 0.929, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1664268171384562;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03461418114056674;  // std dev = 1.559, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.339', 'seconds']
Parameter learned model CLL:-0.114551 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.391, 2, 59], 'true,false,true': [7.74e-08, 81, 0], 'true,false,false': [0.287, 30, 3], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.33e-08, 34, 0], 'false,false': [0.486, 26, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.137, 0, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.25, 104, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.572, 27, 3], 'false,false,false,true': [0.117, 0, 5], 'false,false,false,false': [4.031, 69, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.239, 0, 38], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.159, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [3.733, 116, 23], 'false,false,false,false': [3.225, 49, 14]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.414, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.056, 97, 0], 'false,true,false,false': [0.022, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.21, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.105, 1, 45], 'true,false': [0.0, 0, 1], 'false,true,true': [1.49e-08, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.275, 0, 26], 'false,false,true,false': [1.249, 156, 2], 'false,false,false': [0.338, 30, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.577, 102, 47], 'false,true': [0.114, 0, 12], 'false,false,true': [0.856, 0, 34], 'false,false,false,true': [0.161, 51, 0], 'false,false,false,false': [0.154, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.316, 1, 72], 'true,false': [1.404, 156, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.75, 28, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.992, 1, 47], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 102, 11], 'false,false,false,true': [1.6, 47, 18], 'false,false,false,false': [1.94, 38, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.165, 1, 46], 'false,true,true,true': [0.709, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.12, 116, 0], 'false,false,true': [0.627, 0, 26], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 48, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.536, 0, 48], 'true,true,false': [0.25, 0, 11], 'true,false,true': [0.01, 93, 0], 'true,false,false,true': [0.028, 21, 0], 'true,false,false,false': [0.891, 13, 3], 'false,true': [0.929, 29, 15], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.559, 27, 14]}]
{'': [0.22876734693877565, 0.22461055428088533], 'true': [0.03171190540177315, 0.025623268698060857], 'false': [0.2124114952103285, 0.23582766439909247], 'false,true': [-2.3684757858670006e-16, 3.2653618371328135e-17], 'true,false': [7.401486830834377e-17, 0.0826446280991734], 'false,true,true': [-1.4802973661668753e-16, 1.4802973661668753e-16]}
{'': [0.00038958129242468625, 0.12224414551227127], 'false': [0.06271725066794424, 0.1655422135137945], 'false,false': [0.08232369127398617, 0.18312515678867464], 'false,false,false': [0.0027482149783762287, 0.17106149341219082], 'false,false,true': [nan, 0.08232369127398617], 'false,true': [nan, 0.06271725066794424]}
{'': [0.0043899577210385, 0.1280734469441154], 'false': [nan, 0.12807344694411535], 'false,false': [-8.881784197001253e-17, 0.12083128159352577], 'false,false,false': [0.10026833715148835, 0.16505979947901292], 'true': [0.0015024151021369534, 0.012884605401295712], 'true,false': [0.016132502887748073, 0.005039480782554895], 'true,true': [0.0015024151021369534, nan], 'false,false,true': [0.0, -4.9343245538895844e-17]}
{'': [0.06008431523875109, 0.0007072459065294739], 'false': [3.406295796207827e-05, 0.0008498211475108311], 'false,false': [nan, 0.0008498211475108311], 'false,false,false': [nan, 0.0008498211475108311], 'false,true': [nan, 3.4062957962080145e-05], 'false,true,false': [3.257910668016063e-05, 2.385645305259479e-05]}
{'': [0.026602711990115817, 0.08237970575141398], 'false': [2.2204460492503132e-17, 0.08227787377583512], 'false,false': [0.0750780964625808, 0.11447161936998143], 'false,false,true': [0.002915929630036319, 0.009880279299693394], 'true': [0.026560793808406848, 0.0], 'false,true': [2.2204460492503132e-17, nan]}
{'': [0.044579664102309915, 0.08369040159482821], 'false': [0.0010774830919793494, 0.08783587848717025], 'false,false': [0.021553958780883745, 0.0005429555287225016], 'true': [nan, 0.044579664102309714], 'true,false': [nan, 0.044579664102309915], 'false,false,false': [0.0005081543792738751, 0.0005628026167428498]}
{'': [0.046994477308313645, 0.06661379845085631], 'false': [nan, 0.06661379845085624], 'false,false': [nan, 0.06661379845085631], 'false,false,false': [nan, 0.06661379845085631], 'true': [0.023715031742524623, 0.012396679073150584]}
{'': [0.020188075302788384, 0.03808786223994925], 'false': [nan, 0.038087862239949324], 'false,false': [0.019783627723466264, 0.05324326210047312], 'false,false,false': [0.039379940686815454, 0.0697234359302711], 'true': [0.020490788413357233, 0.0], 'true,false': [0.0, nan]}
{'': [0.027243853081350886, 0.038729303554185156], 'false': [0.02451919605827952, 0.05990395498206853], 'false,false': [0.015139174772533074, 0.0005595428040821535], 'false,true': [0.02391593733288379, 0.0001242456195898352], 'false,true,true': [0.02391593733288379, nan], 'false,false,false': [nan, 0.0005595428040821535]}
{'': [0.020728235938511298, 0.038505895226282255], 'false': [0.019618595120796275, 0.057329098481841506], 'false,false': [0.0, 0.05931752028939914], 'false,false,false': [nan, 0.05931752028939907], 'true': [0.006152425339707936, 0.00708955390598251], 'true,false': [1.0042981607581192e-06, 0.02455801682593962], 'true,false,false': [3.659294391154877e-05, 0.049659968255503555], 'true,true': [0.005975962224010044, 0.0056867025287176635]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.801
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8414822684328459;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.4831489350995123;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6637743246310368;  // std dev = 0.244, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | else return 0.7228249321600525;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(F, H) )
%   | | | then return 0.5251317230648294;  // std dev = 1.205, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7385935834559805;  // std dev = 0.102, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12844583878775045;  // std dev = 0.119, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( tweets(K, I), recursion_accounttype(K, B) )
%   | | | then return 0.5766162693538114;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.2661125728184304;  // std dev = 2.012, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | | else return 0.16229966381140476;  // std dev = 2.249, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5430618328396487;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.5586519359600342;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then return 0.6801160082927709;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6266450955584135;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5586519359600342;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5055585449953245;  // std dev = 0.950, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.11337539510093185;  // std dev = 0.074, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08631295788832467;  // std dev = 2.682, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | | | else return 0.1433952660767888;  // std dev = 2.207, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.438424877614689;  // std dev = 0.120, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.5426024349333719;  // std dev = 0.128, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.41995475336345933;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10287797035290698;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.46770615933734516;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5904324171021527;  // std dev = 0.127, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6395978615202398;  // std dev = 0.167, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7332463457590365;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11920071927433629;  // std dev = 0.035, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.2900767016582371;  // std dev = 0.976, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.32908919221591987;  // std dev = 0.032, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.0329718394777803;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2241371148533502;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.4494040758942931;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33370085154002765;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(I, A) )
%   | | then return -0.05277892115760555;  // std dev = 0.128, 124.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=11 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04679542137077064;  // std dev = 2.132, 61.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=18 */
%   | | | else return 0.09427000135495028;  // std dev = 1.689, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26776120201886905;  // std dev = 0.040, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.05082037785766358;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.053586626938061724;  // std dev = 0.144, 102.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=9 */
%   | | else return -0.08661757345707936;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2687651205556858;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.05685678739099957;  // std dev = 1.275, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.4708115427736039;  // std dev = 0.292, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13730234048665188;  // std dev = 0.151, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return -0.14867531825205327;  // std dev = 0.398, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.2184784984337201;  // std dev = 0.034, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.3145752419272752;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.01595550531965867;  // std dev = 0.759, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, G), follows(H, A) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then return 0.3616128072712933;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(J, H) )
%   | | | then return -0.0790852982339573;  // std dev = 0.439, 111.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=1 */
%   | | | else return -0.22908317506657078;  // std dev = 0.435, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.10959508397956422;  // std dev = 0.303, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.05687938689471082;  // std dev = 0.308, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.024560578861261995;  // std dev = 2.118, 83.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.1481745795773903;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.18897888437143745;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18596551895990265;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.2814655760961724;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.25148553915180033;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07105280155986199;  // std dev = 0.392, 80.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=1 */
%   | | | else return -0.012183773210305142;  // std dev = 1.074, 57.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03523342669113144;  // std dev = 1.541, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | | | else return 0.001280712981517285;  // std dev = 1.465, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16351741637345055;  // std dev = 0.083, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.10149389149542716;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.05400111844220364;  // std dev = 0.358, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.24106500378174064;  // std dev = 0.323, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.06642738088768778;  // std dev = 0.631, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07310242203477643;  // std dev = 0.061, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.2913344965421658;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.38450535941002345;  // std dev = 0.102, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14545541120578195;  // std dev = 0.047, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1628362813205612;  // std dev = 0.045, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else return -0.06129930460833762;  // std dev = 0.049, 137.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.21720766072481631;  // std dev = 0.107, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09310052488257002;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.0940979290067056;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.00978180355903846;  // std dev = 0.580, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19651386614114674;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.01722158518303955;  // std dev = 1.064, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.034657890763795544;  // std dev = 0.901, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.178', 'seconds']
Refined model CLL: -0.108396


******************************************
Best model found
******************************************
Results 

CLL : -0.100618 

AUC ROC : 0.992973 

AUC PR : 0.37377 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 12.801 

Total Inference Time : 10.467059135437012 

Total revision time: 32.24624892044068
Best scored revision CLL: -0.108396


Results 

CLL : -0.100618 

AUC ROC : 0.992973 

AUC PR : 0.37377 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 32.26154490280152 

Total Inference Time : 10.467059135437012 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.271
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.08302753548872303;  // std dev = 0.235, 51.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.1566563977860793;  // std dev = 0.458, 67.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7217577980008784;  // std dev = 0.147, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03538212909076893;  // std dev = 0.263, 139.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.031959623678835654;  // std dev = 1.755, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7533351197559893;  // std dev = 0.142, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.12964988801755453;  // std dev = 4.484, 113.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5452977584036417;  // std dev = 1.041, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.4784556045532368;  // std dev = 0.898, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.48270316302208793;  // std dev = 0.850, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5548022718423931;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.554802271842393;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01565675871693563;  // std dev = 4.224, 219.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=29 */
%   | | | else return 0.10845196660908493;  // std dev = 3.623, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5366362812446966;  // std dev = 2.473, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12159967917779556;  // std dev = 0.045, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | | else return -0.13614100534084303;  // std dev = 0.018, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1655461975413613;  // std dev = 0.261, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2730242669971066;  // std dev = 1.718, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | else return 0.5364795282727441;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.23615092364186072;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6048058871419341;  // std dev = 0.868, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return -0.11130358508626069;  // std dev = 1.262, 202.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=2 */
%   | | else return 0.003992869000624983;  // std dev = 0.308, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016688859998481905;  // std dev = 2.958, 195.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25791137909145473;  // std dev = 0.150, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4868340263200198;  // std dev = 1.572, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11608282587605215;  // std dev = 0.156, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.13161161200551047;  // std dev = 0.205, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26163384108227394;  // std dev = 2.186, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | else return -0.09418380761763297;  // std dev = 1.325, 221.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04587825493215847;  // std dev = 2.035, 68.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16455838946038173;  // std dev = 1.392, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.2870311679285755;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05220110500190148;  // std dev = 0.170, 139.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.024604079341807257;  // std dev = 2.180, 105.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=23 */
%   | | | else return 0.0752862383146129;  // std dev = 2.296, 55.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15621303829450886;  // std dev = 0.179, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2990504835612762;  // std dev = 0.821, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09101542821008776;  // std dev = 0.116, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3782409792269413;  // std dev = 0.668, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12386184525078228;  // std dev = 0.253, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.191335764364908;  // std dev = 0.632, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.10343750352003102;  // std dev = 1.056, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08110884109962282;  // std dev = 0.034, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09537344369198623;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.015660501378197897;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.004753509033797135;  // std dev = 1.098, 66.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20063627547549967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0222130139797972;  // std dev = 1.773, 57.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.253', 'seconds']
Parameter learned model CLL:-0.112151 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 81], 'true,false,true': [6.66e-08, 115, 0], 'true,false,false': [0.235, 48, 3], 'false,true,true,true': [0.0, 0, 17], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.94e-08, 46, 0], 'false,false': [0.458, 47, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.147, 0, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 124, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.755, 33, 4], 'false,false,false,true': [0.142, 0, 7], 'false,false,false,false': [4.484, 80, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.041, 1, 50], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.898, 1, 3], 'true,false,false': [0.85, 1, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [2.98e-08, 0, 12], 'false,false,false,true': [4.224, 190, 29], 'false,false,false,false': [3.623, 50, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.473, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.045, 121, 0], 'false,true,false,false': [0.018, 27, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.261, 80, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.718, 3, 59], 'true,false': [0.0, 0, 1], 'false,true,true': [0.97, 1, 16], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.868, 1, 35], 'false,false,true,false': [1.262, 200, 2], 'false,false,false': [0.308, 49, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.958, 132, 63], 'false,true': [0.15, 0, 17], 'false,false,true': [1.572, 1, 44], 'false,false,false,true': [0.156, 80, 0], 'false,false,false,false': [0.205, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.186, 4, 97], 'true,false': [1.325, 217, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.035, 45, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.392, 2, 64], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 124, 15], 'false,false,false,true': [2.18, 82, 23], 'false,false,false,false': [2.296, 34, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.179, 2, 60], 'false,true,true,true': [0.821, 0, 31], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.116, 166, 0], 'false,false,true': [0.668, 0, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 69, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.632, 0, 65], 'true,true,false': [1.056, 1, 16], 'true,false,true': [0.034, 119, 0], 'true,false,false,true': [0.028, 20, 0], 'true,false,false,false': [0.979, 21, 3], 'false,true': [1.098, 46, 20], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.773, 39, 18]}]
{'': [0.22442590437476506, 0.21030018655661836], 'true': [-7.894919286223335e-16, 0.017745681521265683], 'false': [0.2112029384756653, 0.2094007574069944], 'false,true': [-8.881784197001253e-17, 5.3097622916855314e-17], 'true,false': [3.8616453030440226e-17, 0.05536332179930781], 'false,true,true': [-2.0898315757650005e-16, 1.4802973661668753e-16]}
{'': [0.0003339787799816918, 0.1292176413588449], 'false': [0.06909988178922286, 0.17119679037811597], 'false,false': [0.08323105710391092, 0.1890812247883625], 'false,false,false': [0.0028665380946637825, 0.17792595720771281], 'false,false,true': [nan, 0.08323105710391092], 'false,true': [nan, 0.06909988178922286]}
{'': [0.04210177703960849, 0.11908697298232922], 'false': [nan, 0.11908697298232791], 'false,false': [2.220446049250313e-16, 0.11031432932361596], 'false,false,false': [0.08145816073225733, 0.19018861976043677], 'true': [0.021252820968489884, 0.12739294809668014], 'true,false': [0.2017241982801181, 0.09022130908731243], 'true,true': [0.021252820968489884, nan], 'false,false,true': [0.0, 7.401486830834377e-17]}
{'': [0.04816085081317147, 0.0007174285031885196], 'false': [4.718336064489402e-05, 0.0008505170259305583], 'false,false': [nan, 0.0008505170259305583], 'false,false,false': [nan, 0.0008505170259305583], 'false,true': [nan, 4.718336064489102e-05], 'false,true,false': [1.6439752796145763e-05, 1.2085471540186684e-05]}
{'': [0.047957009809548555, 0.08117067695655505], 'false': [0.055363321799307925, 0.07959284781525874], 'false,false': [0.0756942927744502, 0.09501823448993311], 'false,false,true': [0.020909706096554428, 0.00788956338808551], 'false,true': [0.055363321799307925, nan], 'true': [0.047628784972627146, 0.0]}
{'': [0.044858082704685935, 0.07856600458150662], 'false': [0.001330440840876445, 0.08092848610469519], 'false,false': [0.05489591571157872, 0.000521129701993969], 'true': [nan, 0.0448580827046857], 'true,false': [nan, 0.044858082704685935], 'false,false,false': [0.00030321815665494136, 0.0006595506899707802]}
{'': [0.04755096740889158, 0.06092168583971223], 'false': [nan, 0.06092168583971219], 'false,false': [nan, 0.06092168583971223], 'false,false,false': [nan, 0.06092168583971223], 'true': [0.047314076423096825, 0.007947347470458029]}
{'': [0.02915318055516856, 0.04913709976007565], 'false': [nan, 0.04913709976007566], 'false,false': [0.028952550274722093, 0.06488920110646004], 'false,false,false': [0.04526320368214782, 0.09580890228382154], 'true': [0.029371021061830448, 0.0], 'true,false': [0.0, nan]}
{'': [0.032116563073497105, 0.03716650770857813], 'false': [0.023662894529042657, 0.06018089669234178], 'false,false': [0.013530580910442088, 0.0009278081709325944], 'false,true': [0.021730683381826973, 8.112060631992612e-05], 'false,true,true': [0.021730683381826973, nan], 'false,false,false': [nan, 0.0009278081709325944]}
{'': [0.02443080547321921, 0.03542575223125954], 'false': [0.01826701201892151, 0.054328494797674785], 'false,false': [0.0, 0.055155609968192285], 'false,false,false': [nan, 0.05515560996819234], 'true': [0.019725668931659, 0.006488189723661302], 'true,true': [0.006139870147514242, 0.06554701922770242], 'true,false': [9.901367005835921e-06, 0.02338588799037776], 'true,false,false': [3.908787067115616e-05, 0.03995330331483566]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.198
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8204130860429085;  // std dev = 0.191, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.12399392204334521;  // std dev = 0.132, 168.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7277775125398579;  // std dev = 0.148, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.648941192407057;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(A, F) )
%   | | then return 0.4770262433518031;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(E, G), follows(G, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7705099902375151;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6761121289709144;  // std dev = 0.843, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12741685370936331;  // std dev = 1.48e-07, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.06953645010376511;  // std dev = 2.567, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | | | else return 0.17195892691125367;  // std dev = 3.338, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.5701070875264158;  // std dev = 0.109, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(E, A) )
%   | | then return 0.6968731739787515;  // std dev = 0.165, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5517562490385384;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5581632940288558;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5549310553284519;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10704166106852735;  // std dev = 0.677, 99.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=1 */
%   | | | else return 0.0022658070381810307;  // std dev = 2.411, 81.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=14 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08032675018398706;  // std dev = 3.542, 91.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=24 */
%   | | | else return 0.16881611543685515;  // std dev = 2.268, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.42420806563460917;  // std dev = 0.062, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.4946049134368249;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.36119181152205576;  // std dev = 0.945, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.0850584945825839;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.4196304654714848;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3401600964960977;  // std dev = 0.962, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.5813359379792679;  // std dev = 0.204, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6432713279874229;  // std dev = 1.367, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   else return -0.12109026190770625;  // std dev = 0.026, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3177825551808024;  // std dev = 0.134, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return -0.05656364912812201;  // std dev = 0.789, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return -0.06852338346750832;  // std dev = 0.113, 133.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=7 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.42119668577075187;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10245540001513742;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.44423866381644483;  // std dev = 0.564, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.11690405015948697;  // std dev = 0.172, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08665791797923414;  // std dev = 1.775, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | | else return 0.22142970154311556;  // std dev = 1.666, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2614661237054485;  // std dev = 0.012, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( tweets(A, E) )
%   | | then return -0.046873095762157466;  // std dev = 0.168, 131.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=15 */
%   | | else return -0.09042035442583274;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.30507547010384617;  // std dev = 0.246, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.10646332311561954;  // std dev = 0.352, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.19283552135640983;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4509986856396756;  // std dev = 1.089, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12816087350187;  // std dev = 0.175, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return -0.14276952712674745;  // std dev = 0.455, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.22502484403915646;  // std dev = 0.219, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.04925798687347516;  // std dev = 0.651, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3269073761271183;  // std dev = 0.079, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return -0.0919261013494707;  // std dev = 0.038, 207.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.22677582885182754;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3031853242972279;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08533172583279063;  // std dev = 0.127, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.01472514526034225;  // std dev = 0.330, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.0137064699017843;  // std dev = 1.557, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16317550728911687;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return -0.2316841704032549;  // std dev = 0.838, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return 0.2511511734842472;  // std dev = 0.912, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.35440065352044353;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0791598054060466;  // std dev = 0.013, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.27147925177779325;  // std dev = 0.338, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.10855703479814412;  // std dev = 0.123, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14016413854164822;  // std dev = 0.292, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.17679441295396575;  // std dev = 1.162, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.09703972747458153;  // std dev = 1.377, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return -0.041528168921114064;  // std dev = 0.828, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16870281483756266;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.20491210202775711;  // std dev = 0.090, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2099470399840323;  // std dev = 0.062, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.07521982962923011;  // std dev = 0.042, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.22820743191947465;  // std dev = 0.108, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.37770148134501297;  // std dev = 0.366, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11753837789745362;  // std dev = 0.044, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.0974572988825514;  // std dev = 1.385, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.19577940251087747;  // std dev = 0.264, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.06773382675083395;  // std dev = 0.960, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.18936323204256822;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.0594483004413494;  // std dev = 0.055, 139.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=3 */
%   else if ( tweets(A, H) )
%   | then return 0.011986495491999047;  // std dev = 0.118, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.08533652798013813;  // std dev = 0.612, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.026876861374644574;  // std dev = 1.248, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0.1302525056358089;  // std dev = 0.896, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.180', 'seconds']
Refined model CLL: -0.105688


******************************************
Best model found
******************************************
Results 

CLL : -0.099741 

AUC ROC : 0.993146 

AUC PR : 0.375202 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 13.198 

Total Inference Time : 13.413773536682129 

Total revision time: 37.497650760650636
Best scored revision CLL: -0.105688


Results 

CLL : -0.099741 

AUC ROC : 0.993146 

AUC PR : 0.375202 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 37.512946743011476 

Total Inference Time : 13.413773536682129 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.734
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0.17759337954395607;  // std dev = 0.466, 72.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266428197085572;  // std dev = 0.201, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.036203255934091266;  // std dev = 0.262, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06806875743227811;  // std dev = 1.796, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7483867503619912;  // std dev = 0.142, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10183668733479628;  // std dev = 5.015, 152.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5711040277158922;  // std dev = 0.370, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.2695469748154827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.36053439393015496;  // std dev = 1.043, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.587557204254157;  // std dev = 0.193, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.591681746237979;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5582533021135827;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012160327297795778;  // std dev = 4.585, 249.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=34 */
%   | | | else return 0.04365554621374581;  // std dev = 4.154, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5126550590870075;  // std dev = 3.243, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1216663960064089;  // std dev = 0.039, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | | else return -0.127479137059485;  // std dev = 0.012, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16227019214300376;  // std dev = 0.229, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2962869800131264;  // std dev = 1.461, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.5678423254069473;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30045180319558207;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5104749477743962;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6193928513339052;  // std dev = 0.900, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10262809455503502;  // std dev = 1.811, 266.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=5 */
%   | | else return 0.01902867709082103;  // std dev = 0.311, 70.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018486181377914822;  // std dev = 3.413, 243.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2583096697211084;  // std dev = 0.225, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5140193790831323;  // std dev = 1.395, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12124215311615795;  // std dev = 0.195, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.12459141056540227;  // std dev = 0.176, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2577169703281698;  // std dev = 2.436, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.08795865130287668;  // std dev = 1.778, 253.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04989463049128148;  // std dev = 2.285, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.168818727831884;  // std dev = 1.399, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2898487799087586;  // std dev = 0.025, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04869527324669109;  // std dev = 0.144, 197.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007064197967023533;  // std dev = 2.220, 119.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=28 */
%   | | | else return 0.031635215146959855;  // std dev = 2.580, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15390104909387894;  // std dev = 0.170, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2879066908125159;  // std dev = 0.911, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0924344493254619;  // std dev = 0.117, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4052313146529416;  // std dev = 0.806, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11455476397388924;  // std dev = 0.248, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16763546503661272;  // std dev = 1.531, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.1582087037495063;  // std dev = 0.371, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08226717778137911;  // std dev = 0.021, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1059977071701676;  // std dev = 0.259, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.02691924246133172;  // std dev = 1.136, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.007992872714443969;  // std dev = 1.602, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1854648831271397;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027210529805635156;  // std dev = 2.012, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.023', 'seconds']
Parameter learned model CLL:-0.109933 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 162, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.58e-08, 54, 0], 'false,false': [0.466, 49, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.201, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 160, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.796, 53, 4], 'false,false,false,true': [0.142, 0, 8], 'false,false,false,false': [5.015, 112, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.37, 0, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [1.043, 2, 3], 'true,false,false': [0.193, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.585, 215, 34], 'false,false,false,false': [4.154, 88, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.243, 7, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 172, 0], 'false,true,false,false': [0.012, 41, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.229, 83, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.461, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.9, 1, 39], 'false,false,true,false': [1.811, 261, 5], 'false,false,false': [0.311, 57, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.413, 161, 82], 'false,true': [0.225, 0, 22], 'false,false,true': [1.395, 1, 52], 'false,false,false,true': [0.195, 95, 0], 'false,false,false,false': [0.176, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.436, 5, 121], 'true,false': [1.778, 246, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.285, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.399, 2, 83], 'true,false,true': [0.025, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 178, 19], 'false,false,false,true': [2.22, 91, 28], 'false,false,false,false': [2.58, 62, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.17, 3, 78], 'false,true,true,true': [0.911, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.117, 205, 0], 'false,false,true': [0.806, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.248, 93, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.531, 2, 85], 'true,true,false': [0.371, 0, 19], 'true,false,true': [0.021, 158, 0], 'true,false,false,true': [0.259, 29, 0], 'true,false,false,false': [1.136, 23, 4], 'false,true': [1.602, 62, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.012, 49, 21]}]
{'': [0.22153637698069403, 0.21683259506162092], 'true': [0.01851192595229848, 0.01785123966942138], 'false': [0.21631148854350374, 0.2173996913580257], 'false,true': [7.105427357601002e-16, 5.756711979537848e-17], 'true,false': [-1.507710280355151e-16, 0.06420927467300819], 'false,true,true': [0.0, 0.0]}
{'': [0.00047329490327436305, 0.11849907201143169], 'false': [0.06862125629020234, 0.15342873465297624], 'false,false': [0.05658308514216513, 0.1771871612646801], 'false,false,false': [0.002507943369108756, 0.1654794551117918], 'false,true': [nan, 0.06862125629020234], 'false,false,true': [nan, 0.05658308514216513]}
{'': [0.02659120609102751, 0.11767744023229249], 'false': [nan, 0.1176774402322901], 'false,false': [0.0018244259209433452, 0.10698001999995199], 'false,false,false': [0.08441154489959328, 0.15545177282850298], 'true': [0.012257364909161255, 0.09869514545698112], 'true,false': [0.21746166448748347, 0.004643241675452658], 'true,true': [0.0020477502414710837, 0.0], 'false,false,true': [0.00558730438288942, -5.921189464667501e-17]}
{'': [0.06451326082748014, 0.0005006791129029987], 'false': [1.3262236384846031e-05, 0.0006296301216317577], 'false,false': [nan, 0.0006296301216317577], 'false,false,false': [nan, 0.0006296301216317577], 'false,true': [nan, 1.3262236384846031e-05], 'false,true,false': [9.069904731257405e-06, 3.5654058297377903e-06]}
{'': [0.027581698130313758, 0.07810292003323768], 'false': [0.002009196644856273, 0.07714999928214863], 'false,false': [0.07259705106379287, 0.0964474606544736], 'false,false,true': [0.020247193619504333, 0.01232355696655167], 'true': [0.02700905472953531, 0.0], 'false,true': [9.193560014630897e-06, 0.0]}
{'': [0.04794211215064238, 0.08207395930611282], 'false': [0.0022933909895241507, 0.08578139292092753], 'false,false': [0.03673430590751194, 0.0004398022635200522], 'true': [nan, 0.04794211215064242], 'true,false': [nan, 0.04794211215064238], 'false,false,false': [0.00040048899500801576, 0.0004923394616795988]}
{'': [0.05050876776604303, 0.06693566668570734], 'false': [nan, 0.06693566668570729], 'false,false': [nan, 0.06693566668570734], 'false,false,false': [nan, 0.06693566668570734], 'true': [0.04708125891095709, 0.012490297117289937]}
{'': [0.02282760645528541, 0.039975702366070925], 'false': [nan, 0.0399757023660706], 'false,false': [0.020673664489390432, 0.056883573932550766], 'false,false,false': [0.04142648017013722, 0.07740251368012731], 'true': [0.023020472623508623, 0.0003192627197393244], 'true,false': [0.0003192627197393244, nan]}
{'': [0.02900451865680215, 0.03784474445931644], 'false': [0.02255624431317252, 0.062168775970522144], 'false,false': [0.016253657707079094, 0.0006608026447947454], 'false,true': [0.021844544356970655, 6.653729217534962e-05], 'false,true,true': [0.021844544356970655, nan], 'false,false,false': [nan, 0.0006608026447947454]}
{'': [0.025543697868628885, 0.042293979839630264], 'false': [0.02949972731341161, 0.05689567970512496], 'false,false': [0.0, 0.057825591655364966], 'false,false,false': [nan, 0.05782559165536486], 'true': [0.02343002017720111, 0.006797261244139499], 'true,true': [0.02694786230785715, 0.0072490708042141664], 'true,false': [2.7935484917684095e-06, 0.025814341510947632], 'true,false,false': [0.002317648211824347, 0.04781316089856863]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 24.125
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.12112567629945195;  // std dev = 0.142, 193.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.7213915923008607;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.6499630208722884;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7351072574217729;  // std dev = 0.203, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7357603843322925;  // std dev = 0.203, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3880582589675267;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12773609136909683;  // std dev = 8.69e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7262849042285142;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10543598245118846;  // std dev = 3.625, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.16387679834100427;  // std dev = 2.983, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.49039219999211175;  // std dev = 1.926, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | | else return 0.565340909870834;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then return 0.6952654944028976;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4512864381843873;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.564121801026837;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then return -0.06349721858558643;  // std dev = 0.185, 225.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11856662315339167;  // std dev = 3.825, 95.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=29 */
%   | | | else return 0.22191447440096881;  // std dev = 2.384, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4165644541739573;  // std dev = 0.977, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.5528067570637383;  // std dev = 0.376, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.42291627978383634;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.050968072851693386;  // std dev = 1.126, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.44883146011041414;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5084789591140902;  // std dev = 0.137, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6947845521535214;  // std dev = 0.303, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(I, A) )
%   | then return -0.10790138374930443;  // std dev = 5.59e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return -0.1684667140124958;  // std dev = 0.245, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.3216085821709622;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3409973007921305;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.08290229352078056;  // std dev = 0.618, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4955686073727391;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3254473734261041;  // std dev = 0.035, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09393105522529888;  // std dev = 0.528, 132.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=1 */
%   | | | else return -0.003782479511475331;  // std dev = 2.109, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0017541038953334809;  // std dev = 2.599, 83.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=19 */
%   | | | else return 0.0932201389665457;  // std dev = 2.683, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(E, D) )
%   | | | then return 0.2514729657648943;  // std dev = 0.993, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.00815134917018806;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.3974463492391645;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then return -0.03730667147932252;  // std dev = 0.159, 132.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=14 */
%   | | else return -0.07158159753639816;  // std dev = 0.119, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2628278370763674;  // std dev = 0.040, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.19259114117876414;  // std dev = 0.978, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4857428074827484;  // std dev = 1.419, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return -0.1290202274068399;  // std dev = 0.035, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.18678424249871384;  // std dev = 0.182, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | | else if ( follows(A, C) )
%   | | | then return 0.3881604838297303;  // std dev = 0.493, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.08081580024808954;  // std dev = 0.936, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08256149044931345;  // std dev = 0.052, 224.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.251768966242918;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3425093754633729;  // std dev = 1.001, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.1219899472179076;  // std dev = 0.042, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.12797503066462457;  // std dev = 0.888, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.032572468615293504;  // std dev = 1.673, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17930367621481602;  // std dev = 0.106, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.2658565343493116;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.038670032917431575;  // std dev = 0.990, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.38244613558662527;  // std dev = 0.271, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.08132897485306305;  // std dev = 0.057, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2857811691000664;  // std dev = 0.279, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10945636482708732;  // std dev = 0.069, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.008381377656099283;  // std dev = 1.231, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
%   | | | else return -0.007992788271438714;  // std dev = 1.924, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16868583531253656;  // std dev = 0.017, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.033243260367806705;  // std dev = 0.374, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.03600508814850909;  // std dev = 0.413, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1572598212238782;  // std dev = 0.077, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.24222399752729254;  // std dev = 1.015, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07555414421621483;  // std dev = 0.058, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2734964520312276;  // std dev = 0.068, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.42278735125049827;  // std dev = 0.311, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12546099116714338;  // std dev = 0.036, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.13207768587513194;  // std dev = 0.110, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.15591254350347764;  // std dev = 0.166, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return -0.06352151572918563;  // std dev = 0.052, 205.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.14822206013682127;  // std dev = 1.020, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08848739746460517;  // std dev = 0.051, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.014035032641994138;  // std dev = 0.182, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2342995828032166;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.007875417997199539;  // std dev = 1.161, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return -0.03766893639516943;  // std dev = 1.376, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.982', 'seconds']
Refined model CLL: -0.103331


******************************************
Best model found
******************************************
Results 

CLL : -0.104649 

AUC ROC : 0.993035 

AUC PR : 0.354284 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 24.125 

Total Inference Time : 16.54898190498352 

Total revision time: 53.081774744033815
Best scored revision CLL: -0.103331


Results 

CLL : -0.104649 

AUC ROC : 0.993035 

AUC PR : 0.354284 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 53.097070726394655 

Total Inference Time : 16.54898190498352 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.112
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6644887445562008;  // std dev = 0.983, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015375036594832933;  // std dev = 0.315, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006385396401564473;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.27959607097292616;  // std dev = 0.622, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.02824261536169698;  // std dev = 1.258, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.6004980915225195;  // std dev = 0.226, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7841353816935508;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6597667594892305;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5688994433596555;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5688994433596555;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07086088165935746;  // std dev = 1.420, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | | | else return 0.005150884746810548;  // std dev = 1.270, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4997263636440658;  // std dev = 1.061, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12573626542724797;  // std dev = 0.071, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.12771386846059032;  // std dev = 9.13e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13183912924794763;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3544801215663455;  // std dev = 0.337, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.402825969243424;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3118974387359851;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6218976366264373;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08200295603381072;  // std dev = 1.210, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | else return -0.1363021917349643;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.042689504926416266;  // std dev = 1.407, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27706970410056214;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5826807117015113;  // std dev = 0.403, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11542346685041133;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1308880029221909;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.287001765289297;  // std dev = 0.401, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.07910053681890244;  // std dev = 1.053, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0195707795328344;  // std dev = 0.369, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11849779433431239;  // std dev = 0.970, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, E) )
%   | | then return 0.2211269408592057;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03359340793268686;  // std dev = 0.157, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.040379661157062936;  // std dev = 0.425, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.40753825366006785;  // std dev = 0.639, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14056281025294576;  // std dev = 0.244, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2892124431684676;  // std dev = 0.263, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09496207519404826;  // std dev = 0.021, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5729510013320446;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11608634100042478;  // std dev = 0.108, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19778140948036532;  // std dev = 0.322, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.145745141594657;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.0870489240392119;  // std dev = 0.017, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09376973836542264;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.009988459586807913;  // std dev = 0.374, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.09737151900477661;  // std dev = 0.386, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04496836217275857;  // std dev = 0.668, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.175', 'seconds']
Parameter learned model CLL:-0.11258 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [2.79e-08, 30, 0], 'true,false,false': [0.452, 5, 2], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,false': [0.452, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.983, 1, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.315, 30, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.913, 5, 1], 'false,false,false,true': [0.622, 1, 1], 'false,false,false,false': [1.258, 10, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.226, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.077, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.42, 37, 3], 'false,false,false,false': [1.27, 12, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.061, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.071, 31, 0], 'false,true,false,false': [9.13e-09, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.054, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.337, 0, 15], 'true,false': [0.035, 0, 2], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [1.21, 51, 2], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.407, 32, 18], 'false,true': [0.068, 0, 3], 'false,false,true': [0.403, 0, 4], 'false,false,false,true': [0.053, 9, 0], 'false,false,false,false': [0.018, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.401, 0, 21], 'true,false': [1.053, 52, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.369, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.97, 1, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 35, 6], 'false,false,false,true': [0.425, 9, 2], 'false,false,false,false': [0.639, 1, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.244, 1, 17], 'false,true,true,true': [0.263, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.021, 43, 0], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.108, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.322, 0, 18], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.017, 42, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.374, 4, 2], 'false,true': [0.386, 4, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.668, 4, 2]}]
{'': [0.23699599876885288, 0.15999999999999986], 'true': [-8.881784197001253e-17, 0.05113221329437552], 'false': [0.10937500000000004, 0.20408163265306126], 'false,true': [0.0, -7.93016446160826e-18], 'true,false': [2.590520390792032e-17, 0.20408163265306126], 'false,true,true': [0.0, nan]}
{'': [0.06038036984704853, 0.11619864221694388], 'false': [0.09915090450905234, 0.14624888997486463], 'false,false': [0.1388888888888889, 0.14840214259611884], 'false,false,false': [0.19349207533463683, 0.13186164528526484], 'false,false,true': [nan, 0.1388888888888889], 'false,true': [nan, 0.09915090450905234]}
{'': [0.006911753975520535, 0.0839017935586318], 'false': [nan, 0.08390179355863184], 'false,false': [0.0, 0.06832792901614577], 'false,false,false': [0.05043122575939424, 0.11518152346132991], 'true': [0.0036610734076417523, 0.005433570498241114], 'true,false': [0.0029945043510281044, 0.0], 'true,true': [0.0036610734076417523, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.0433177362478493, 0.00017070177553177765], 'false': [0.00012696068018022423, 0.00036273069568853664], 'false,false': [nan, 0.00036273069568853664], 'false,false,false': [nan, 0.00036273069568853664], 'false,true': [nan, 0.00012696068018022423], 'false,true,false': [0.00016294027689516482, 9.25185853854297e-18]}
{'': [0.007006948178970805, 0.052027394788452294], 'false': [0.0, 0.048377353418437255], 'false,false': [0.05126851145359352, 0.0], 'false,false,true': [0.0, 0.02762714314933461], 'true': [0.00758530445752621, 0.0006069340419090075], 'false,true': [0.0, nan]}
{'': [0.03958101973045628, 0.08863572885742801], 'false': [0.0015592318586857095, 0.09480605660963984], 'false,false': [0.040584895018579314, 0.00027753377859040883], 'true': [nan, 0.03958101973045626], 'true,false': [nan, 0.03958101973045628], 'false,false,false': [0.00031036298745411154, 6.470071097585129e-05]}
{'': [0.04395829763770857, 0.0194556403718921], 'true': [0.007667832336353983, 0.02054260559551456], 'false': [nan, 0.0194556403718921], 'false,false': [nan, 0.0194556403718921], 'false,false,false': [nan, 0.0194556403718921]}
{'': [0.05948291943433086, 0.039181488140335355], 'true': [0.06279015103934284, 0.0], 'false': [nan, 0.039181488140335355], 'false,false': [0.024633329782490016, 0.07585600664453074], 'false,false,false': [0.016403786660474026, 0.13620926259402028], 'true,false': [0.0, nan]}
{'': [0.059422231654569696, 0.028477949641728558], 'false': [0.01727764586427039, 0.08336019780128129], 'false,false': [0.0, 0.0016724062556109345], 'false,true': [0.011507088753883843, 1.0587566317557335e-05], 'false,true,true': [0.011507088753883843, nan], 'false,false,false': [nan, 0.0016724062556109345]}
{'': [0.01895666894266111, 0.05916958422180669], 'false': [0.02985402313099387, 0.07438983583977123], 'false,false': [nan, 0.07438983583977123], 'false,false,false': [nan, 0.07438983583977123], 'true': [0.005426877914399586, 0.003808977473996703], 'true,true': [0.005759087031785558, 0.0], 'true,false': [6.885776353742001e-06, 0.019523841190570573], 'true,false,false': [0.0, 0.02334034734352053]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 25.059
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7390517380506593;  // std dev = 0.151, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), follows(D, A) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.06149654885263983;  // std dev = 1.163, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.08578487415644506;  // std dev = 1.035, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.13548588606680176;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, G) )
%   | | then return 0.05402130728925583;  // std dev = 0.385, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.3397187297348978;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5651423324053672;  // std dev = 0.103, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3005267800035212;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.6905729656192474;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5505267800035212;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7162001552212303;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1044785395287664;  // std dev = 0.859, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | | else return -0.014024948344111946;  // std dev = 1.088, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12394104333839329;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.20456969336008535;  // std dev = 1.068, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.3103925089266252;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.5018073716860865;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.46875434006157934;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.5523008028507866;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7332400047581388;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.12389062185770881;  // std dev = 0.128, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.10459933361348166;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, J) )
%   | | then return -0.0996357834999637;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.17602483598782628;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.33788458421373835;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3646723800138534;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3686918619541415;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3551645777205559;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4153424568022195;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.55362855433169;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09219618650707724;  // std dev = 1.033, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | else return -0.15236141502979914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then return 0.011271363755148865;  // std dev = 0.233, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3145750166215799;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.20299517619529245;  // std dev = 1.142, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11322953235998015;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.1558866265561648;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(A, E), follows(F, D) )
%   | then if ( tweets(D, C), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.23778726567616612;  // std dev = 1.031, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.08554325225511517;  // std dev = 0.372, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | else return -0.11158019383465521;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.06716363017413261;  // std dev = 0.450, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2636125773733348;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08851023566513928;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.08395437394742504;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.005069112545420489;  // std dev = 0.306, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.13533903904357636;  // std dev = 0.290, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.23913463462902823;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.24481050633873336;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.29409345271831516;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3980915278709038;  // std dev = 0.352, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09783136860830448;  // std dev = 0.029, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.12376135439376079;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19906754868264656;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.17623871283397083;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2545616861431549;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.078640227118257;  // std dev = 0.044, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.1073756815953214;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.4687375710786791;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10596699215490013;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16650689984659048;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.23556489070020314;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15823113510574893;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07691390285372622;  // std dev = 0.044, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.07074315196754141;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.10079517420051153;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.013226729665762518;  // std dev = 0.307, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.018840647777501798;  // std dev = 0.284, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '14.730', 'seconds']
Refined model CLL: -0.103452


******************************************
Best model found
******************************************
Results 

CLL : -0.101746 

AUC ROC : 0.993454 

AUC PR : 0.307656 

Precision : 0.33713 

Recall : 0.948718 

F1 : 0.497479 

Total Learning Time : 25.059 

Total Inference Time : 14.643925666809082 

Total revision time: 43.1322820148468
Best scored revision CLL: -0.103452


Results 

CLL : -0.101746 

AUC ROC : 0.993454 

AUC PR : 0.307656 

Precision : 0.33713 

Recall : 0.948718 

F1 : 0.497479 

Total Learning Time : 43.14757799720764 

Total Inference Time : 14.643925666809082 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.466
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.03658790700575096;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7025153193060998;  // std dev = 0.998, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.019986732259935316;  // std dev = 0.281, 81.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04654624386492605;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.02214395759153739;  // std dev = 1.920, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.564143092603151;  // std dev = 0.898, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.7326970048535121;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8122802021560364;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5709791986356809;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5709791986356809;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07148786364905715;  // std dev = 2.028, 95.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=6 */
%   | | | else return 0.07799534910009524;  // std dev = 1.671, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4883034812420457;  // std dev = 1.678, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11648373694246213;  // std dev = 0.021, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.13272135574025035;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1530229641753025;  // std dev = 0.168, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3536276096425008;  // std dev = 0.432, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.42239707800823884;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31573644944687884;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.658412467960658;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09957218762862646;  // std dev = 1.188, 113.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=2 */
%   | | else return -0.11193707176467123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03473530297535261;  // std dev = 2.095, 107.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27279650123376564;  // std dev = 0.094, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5204638337624821;  // std dev = 0.465, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1145777452665184;  // std dev = 0.092, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.11722534796003474;  // std dev = 0.104, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2737021848376402;  // std dev = 1.207, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return -0.08990469153691005;  // std dev = 1.024, 111.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -3.2495400235971834E-4;  // std dev = 0.491, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1628982578942942;  // std dev = 0.986, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( follows(A, E) )
%   | | then return 0.22068021366782398;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043608118796551854;  // std dev = 0.143, 92.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005268334917450957;  // std dev = 0.583, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.06152251777038174;  // std dev = 1.098, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.200200590264268;  // std dev = 0.066, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2684971364486912;  // std dev = 0.426, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.089954924087361;  // std dev = 0.046, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44779676173356187;  // std dev = 0.331, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11236193816566728;  // std dev = 0.145, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16677409427875456;  // std dev = 1.012, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.14270057422553706;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08276115341836246;  // std dev = 0.041, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08349227494248848;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.05080266263928814;  // std dev = 0.371, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.033572965308178764;  // std dev = 0.467, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.058715847620754234;  // std dev = 0.865, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.582', 'seconds']
Parameter learned model CLL:-0.109568 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.381, 2, 41], 'true,false,true': [6.5e-08, 64, 0], 'true,false,false': [0.307, 17, 2], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.497, 5, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.998, 1, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 71, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.953, 10, 1], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [1.92, 23, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.898, 1, 27], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.028, 89, 6], 'false,false,false,false': [1.671, 14, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.678, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 79, 0], 'false,true,false,false': [0.009, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.168, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.432, 0, 29], 'true,false': [0.075, 0, 3], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.091, 0, 8], 'false,false,true,false': [1.188, 111, 2], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.095, 70, 37], 'false,true': [0.094, 0, 5], 'false,false,true': [0.465, 0, 8], 'false,false,false,true': [0.092, 15, 0], 'false,false,false,false': [0.104, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.207, 1, 44], 'true,false': [1.024, 109, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.491, 9, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.986, 1, 30], 'true,false,true': [0.032, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 82, 10], 'false,false,false,true': [0.583, 12, 4], 'false,false,false,false': [1.098, 9, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.066, 0, 32], 'false,true,true,true': [0.426, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.046, 85, 0], 'false,false,true': [0.331, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.145, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.012, 1, 37], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.041, 85, 0], 'true,false,false,true': [2.63e-09, 5, 0], 'true,false,false,false': [0.371, 3, 2], 'false,true': [0.467, 7, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.865, 7, 4]}]
{'': [0.22480473670949966, 0.20659722222222232], 'true': [0.044348296376420925, 0.023515749745971874], 'false': [0.15999999999999986, 0.2469135802469134], 'false,true': [1.4802973661668753e-16, -1.1564823173178714e-17], 'true,false': [6.591949208711867e-17, 0.09418282548476457], 'false,true,true': [1.4802973661668753e-16, nan]}
{'': [0.03015635409217216, 0.09896500763438139], 'false': [0.07896172696113825, 0.13588718128268967], 'false,false': [0.0826446280991736, 0.15195153240264378], 'false,false,false': [0.22222222222222224, 0.1316006096337829], 'false,false,true': [nan, 0.0826446280991736], 'false,true': [nan, 0.07896172696113825]}
{'': [0.028914883803426893, 0.08348983046613428], 'false': [nan, 0.08348983046613444], 'false,false': [1.1102230246251565e-16, 0.06409583984705969], 'false,false,false': [0.043295768305627085, 0.15508818162133056], 'true': [0.028739650957182995, 0.009367100537761464], 'true,true': [0.028786397361593163, 0.0], 'true,false': [0.0031014323184006543, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.05416528830445935, 0.00045571334151536954], 'false': [3.588293693664783e-05, 0.0014876322329592999], 'false,false': [nan, 0.0014876322329592999], 'false,false,false': [nan, 0.0014876322329592999], 'false,true': [nan, 3.588293693664783e-05], 'false,true,false': [5.566176129385084e-06, 6.576401186333032e-06]}
{'': [0.006414031339773446, 0.05002673503786668], 'false': [-1.3877787807814457e-17, 0.04514654183012541], 'false,false': [0.047200786699177114, -2.3129646346357427e-18], 'false,false,true': [0.0010296806974137707, 0.0124833730634969], 'true': [0.0064412885351436125, 0.001864671567865887], 'false,true': [-1.3877787807814457e-17, nan]}
{'': [0.04101947352471853, 0.0728848617917681], 'false': [0.0017677361086640198, 0.07499099587739445], 'false,false': [0.027051266560788934, 0.000669197138140048], 'true': [nan, 0.041019473524718686], 'true,false': [nan, 0.04101947352471853], 'false,false,false': [0.0005667554523185847, 0.0007753303286020233]}
{'': [0.043197167133800965, 0.018540553044942707], 'true': [0.03238422724858925, 0.009443302792303909], 'false': [nan, 0.018540553044942707], 'false,false': [nan, 0.018540553044942707], 'false,false,false': [nan, 0.018540553044942707]}
{'': [0.029671075222865013, 0.02946817452168104], 'true': [0.031350373223920744, 0.0005055505457908505], 'false': [nan, 0.029468174521681167], 'false,false': [0.020491890817974222, 0.05439982610863367], 'false,false,false': [0.021240705129501547, 0.09274980061723212], 'true,false': [0.0005055505457908505, nan]}
{'': [0.004389253691260683, 0.024673836269053926], 'false': [0.01665483219120809, 0.05377209622686567], 'false,false': [0.02196029075627255, 0.001004456956780795], 'false,true': [0.01394868335939206, 2.4403204464443054e-05], 'false,true,true': [0.01394868335939206, nan], 'false,false,false': [nan, 0.001004456956780795]}
{'': [0.021396848577093085, 0.0481145536805472], 'false': [0.021779672456259985, 0.06799953336885385], 'false,false': [nan, 0.06799953336885385], 'false,false,false': [nan, 0.06799953336885385], 'true': [0.024431547210848843, 0.002359793739519917], 'true,true': [0.026948095273207382, 0.0], 'true,false': [1.9492980700459442e-05, 0.018305548603569144], 'true,false,false': [1.3877787807814458e-18, 0.027593532077091663]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.781
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7230275396803483;  // std dev = 0.112, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7384287587143868;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12638440830657457;  // std dev = 0.058, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.00474205985134197;  // std dev = 0.782, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.386595072370694;  // std dev = 1.313, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.51051371084552;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.570682815551628;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6354595655938857;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6285211751611659;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5544886280410637;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11589177565810853;  // std dev = 0.095, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.030997004141436944;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.24879043585911975;  // std dev = 1.421, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.4253913553872716;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.251918616112906;  // std dev = 0.930, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.007448415593054512;  // std dev = 1.543, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.4235559927115579;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then return 0.41711313741862455;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7067788315498196;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.10522849372019018;  // std dev = 0.011, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( tweets(A, I) )
%   | | then return -0.12157596606706704;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.2900481419687378;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33084897949077346;  // std dev = 0.064, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.43639921091770023;  // std dev = 0.194, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3925807004832116;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3202162377754059;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4026362073652795;  // std dev = 0.301, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0930127999463964;  // std dev = 0.983, 118.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=2 */
%   | | else return -0.09200835886709417;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2646105436660082;  // std dev = 0.122, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.08452710207601924;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2839709552335337;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.04682030912589332;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28472962194709395;  // std dev = 0.134, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.08502891787948838;  // std dev = 0.757, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4924156866885479;  // std dev = 0.151, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1504574279491687;  // std dev = 0.204, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.13682480683941842;  // std dev = 0.246, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.21371528096526504;  // std dev = 0.051, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( tweets(A, D), follows(E, A) )
%   | | then return 0.312867887082243;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24246417020009292;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.22023789260439877;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.19507756461168024;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07964110462021762;  // std dev = 0.043, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.019073543876597508;  // std dev = 0.717, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.005293141986572214;  // std dev = 0.750, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17986269124953488;  // std dev = 0.065, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.2475986730471878;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, E) )
%   | | then return 0.25088349138379024;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1776436861262969;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1662520348983071;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0741087856521804;  // std dev = 0.040, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.03609718110152078;  // std dev = 0.743, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.0043845211860626;  // std dev = 0.750, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.152079237727661;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.16370618864947942;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18986605477691662;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1870680329417379;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.15283027240761748;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.06925442637506664;  // std dev = 0.046, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.38061173739448356;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.08402839648297555;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1956696583468909;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.10750649019359187;  // std dev = 0.924, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.14866885487902248;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07109271089588058;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.06406805820159861;  // std dev = 0.008, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.013833502097603577;  // std dev = 0.115, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.17564349194082418;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07961678875484393;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.0032160620265582972;  // std dev = 0.455, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.0951850234222556;  // std dev = 0.523, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.461', 'seconds']
Refined model CLL: -0.102792


******************************************
Best model found
******************************************
Results 

CLL : -0.105696 

AUC ROC : 0.994273 

AUC PR : 0.362891 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 4.781 

Total Inference Time : 6.1456475257873535 

Total revision time: 16.107454320907593
Best scored revision CLL: -0.102792


Results 

CLL : -0.105696 

AUC ROC : 0.994273 

AUC PR : 0.362891 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 16.122750303268433 

Total Inference Time : 6.1456475257873535 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.927
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.810529887480465;  // std dev = 1.690, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.03658790700575096;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7318249792500312;  // std dev = 0.132, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.040434435059909804;  // std dev = 0.258, 139.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.054122001440683624;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5335726689643575;  // std dev = 0.786, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.0878983869086822;  // std dev = 2.572, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5426582230233812;  // std dev = 1.469, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return 0.7368973899722391;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8099939616543368;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.38825521188267953;  // std dev = 0.918, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5640573255440691;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5640573255440691;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.062060482637648844;  // std dev = 2.585, 134.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=10 */
%   | | | else return 0.02616521272959773;  // std dev = 2.290, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5037173430071704;  // std dev = 1.813, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11588032429010112;  // std dev = 0.039, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return -0.12388753520850551;  // std dev = 2.24e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15182230764911422;  // std dev = 0.134, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29021927014928006;  // std dev = 1.578, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | else return 0.45741020418709843;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30786289320179616;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5690736245442948;  // std dev = 0.975, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.0749204391346063;  // std dev = 1.795, 123.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=5 */
%   | | else return -0.11218135254471358;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.007442701516852468;  // std dev = 3.048, 179.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2618719968052476;  // std dev = 0.085, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5590839470923658;  // std dev = 0.578, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11377434522980234;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.12450255060253271;  // std dev = 0.108, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30813845885090396;  // std dev = 0.752, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06481085240161126;  // std dev = 1.608, 124.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015395300745225054;  // std dev = 0.465, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15587522893406675;  // std dev = 1.388, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else if ( follows(A, E) )
%   | | then return 0.2088055640238779;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03673226024509033;  // std dev = 0.154, 118.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03521784660516772;  // std dev = 0.949, 47.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=7 */
%   | | | else return 0.12864433804751785;  // std dev = 1.402, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1709872110377117;  // std dev = 0.183, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23641259967937714;  // std dev = 0.973, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09028964355396704;  // std dev = 0.044, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45176149869084314;  // std dev = 0.472, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0945632416781354;  // std dev = 0.088, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19914218097819972;  // std dev = 0.637, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.14540070422380674;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08389697084998249;  // std dev = 0.120, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08200235883603976;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.004199835019590002;  // std dev = 0.427, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.01790138463547238;  // std dev = 0.657, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2612741124844228;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10835633667003212;  // std dev = 1.066, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.623', 'seconds']
Parameter learned model CLL:-0.110922 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.69, 3, 60], 'true,false,true': [8.69e-08, 96, 0], 'true,false,false': [0.307, 17, 2], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,false': [0.46, 16, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.132, 0, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 125, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.957, 11, 1], 'false,false,false,true': [0.786, 1, 3], 'false,false,false,false': [2.572, 30, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.469, 2, 43], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.918, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.585, 124, 10], 'false,false,false,false': [2.29, 34, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.813, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 105, 0], 'false,true,false,false': [2.24e-08, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.134, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.578, 3, 45], 'true,false': [0.123, 0, 4], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.975, 1, 12], 'false,false,true,false': [1.795, 118, 5], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.048, 124, 55], 'false,true': [0.085, 0, 6], 'false,false,true': [0.578, 0, 14], 'false,false,false,true': [0.056, 13, 0], 'false,false,false,false': [0.108, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.752, 0, 64], 'true,false': [1.608, 117, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.465, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.388, 2, 45], 'true,false,true': [0.023, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 104, 14], 'false,false,false,true': [0.949, 40, 7], 'false,false,false,false': [1.402, 11, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.183, 2, 49], 'false,true,true,true': [0.973, 1, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 149, 0], 'false,false,true': [0.472, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.088, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.637, 0, 55], 'true,true,false': [0.009, 0, 5], 'true,false,true': [0.12, 116, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.427, 6, 2], 'false,true': [0.657, 22, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.066, 8, 6]}]
{'': [0.2269915414720365, 0.20274102079395034], 'true': [0.045351473922901994, 0.017088846880907362], 'false': [0.19281663516068068, 0.21172022684310027], 'false,true': [-1.4802973661668753e-16, -3.2653618371328133e-18], 'true,false': [7.864079757761526e-17, 0.09418282548476457], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00037147035438332194, 0.09793534159844267], 'false': [0.06645563509905032, 0.16407509638735504], 'false,false': [0.07638888888888894, 0.18084962888797246], 'false,false,false': [0.154375465511554, 0.16544017561781077], 'false,false,true': [nan, 0.07638888888888894], 'false,true': [nan, 0.06645563509905032]}
{'': [0.06314340033520184, 0.08318515832264427], 'false': [nan, 0.08318515832264428], 'false,false': [0.0, 0.06953334338955854], 'false,false,false': [0.049862589195469764, 0.1278629789595422], 'true': [0.04772922428776761, 0.18103066726297903], 'true,false': [0.003462438750088004, 0.21052692383310445], 'true,true': [0.0479696812386241, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.04213966430021306, 0.0003015832455964727], 'false': [2.1847653034192656e-05, 0.0006380522279856819], 'false,false': [nan, 0.0006380522279856819], 'false,false,false': [nan, 0.0006380522279856819], 'false,true': [nan, 2.1847653034192656e-05], 'false,true,false': [1.4532348880497941e-05, 1.921539850312771e-17]}
{'': [0.05017658259298425, 0.06624705892549342], 'false': [0.0, 0.06413475943680469], 'false,false': [0.06655161883924494, -2.3129646346357427e-18], 'false,false,true': [0.07319074926527222, 0.026206770637127112], 'true': [0.051893881926514084, 0.0037663981988375894], 'false,true': [0.0, nan]}
{'': [0.051898802680068946, 0.09306780389735814], 'false': [0.0011994123260723188, 0.10013484645301052], 'false,false': [0.023852855369013794, 0.0004375511706502522], 'true': [nan, 0.05189880268006899], 'true,false': [nan, 0.051898802680068946], 'false,false,false': [0.00023812060588165233, 0.0005087109309719798]}
{'': [0.0479815915628618, 0.019691730928999666], 'true': [0.008826237980575233, 0.02084061439544344], 'false': [nan, 0.019691730928999666], 'false,false': [nan, 0.019691730928999666], 'false,false,false': [nan, 0.019691730928999666]}
{'': [0.039436138362055104, 0.033372643297344705], 'true': [0.04098866526456846, 0.00026448763221930544], 'false': [nan, 0.03337264329734491], 'false,false': [0.023736802351417008, 0.049447578903143496], 'false,false,false': [0.01914992051597213, 0.10914292626191857], 'true,false': [0.00026448763221930544, nan]}
{'': [0.033417297377349935, 0.02718370398880731], 'false': [0.015529583375058076, 0.07401559153250646], 'false,false': [0.02229160687544205, 0.0003873432146279263], 'false,true': [0.05572230583854128, 1.3209724802855175e-05], 'false,true,true': [0.05572230583854128, nan], 'false,false,false': [nan, 0.0003873432146279263]}
{'': [0.019416397046412803, 0.041217778087745925], 'false': [0.015426994424273978, 0.07723643509482538], 'false,false': [0.0, 0.08119440023854965], 'false,false,false': [nan, 0.08119440023854965], 'true': [0.006986083446919726, 0.001820201924768068], 'true,true': [0.007379008938792078, 1.6435572893203076e-05], 'true,false': [0.00012357228721949815, 0.01160241963040374], 'true,false,false': [0.0, 0.022742537106069938]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.647
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8368723393548312;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7043027812533584;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.12144290163518154;  // std dev = 0.141, 98.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.7237475776875621;  // std dev = 1.03e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.5237475776875623;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7485061896682274;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.5777897571687505;  // std dev = 0.908, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7648189413583933;  // std dev = 0.141, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.09918734475299112;  // std dev = 1.711, 122.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=4 */
%   | | | else return 0.06026077312628613;  // std dev = 1.347, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.05243284583778668;  // std dev = 1.501, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.21390140638238622;  // std dev = 1.855, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.56703213851989;  // std dev = 0.131, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.5441428034004687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.655151148603791;  // std dev = 0.218, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5971791164571304;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5534503542240463;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.627926242507002;  // std dev = 0.921, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.11889070704112115;  // std dev = 0.064, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06635528010455095;  // std dev = 1.469, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.20307685271256234;  // std dev = 1.817, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.3885089933324983;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.4896608400549838;  // std dev = 0.248, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2789614668044989;  // std dev = 0.930, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.05203349428886028;  // std dev = 1.031, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4347126332330696;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.6167841618566822;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7127798680441386;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(I, A) )
%   | then return -0.10745578956987813;  // std dev = 0.005, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return -0.1845061913688751;  // std dev = 0.054, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2568103342044687;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.32823890563304;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.35283208572632346;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.36778065979171326;  // std dev = 0.082, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.41582007430049306;  // std dev = 0.257, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3326036112643463;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.06250491361049783;  // std dev = 1.442, 115.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=7 */
%   | | | else return 0.03665387634721523;  // std dev = 1.926, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else return -0.11031489524068228;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27508377662985883;  // std dev = 0.013, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.033300004588128505;  // std dev = 1.669, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | | else return -0.0903407327477176;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.04585647929640214;  // std dev = 0.138, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1268193728815483;  // std dev = 0.363, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.30413982533376904;  // std dev = 0.208, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5401639372440961;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11445421330868352;  // std dev = 0.108, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.14419550404620635;  // std dev = 0.249, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.22174440831812214;  // std dev = 0.032, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, F), follows(F, C) )
%   | | then return 0.22690219751531748;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2784082972194093;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( tweets(G, H), tweets(A, H) )
%   | | then return 0.10502929593370264;  // std dev = 0.894, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2789310114285252;  // std dev = 0.144, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.07973230234374504;  // std dev = 0.595, 77.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=1 */
%   | | | else return -0.02312419215769261;  // std dev = 1.325, 53.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 8.311380651587455E-6;  // std dev = 0.874, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.01444857417062384;  // std dev = 1.225, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16529405544227083;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return 0.24858962384107242;  // std dev = 0.089, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07255599666377735;  // std dev = 0.073, 70.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3568963647759983;  // std dev = 0.444, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0869720885969463;  // std dev = 0.039, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3012032700222092;  // std dev = 0.292, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10980524823752288;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06901827129779423;  // std dev = 0.587, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.12795262559755707;  // std dev = 0.926, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.13109882986839017;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.1339408881060178;  // std dev = 0.704, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19158610918910685;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10703751109671175;  // std dev = 0.914, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16440211057881088;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.424412805823548;  // std dev = 0.142, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07734773675316371;  // std dev = 0.044, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.36143836256966594;  // std dev = 0.037, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1481129535787248;  // std dev = 0.060, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08547998217524502;  // std dev = 1.664, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.25993568930967426;  // std dev = 0.321, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1427001860000297;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06826142266752985;  // std dev = 0.034, 143.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -4.2354457466599847E-4;  // std dev = 0.134, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return -0.019340303609967642;  // std dev = 0.295, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.27971181329419814;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.07914352945423642;  // std dev = 0.430, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.01868234163375939;  // std dev = 0.841, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.928', 'seconds']
Refined model CLL: -0.108176


******************************************
Best model found
******************************************
Results 

CLL : -0.109402 

AUC ROC : 0.994302 

AUC PR : 0.340229 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 6.647 

Total Inference Time : 7.31348443031311 

Total revision time: 20.95454275512695
Best scored revision CLL: -0.108176


Results 

CLL : -0.109402 

AUC ROC : 0.994302 

AUC PR : 0.340229 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 20.96983873748779 

Total Inference Time : 7.31348443031311 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.212
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8228548174524533;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.17633075328133055;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7286230596823355;  // std dev = 0.134, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.019680855547471357;  // std dev = 0.281, 145.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0825945916609068;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7484301947419539;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.06267381844622996;  // std dev = 2.810, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5507783211893478;  // std dev = 1.243, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | else return 0.7304340823805799;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.4548968845735845;  // std dev = 0.876, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5876124353627685;  // std dev = 0.137, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5618127115907234;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5618127115907234;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.047612117359261075;  // std dev = 3.228, 175.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=16 */
%   | | | else return -0.012082815338102888;  // std dev = 2.349, 53.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47871670029005586;  // std dev = 2.413, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11887219082391597;  // std dev = 0.020, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | | else return -0.12247911452443426;  // std dev = 0.009, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15192394804360526;  // std dev = 0.133, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2918661640121326;  // std dev = 1.745, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | else return 0.12094060372521907;  // std dev = 1.101, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3117378281271863;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6439064215781806;  // std dev = 0.165, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08659608981399111;  // std dev = 1.977, 197.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=6 */
%   | | else return -0.11107385120065447;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017488463699775397;  // std dev = 3.095, 250.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=74 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17532379066461382;  // std dev = 1.007, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5401041164483688;  // std dev = 0.739, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11299125299152228;  // std dev = 0.085, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.10904863233941865;  // std dev = 0.078, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2954485821041289;  // std dev = 1.204, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else return -0.07606433457202465;  // std dev = 1.776, 197.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0632904690935151;  // std dev = 0.578, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1864359747092512;  // std dev = 0.928, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.29546560169115693;  // std dev = 0.142, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.037761889709247425;  // std dev = 0.154, 152.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04107521156302306;  // std dev = 1.462, 56.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
%   | | | else return 0.04403419123973564;  // std dev = 1.572, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1271844454557966;  // std dev = 0.267, 69.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28330919182797176;  // std dev = 0.580, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09084763956400578;  // std dev = 0.023, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3823685976804523;  // std dev = 1.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10179800418211112;  // std dev = 0.108, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14704949542468942;  // std dev = 2.037, 78.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=74 */
%   | | else return -0.05608124576695397;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08360555239549351;  // std dev = 0.012, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0856007130762936;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.019962838111560063;  // std dev = 0.603, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.011219425951214135;  // std dev = 0.838, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2794303313196903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06574012476712995;  // std dev = 1.262, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.540', 'seconds']
Parameter learned model CLL:-0.108969 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.701, 3, 82], 'true,false,true': [0.0, 127, 0], 'true,false,false': [0.314, 16, 2], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.466, 15, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.134, 0, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 127, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.1, 0, 4], 'false,false,false,false': [2.81, 43, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.243, 2, 57], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.876, 1, 2], 'true,false,false': [0.137, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.49e-08, 0, 6], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [3.228, 159, 16], 'false,false,false,false': [2.349, 46, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.413, 5, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.02, 139, 0], 'false,true,false,false': [0.009, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.133, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.745, 3, 60], 'true,false': [1.101, 2, 4], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.165, 0, 17], 'false,false,true,false': [1.977, 191, 6], 'false,false,false': [0.0, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.095, 176, 74], 'false,true': [1.007, 1, 9], 'false,false,true': [0.739, 0, 17], 'false,false,false,true': [0.085, 28, 0], 'false,false,false,false': [0.078, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.204, 1, 85], 'true,false': [1.776, 189, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.578, 7, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.928, 1, 63], 'true,false,true': [0.142, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 134, 18], 'false,false,false,true': [1.462, 46, 10], 'false,false,false,false': [1.572, 22, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.267, 5, 64], 'false,true,true,true': [0.58, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.023, 156, 0], 'false,false,true': [1.175, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.108, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.037, 4, 74], 'true,true,false': [1.257, 2, 8], 'true,false,true': [0.012, 134, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.603, 13, 2], 'false,true': [0.838, 22, 9], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.262, 14, 6]}]
{'': [0.23183364839319542, 0.20850480109739317], 'true': [0.03404844290657402, 0.013602853745540912], 'false': [0.2021484375000001, 0.2169421487603307], 'false,true': [-2.9605947323337506e-16, 9.654113257610057e-18], 'true,false': [-2.4477358023231797e-17, 0.09876543209876548], 'false,true,true': [-2.9605947323337506e-16, nan]}
{'': [0.00027733403750092886, 0.10318917659033146], 'false': [0.07892328774362484, 0.14427388934157662], 'false,false': [0.05246913580246912, 0.1636860582477102], 'false,false,false': [0.0025154857636427996, 0.14352539797886232], 'false,true': [nan, 0.07892328774362484], 'false,false,true': [nan, 0.05246913580246912]}
{'': [0.03579019495935775, 0.08479955432986143], 'false': [nan, 0.08479955432986153], 'false,false': [-2.7328566760003855e-16, 0.07013999202561014], 'false,false,false': [0.05955317583744377, 0.10412756593166436], 'true': [0.026292239963396056, 0.11672592979888832], 'true,false': [0.25608391708074246, 0.004658831871236391], 'true,true': [0.02619993460706304, 0.0], 'false,false,true': [3.700743415417188e-17, 6.344131569286608e-17]}
{'': [0.05546385239627745, 0.00023905972993754505], 'false': [4.728167055589355e-06, 0.0004927295438113729], 'false,false': [nan, 0.0004927295438113729], 'false,false,false': [nan, 0.0004927295438113729], 'false,true': [nan, 4.728167055589355e-06], 'false,true,false': [2.8122515796299485e-06, 2.2844218837574304e-06]}
{'': [0.06400989395540167, 0.054766069985262705], 'true': [0.048334273708893045, 0.2019288417460333], 'false': [-1.708035422500241e-17, 0.051468311142510784], 'false,false': [0.057414823568417664, -1.1895246692412391e-17], 'false,false,true': [0.0016062743273650949, 0.019839310187913788], 'false,true': [-1.708035422500241e-17, nan]}
{'': [0.038323090885952926, 0.08896476112445859], 'false': [0.1014750844453826, 0.08510036234859608], 'false,false': [0.03209813722490917, 0.0002513237955399269], 'true': [nan, 0.038323090885953405], 'true,false': [nan, 0.038323090885952926], 'false,false,false': [0.00025827276816347715, 0.00023578030113517403]}
{'': [0.04546648273016617, 0.023845007871074908], 'true': [0.016855732381410124, 0.01601342010808183], 'false': [nan, 0.023845007871074908], 'false,false': [nan, 0.023845007871074908], 'false,false,false': [nan, 0.023845007871074908]}
{'': [0.013710323083010274, 0.03530884273366843], 'false': [nan, 0.03530884273366841], 'false,false': [0.023587945617539536, 0.05584416756990922], 'false,false,false': [0.03815725319147804, 0.08522594812890878], 'true': [0.013464271129581117, 0.010056752080197337], 'true,false': [0.010056752080197337, nan]}
{'': [0.07119227838713353, 0.03160608197456181], 'false': [0.018050182197507373, 0.08327702148625962], 'false,false': [0.1062852880225423, 0.0004052357635939294], 'false,true': [0.014027473110418945, 3.282588293262146e-06], 'false,true,true': [0.014027473110418945, nan], 'false,false,false': [nan, 0.0004052357635939294]}
{'': [0.035350589183675986, 0.045978915382297224], 'false': [0.022665839405137334, 0.07789817839187008], 'false,false': [0.0, 0.07961863472210758], 'false,false,false': [nan, 0.07961863472210758], 'true': [0.06927078940446539, 0.00258464131955273], 'true,true': [0.05321546386545908, 0.15792910536631483], 'true,false': [1.0788938637211455e-06, 0.014038860983168425], 'true,false,false': [-1.0675221390626506e-18, 0.024205577471372093]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.973
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then return 0.6729617843039782;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.7488188992045164;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7244837858978771;  // std dev = 0.064, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7378143415819305;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4200824885796211;  // std dev = 1.131, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10844837039320075;  // std dev = 1.184, 95.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=2 */
%   | | | else return 0.007625973617874078;  // std dev = 2.345, 57.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03308524389662221;  // std dev = 1.878, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return 0.06664649715717497;  // std dev = 2.114, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5250867047985759;  // std dev = 1.386, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.5538292333688729;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.6275612255254097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6650115606962144;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5616044545877269;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6443047704876845;  // std dev = 0.945, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.11929006106008896;  // std dev = 0.095, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07360342567875187;  // std dev = 1.902, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.1193242529705127;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.4140919149022796;  // std dev = 0.990, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.28978058503198906;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.1603602087178092;  // std dev = 0.945, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.44244221815626095;  // std dev = 0.204, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.570285730151536;  // std dev = 0.907, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.736163681174416;  // std dev = 0.069, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.1069351755456481;  // std dev = 0.070, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.10931279933320771;  // std dev = 0.038, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.1752108011998013;  // std dev = 0.239, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.2991618607317938;  // std dev = 1.401, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.47231097746304157;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1512736223878229;  // std dev = 0.963, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.12407673110843598;  // std dev = 0.941, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.31374597339455157;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.35983090350598734;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.49363266507388975;  // std dev = 0.311, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08331924427018275;  // std dev = 1.745, 183.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=6 */
%   | | else return -0.0995306403774141;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2725093435991165;  // std dev = 0.035, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.20137654570027846;  // std dev = 0.958, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.31989986762407274;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.050236873899354155;  // std dev = 0.117, 134.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=13 */
%   | | else return -0.058026823034945565;  // std dev = 0.115, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28854649682565103;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.16859156576861103;  // std dev = 0.856, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.47705506304497286;  // std dev = 0.903, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.12086444047202574;  // std dev = 0.034, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.19202262469543419;  // std dev = 0.985, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.2190208445583476;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22316703462885698;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.2536489240428994;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07528941677935404;  // std dev = 0.055, 125.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=2 */
%   | | else return 0.003238005869712334;  // std dev = 0.189, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.27224827024378373;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008762881091414302;  // std dev = 1.182, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.10555518988747617;  // std dev = 1.264, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.18806772865276486;  // std dev = 0.051, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.08803538150742184;  // std dev = 1.328, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.2711704449815063;  // std dev = 0.068, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.08134725415636943;  // std dev = 0.007, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.14613730607905648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.34047707402192373;  // std dev = 0.165, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.09921497542600251;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return -0.0060117283479647066;  // std dev = 0.660, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.023930372565300263;  // std dev = 0.299, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17540853739778312;  // std dev = 0.026, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15815143080014224;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1856824090565396;  // std dev = 1.111, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.17529798253306889;  // std dev = 0.131, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2814416651983504;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07614286668222585;  // std dev = 0.007, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.28708873191027284;  // std dev = 0.088, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.47204092770808165;  // std dev = 0.166, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12079111777087186;  // std dev = 0.044, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.16119987274856026;  // std dev = 0.035, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.008113182406072644;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.07090185145028068;  // std dev = 0.064, 161.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1926164702124337;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07992798844431759;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.08471038941686186;  // std dev = 0.337, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.19389288778858427;  // std dev = 0.744, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.048452699656319174;  // std dev = 0.539, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.016113469051914853;  // std dev = 1.091, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.539', 'seconds']
Refined model CLL: -0.104441


******************************************
Best model found
******************************************
Results 

CLL : -0.106366 

AUC ROC : 0.995358 

AUC PR : 0.495292 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 11.973 

Total Inference Time : 11.272652387619019 

Total revision time: 33.33856707572937
Best scored revision CLL: -0.104441


Results 

CLL : -0.106366 

AUC ROC : 0.995358 

AUC PR : 0.495292 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 33.35386305809021 

Total Inference Time : 11.272652387619019 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.366
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.1795775065280838;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6896887493229307;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.042322864150039205;  // std dev = 0.255, 221.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10046581948790241;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7483184063034612;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12550884652181765;  // std dev = 3.190, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.581472910897729;  // std dev = 0.385, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7316915017555587;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8210130694185345;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.41101295801023374;  // std dev = 0.801, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5673899180048084;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5673899180048084;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04488837885012704;  // std dev = 3.662, 224.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=21 */
%   | | | else return 0.013801215202857557;  // std dev = 2.854, 64.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48604961392135915;  // std dev = 2.624, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11654700030526711;  // std dev = 0.028, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | | else return -0.12242209315860927;  // std dev = 0.002, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1550810164001281;  // std dev = 0.161, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3031859600282904;  // std dev = 1.516, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.2465854626432403;  // std dev = 0.851, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25828400029234466;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6376832444663678;  // std dev = 0.191, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0820901147814239;  // std dev = 2.317, 242.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=9 */
%   | | else return -0.10624554610414312;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03203132294901319;  // std dev = 3.392, 266.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2000614307729622;  // std dev = 0.985, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.450953745702926;  // std dev = 1.667, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11517730359350221;  // std dev = 0.104, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.12406500849534244;  // std dev = 0.152, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27208409305808484;  // std dev = 1.883, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07986920785656189;  // std dev = 2.244, 260.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01312043543124227;  // std dev = 0.724, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18770955501883882;  // std dev = 1.000, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2533321336573144;  // std dev = 0.066, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041330022799641944;  // std dev = 0.160, 188.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.014370211021046311;  // std dev = 1.608, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
%   | | | else return 0.19393748697926752;  // std dev = 1.518, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15418376607559153;  // std dev = 0.193, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28997691040135126;  // std dev = 0.659, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09031286490906622;  // std dev = 0.047, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45242125903007363;  // std dev = 0.594, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11829460922975463;  // std dev = 0.185, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17056664116076123;  // std dev = 1.555, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.15177457252961485;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08360806916906467;  // std dev = 0.023, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07932517342579894;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.016861497167775095;  // std dev = 0.502, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.040294039299928565;  // std dev = 1.005, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.27076401573442355;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017385803409329232;  // std dev = 1.387, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.585', 'seconds']
Parameter learned model CLL:-0.110985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.262, 25, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.36e-08, 27, 0], 'false,false': [0.467, 19, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 199, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.1, 0, 4], 'false,false,false,false': [3.19, 41, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.385, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.801, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.662, 203, 21], 'false,false,false,false': [2.854, 53, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.624, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 189, 0], 'false,true,false,false': [0.002, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.161, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.516, 2, 73], 'true,false': [0.851, 1, 4], 'false,true,true': [0.972, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.191, 0, 23], 'false,false,true,false': [2.317, 233, 9], 'false,false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.392, 175, 91], 'false,true': [0.985, 1, 13], 'false,false,true': [1.667, 2, 22], 'false,false,false,true': [0.104, 28, 0], 'false,false,false,false': [0.152, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.883, 3, 107], 'true,false': [2.244, 249, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.724, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.0, 1, 80], 'true,false,true': [0.066, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 166, 22], 'false,false,false,true': [1.608, 52, 13], 'false,false,false,false': [1.518, 10, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.193, 3, 77], 'false,true,true,true': [0.659, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.047, 205, 0], 'false,false,true': [0.594, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.185, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.555, 2, 94], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.023, 171, 0], 'true,false,false,true': [2.63e-09, 8, 0], 'true,false,false,false': [0.502, 10, 2], 'false,true': [1.005, 21, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.387, 21, 8]}]
{'': [0.228896548575605, 0.2151926932501672], 'true': [0.01868480725623786, 0.010361558071324634], 'false': [0.21301775147928945, 0.21811224489795927], 'false,true': [-1.4802973661668753e-16, 2.05596856412066e-17], 'true,false': [-1.5705594006892458e-16, 0.0685871056241427], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03440452440596724, 0.09380188655531746], 'false': [0.06500888373575539, 0.15259197349412623], 'false,false': [0.032222222222222194, 0.1877357347986334], 'false,false,false': [0.0024961010525902383, 0.17548560790479717], 'false,true': [nan, 0.06500888373575539], 'false,false,true': [nan, 0.032222222222222194]}
{'': [0.013815902369898252, 0.09011819555325765], 'false': [nan, 0.09011819555325769], 'false,false': [0.0, 0.07542315538607477], 'false,false,false': [0.05985360589258952, 0.1272375475965252], 'true': [0.0023990804740157165, 0.12681806236302967], 'true,false': [0.0031819954769337633, 0.1282438915875198], 'true,true': [0.0021155273474368487, 0.0], 'false,false,true': [4.9343245538895844e-17, 5.551115123125783e-17]}
{'': [0.05255772070025439, 0.0002801319097503111], 'false': [8.854606686271601e-06, 0.0006193018168671223], 'false,false': [nan, 0.0006193018168671223], 'false,false,false': [nan, 0.0006193018168671223], 'false,true': [nan, 8.854606686269719e-06], 'false,true,false': [4.152445808378814e-06, 1.20671891460343e-07]}
{'': [0.03795982222037135, 0.061312844562077154], 'false': [0.05246913580246916, 0.05709362519679015], 'false,false': [0.0614496335699801, -9.654113257610057e-18], 'false,false,true': [0.0015808584880572627, 0.02217475493152079], 'false,true': [0.05246913580246916, nan], 'true': [0.030638202005113465, 0.14478073516401913]}
{'': [0.043260295543140086, 0.09549825249071135], 'false': [0.06923450110944797, 0.09587200141979556], 'false,false': [0.11578299653148087, 0.0005404966784817927], 'true': [nan, 0.043260295543139815], 'true,false': [nan, 0.043260295543140086], 'false,false,false': [0.00038956025706849654, 0.0006206918143681995]}
{'': [0.04906652838136271, 0.020993871303738584], 'true': [0.0322200753474845, 0.019367322915374668], 'false': [nan, 0.020993871303738584], 'false,false': [nan, 0.020993871303738584], 'false,false,false': [nan, 0.020993871303738584]}
{'': [0.01220739106031952, 0.039144776052018826], 'false': [nan, 0.039144776052018805], 'false,false': [0.02554488265962018, 0.0657898666057638], 'false,false,false': [0.03977250931891712, 0.12121939726625186], 'true': [0.012351463303785946, 0.002169909187879057], 'true,false': [0.002169909187879057, nan]}
{'': [0.03739741390428264, 0.031142913264597026], 'false': [0.018731328237691452, 0.07741602447254063], 'false,false': [0.02072048824083877, 0.0009249130733098253], 'false,true': [0.013566363163514852, 1.0773344072248435e-05], 'false,true,true': [0.013566363163514852, nan], 'false,false,false': [nan, 0.0009249130733098253]}
{'': [0.023303668100209552, 0.04758144034985477], 'false': [0.030600877963460137, 0.06615050002746106], 'false,false': [0.0, 0.0662915344698439], 'false,false,false': [nan, 0.0662915344698439], 'true': [0.02306370662222398, 0.0015846556132573081], 'true,true': [0.02519426511755331, 1.48767961393829e-05], 'true,false': [3.0530207951188133e-06, 0.013545984892343299], 'true,false,false': [8.673617379884035e-19, 0.021015957146571937]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 32.498
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.858148935099512;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #pos=88 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.6581489350995123;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.13326737391336402;  // std dev = 0.092, 233.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.31968739663797385;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6919952207217671;  // std dev = 0.166, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return 0.7550506887480191;  // std dev = 0.139, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7252438127130404;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12638937209440818;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.04761459202661751;  // std dev = 0.247, 54.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.0013893720944079153;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.12638937209440787;  // std dev = 7.45e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7432600073969047;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13125031559803793;  // std dev = 3.067, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5187301582879086;  // std dev = 1.678, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.325821235602466;  // std dev = 1.271, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.7289823666687367;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.39862923961352276;  // std dev = 0.467, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5741801126757002;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5987185065963964;  // std dev = 0.273, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11579482994416526;  // std dev = 0.072, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0516197817280371;  // std dev = 2.191, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.056975989644976015;  // std dev = 2.304, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.4346207193123081;  // std dev = 0.079, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.33525073135331934;  // std dev = 2.035, 41.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=36 */
%   | | else return 0.6172449764730267;  // std dev = 0.262, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5076094146647679;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6813986809047883;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6811324499449112;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7510513372928944;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10381398548872016;  // std dev = 0.003, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.16761027801678002;  // std dev = 0.198, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.31637532230195103;  // std dev = 0.996, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.08114802183828569;  // std dev = 0.612, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3818899814329354;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.43799335670034917;  // std dev = 0.347, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.15952860585827802;  // std dev = 0.921, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.33824327435784296;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3809627056915858;  // std dev = 1.167, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.0801153553565141;  // std dev = 2.062, 252.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=9 */
%   | | else return -0.09285479842634282;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.20897516352959394;  // std dev = 1.686, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.011707595354772338;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2825547404899559;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then return -0.0479752983534787;  // std dev = 0.139, 191.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=22 */
%   | | else return -0.08632300991935998;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2786171669053715;  // std dev = 0.042, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.20983824930590614;  // std dev = 0.727, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5204031765476423;  // std dev = 0.392, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11454320549767806;  // std dev = 0.028, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(A, F), follows(E, A) )
%   | | then if ( tweets(A, D), tweets(E, G) )
%   | | | then return 0.15357199815167247;  // std dev = 1.668, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0.23603925621599026;  // std dev = 0.064, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.0287774753429742;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15982164052607006;  // std dev = 0.966, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.25587500336148317;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( tweets(A, I), follows(J, A) )
%   | | then return 0.35677878007073494;  // std dev = 0.231, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, H) )
%   | | | then return -0.13098077780729464;  // std dev = 1.208, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.22239123411191083;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.045952057782858005;  // std dev = 0.159, 280.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=32 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19838101763104937;  // std dev = 0.105, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.25754012416512545;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, E) )
%   | | | then return 0.2666991029304496;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4552722294470904;  // std dev = 0.124, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08013280251709329;  // std dev = 0.052, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20312732288375632;  // std dev = 0.949, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10282983137217687;  // std dev = 0.000994, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08790777494555997;  // std dev = 0.836, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.07067262096776693;  // std dev = 1.290, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.14991079820834563;  // std dev = 0.991, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.051697769446934765;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.14282713473975753;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1787223143757293;  // std dev = 0.079, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2272465230928545;  // std dev = 0.080, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(H, A) )
%   | then return -0.037993493908151994;  // std dev = 0.100, 235.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=32 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27676767802466185;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.46622387400907617;  // std dev = 0.177, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12136382827129912;  // std dev = 0.033, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10719529056482434;  // std dev = 1.849, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | | | else return 0.22689927316644767;  // std dev = 0.278, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.17084044570451407;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06900884862796988;  // std dev = 0.031, 239.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -1.9239456732597532E-4;  // std dev = 0.128, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return -0.08124633466341777;  // std dev = 0.260, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.17068646382438923;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0016991662560424013;  // std dev = 0.466, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.0027657564826551067;  // std dev = 1.059, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.175', 'seconds']
Refined model CLL: -0.102613


******************************************
Best model found
******************************************
Results 

CLL : -0.099734 

AUC ROC : 0.994309 

AUC PR : 0.353121 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 32.498 

Total Inference Time : 16.28151512145996 

Total revision time: 59.2084287776947
Best scored revision CLL: -0.102613


Results 

CLL : -0.099734 

AUC ROC : 0.994309 

AUC PR : 0.353121 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 59.22372476005554 

Total Inference Time : 16.28151512145996 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.244
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.034619523334806335;  // std dev = 0.381, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.4735335504841277;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7373945901910716;  // std dev = 0.177, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07093379654520778;  // std dev = 0.208, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07945108627149908;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.23064943586705103;  // std dev = 2.432, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5509368019185718;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8000221790396753;  // std dev = 0.090, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7365252316321179;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5509368019185718;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.025713613177877178;  // std dev = 1.883, 48.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=6 */
%   | | | else return 0.037882590914444514;  // std dev = 2.334, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5439275496027397;  // std dev = 1.265, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12086140335251787;  // std dev = 0.068, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.13143529159271802;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2020684319496475;  // std dev = 0.310, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2512671957602442;  // std dev = 0.866, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.4216597041367953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2910256631501784;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.43721640566067876;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5937737440368525;  // std dev = 0.118, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10995056091993417;  // std dev = 0.790, 58.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=1 */
%   | | else return 0.03475018955029641;  // std dev = 0.326, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 1.4304643225499484E-4;  // std dev = 1.266, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2661342858163502;  // std dev = 0.109, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4882273279477735;  // std dev = 0.415, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13480915209615557;  // std dev = 0.136, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.1567134299248731;  // std dev = 0.174, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25770022886770827;  // std dev = 0.875, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.08147123999253011;  // std dev = 0.844, 50.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11614737573995483;  // std dev = 0.901, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1193844484875831;  // std dev = 0.957, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, E) )
%   | | then return 0.22490110164523464;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.06190122872805932;  // std dev = 0.112, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008576962027238346;  // std dev = 0.803, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.07279426040323295;  // std dev = 1.241, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13605740579312198;  // std dev = 0.234, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23886024638241712;  // std dev = 0.316, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09154833058108422;  // std dev = 0.100, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3346819009871002;  // std dev = 0.351, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14702443217832692;  // std dev = 0.207, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.0663233156969786;  // std dev = 1.149, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.12764317177678752;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07601260926010313;  // std dev = 0.008, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10935487453592692;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0709309126862122;  // std dev = 0.491, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.0014429785432619718;  // std dev = 0.474, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06822599754414797;  // std dev = 0.992, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.787', 'seconds']
Parameter learned model CLL:-0.116944 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [3.65e-08, 36, 0], 'true,false,false': [0.381, 14, 3], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.487, 5, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.177, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.208, 29, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.966, 14, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.432, 17, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 9], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.09, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [1.883, 42, 6], 'false,false,false,false': [2.334, 25, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.265, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.068, 33, 0], 'false,true,false,false': [0.019, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.31, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.866, 1, 11], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.118, 0, 10], 'false,false,true,false': [0.79, 57, 1], 'false,false,false': [0.326, 10, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.266, 26, 11], 'false,true': [0.109, 0, 6], 'false,false,true': [0.415, 0, 14], 'false,false,false,true': [0.136, 14, 0], 'false,false,false,false': [0.174, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.875, 1, 22], 'true,false': [0.844, 48, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.901, 6, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.957, 1, 13], 'true,false,true': [0.006, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.112, 36, 2], 'false,false,false,true': [0.803, 17, 6], 'false,false,false,false': [1.241, 11, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.234, 1, 12], 'false,true,true,true': [0.316, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 38, 0], 'false,false,true': [0.351, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.207, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.149, 2, 11], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.008, 43, 0], 'true,false,false,true': [2.63e-09, 3, 0], 'true,false,false,false': [0.491, 3, 3], 'false,true': [0.474, 10, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.992, 8, 8]}]
{'': [0.1946366782006915, 0.24349635796045738], 'false': [0.20061728395061712, 0.23668639053254428], 'false,true': [0.0, -1.2810265668751807e-17], 'true': [-2.3684757858670006e-16, 0.05339978640085445], 'true,false': [3.700743415417188e-17, 0.14532871972318326], 'false,true,true': [0.0, nan]}
{'': [0.0020875960312679354, 0.1353064307167881], 'false': [0.043085762458876305, 0.18100547733309452], 'false,false': [0.06222222222222222, 0.2048859480199101], 'false,false,false': [0.0, 0.20398601804862973], 'false,false,true': [nan, 0.06222222222222222], 'false,true': [nan, 0.043085762458876305]}
{'': [0.00925998338262938, 0.12472695504021729], 'false': [nan, 0.12472695504021712], 'false,false': [0.0055108904389664206, 0.11199424702311196], 'false,false,false': [0.07384436455118341, 0.1650882579493124], 'true': [0.0, 0.015989337606080827], 'true,false': [0.004031862330077907, 0.0], 'false,false,true': [0.0, 0.0], 'true,true': [0.0, nan]}
{'': [0.050013328975745286, 0.0030486562240075715], 'false': [0.0001474325155014282, 0.002913279527671579], 'false,false': [nan, 0.002913279527671579], 'false,false,false': [nan, 0.002913279527671579], 'false,true': [nan, 0.00014743251550143122], 'false,true,false': [0.00014211006718083162, 9.162285703730177e-05]}
{'': [0.059724027728217846, 0.07857818530458141], 'false': [0.00341947731132346, 0.07725998304100382], 'false,false': [0.07149866054094646, 0.10597029807875616], 'false,false,true': [0.0013936409113425086, 0.010758100922214669], 'true': [0.0624676756611448, 0.0], 'false,true': [0.0, 0.0]}
{'': [0.043312132066983325, 0.08849654776881814], 'false': [0.001973686509286282, 0.09679340618531815], 'false,false': [0.012299823304244775, 0.0019840357201021653], 'true': [nan, 0.04331213206698332], 'true,false': [nan, 0.043312132066983325], 'false,false,false': [0.0013117188179765332, 0.0025100529999884658]}
{'': [0.04507379499922459, 0.06249302994193768], 'false': [nan, 0.062493029941937644], 'false,false': [nan, 0.06249302994193768], 'false,false,false': [nan, 0.06249302994193768], 'true': [0.033300445652444714, 0.014244911566651966]}
{'': [0.05848034715970277, 0.03611481904855083], 'true': [0.06544046816278026, 1.745655626718412e-05], 'false': [nan, 0.03611481904855081], 'false,false': [0.012463204652291681, 0.05365484263418749], 'false,false,false': [0.028052182450603712, 0.08102159977120076], 'true,false': [1.745655626718412e-05, nan]}
{'': [0.05477472873827206, 0.03653944030440952], 'false': [0.01677974897525999, 0.0620031051876434], 'false,false': [0.01024995222450296, 0.0025177806099351864], 'false,true': [0.014261080419483516, 0.0002617410329274527], 'false,true,true': [0.014261080419483516, nan], 'false,false,false': [nan, 0.0025177806099351864]}
{'': [0.02828542179987479, 0.04010507033555439], 'false': [0.015007225969327916, 0.061476248641695326], 'false,false': [nan, 0.06147624864169534], 'false,false,false': [nan, 0.061476248641695326], 'true': [0.0783285060268449, 0.006975926565264568], 'true,true': [0.10154484956912421, 0.0], 'true,false': [1.4749080186163858e-06, 0.034061140014045005], 'true,false,false': [2.3129646346357427e-18, 0.04025738832963202]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.74
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7956489350995123;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.13087620782678497;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.742156915567256;  // std dev = 0.101, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.07348355804910625;  // std dev = 0.205, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else return -0.16110518155134027;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return 0.03253697850819049;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.052806745544287804;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.27731985649193397;  // std dev = 2.239, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.4832664257639996;  // std dev = 0.246, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(E, A) )
%   | | then return 0.7650831377185019;  // std dev = 0.137, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.7086929142655253;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.668119957650165;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5651755856091554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.08509550645359985;  // std dev = 1.204, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | | else return 0.0336529028300709;  // std dev = 1.433, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1686182062426657;  // std dev = 1.269, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.45430735730188276;  // std dev = 1.087, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.4492562230252298;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21133215615661205;  // std dev = 0.962, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12170063216586191;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, G) )
%   | | | then return 0.4248288085758173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17266444599533073;  // std dev = 1.200, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.6157004073705866;  // std dev = 0.146, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.718593700662225;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.11872520435942993;  // std dev = 0.020, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.1930252937551502;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.39797289868342406;  // std dev = 0.118, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.37410521244860906;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3256754379268231;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.35798370515979405;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5353814025621786;  // std dev = 0.310, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11064172289774803;  // std dev = 0.549, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.12720958633464044;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.5545082304821509;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26104169501054336;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, E) )
%   | | then return -0.039386522995622085;  // std dev = 0.235, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.10305747273875167;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.12351766984906856;  // std dev = 0.353, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3947099853026722;  // std dev = 0.259, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4193631956063512;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13186984624573667;  // std dev = 0.071, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.1468223921741788;  // std dev = 0.286, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.2225697481351914;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, F), tweets(C, F) )
%   | | | then return 0.4133258829173085;  // std dev = 0.369, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2645977889406563;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.08674732604717057;  // std dev = 0.017, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.11000565217923923;  // std dev = 0.497, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.12312251880582631;  // std dev = 0.015, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( follows(I, A) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.2355914291319149;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12285318441828816;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.23571863843606744;  // std dev = 0.386, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.184123225179123;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.220746949149087;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then return -0.08171830292000701;  // std dev = 0.007, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return -0.10192176302368769;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.09772731188788522;  // std dev = 0.877, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2220761370174825;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1049930276154632;  // std dev = 0.026, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.03628599190612839;  // std dev = 0.386, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.010236671913533302;  // std dev = 0.714, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.08522265045712553;  // std dev = 0.205, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.29933004315330086;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.3909014345933725;  // std dev = 0.257, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16844081863533145;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return -0.07650399467326335;  // std dev = 0.027, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.10452225427152925;  // std dev = 0.104, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.19078797500394437;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09684974321531689;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.05711457424742464;  // std dev = 0.798, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18941111168060829;  // std dev = 0.099, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.053854590072149475;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07178835347405038;  // std dev = 0.025, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06680956503145583;  // std dev = 0.000947, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.03046716449116426;  // std dev = 0.488, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.1620781321332548;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15092805028943346;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08602538477020276;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.0024270047581762912;  // std dev = 0.262, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.626', 'seconds']
Refined model CLL: -0.113193


******************************************
Best model found
******************************************
Results 

CLL : -0.103624 

AUC ROC : 0.994554 

AUC PR : 0.468908 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 7.74 

Total Inference Time : 3.141745090484619 

Total revision time: 15.011005434036255
Best scored revision CLL: -0.113193


Results 

CLL : -0.103624 

AUC ROC : 0.994554 

AUC PR : 0.468908 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 15.040778907775879 

Total Inference Time : 3.141745090484619 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.779
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0.14386322081379804;  // std dev = 0.452, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.30259337954395676;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7280623634626648;  // std dev = 0.164, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07574357672019463;  // std dev = 0.199, 68.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03507454494005625;  // std dev = 1.554, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.49390190021590774;  // std dev = 0.781, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.20182851358342563;  // std dev = 3.557, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5627844933475125;  // std dev = 0.176, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7805339286573221;  // std dev = 0.090, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6101515189847051;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6077245088908046;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5532445318625446;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.014272620055311937;  // std dev = 3.126, 96.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=17 */
%   | | | else return 0.0765611665067218;  // std dev = 2.867, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5577173530412115;  // std dev = 1.648, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12642157478565472;  // std dev = 0.143, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.14862558440464907;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18612178111100694;  // std dev = 0.220, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3139989247412216;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.39886971276702954;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2868619363524965;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4409352038558084;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5959385874395364;  // std dev = 0.235, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11049569527531909;  // std dev = 1.213, 127.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=2 */
%   | | else return 0.02814862041819561;  // std dev = 0.323, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.017912557928536334;  // std dev = 1.742, 97.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=23 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25282146454374527;  // std dev = 0.114, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4513984324871817;  // std dev = 1.395, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1391980004346102;  // std dev = 0.169, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.15046624870815037;  // std dev = 0.107, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28750345994908016;  // std dev = 0.557, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09307790650763002;  // std dev = 1.183, 118.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047155893610485826;  // std dev = 1.664, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11118106543290171;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | else if ( follows(A, E) )
%   | | then return 0.217075602230128;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05556344653106998;  // std dev = 0.118, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.013991924948921748;  // std dev = 1.571, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
%   | | | else return 0.06318130522176088;  // std dev = 1.628, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18282404702321164;  // std dev = 0.062, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21957021270722893;  // std dev = 1.053, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0898280889638881;  // std dev = 0.158, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3442496821997068;  // std dev = 0.550, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1301074551747022;  // std dev = 0.214, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1756010842620667;  // std dev = 0.376, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.17892440711956198;  // std dev = 0.252, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.07664511206439355;  // std dev = 0.010, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.11985608425924538;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.011468986071715639;  // std dev = 0.868, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.04170887892787446;  // std dev = 0.859, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11187886803505144;  // std dev = 1.189, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.335', 'seconds']
Parameter learned model CLL:-0.119338 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.06e-07, 0, 31], 'true,false,true': [6.66e-08, 67, 0], 'true,false,false': [0.452, 10, 4], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.49e-08, 35, 0], 'false,false': [0.497, 15, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.164, 0, 28], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.199, 64, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.554, 20, 3], 'false,false,false,true': [0.781, 1, 3], 'false,false,false,false': [3.557, 38, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.176, 0, 19], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.09, 0, 2], 'true,false,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.133, 0, 3], 'false,false,true,false': [2.11e-08, 0, 6], 'false,false,false,true': [3.126, 79, 17], 'false,false,false,false': [2.867, 34, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.648, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.143, 76, 0], 'false,true,false,false': [0.075, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.22, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.337, 0, 23], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 8], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.235, 0, 19], 'false,false,true,false': [1.213, 125, 2], 'false,false,false': [0.323, 26, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.742, 74, 23], 'false,true': [0.114, 0, 9], 'false,false,true': [1.395, 1, 30], 'false,false,false,true': [0.169, 36, 0], 'false,false,false,false': [0.107, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.557, 0, 45], 'true,false': [1.183, 115, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.664, 22, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.361, 2, 26], 'true,false,true': [0.016, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.118, 55, 4], 'false,false,false,true': [1.571, 42, 18], 'false,false,false,false': [1.628, 20, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.062, 0, 24], 'false,true,true,true': [1.053, 1, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.158, 89, 0], 'false,false,true': [0.55, 0, 24], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.214, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.376, 0, 24], 'true,true,false': [0.252, 0, 7], 'true,false,true': [0.01, 73, 0], 'true,false,false,true': [0.045, 17, 0], 'true,false,false,false': [0.868, 10, 4], 'false,true': [0.859, 18, 15], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.189, 10, 12]}]
{'': [0.2148437500000014, 0.2276943835385407], 'false': [0.2099999999999995, 0.2469135802469131], 'true': [1.375244004696968e-15, 0.04694406340496868], 'false,true': [-2.3684757858670006e-16, 3.489272363107635e-17], 'true,false': [6.628197161941232e-17, 0.20408163265306106], 'false,true,true': [-1.4802973661668753e-16, 1.4802973661668753e-16]}
{'': [0.0009590110868549852, 0.13898881193257834], 'false': [0.03952312871779534, 0.1921770748879275], 'false,false': [0.10493059338288047, 0.20582902705296718], 'false,false,false': [0.15264752107119445, 0.20408997903507947], 'false,false,true': [nan, 0.10493059338288047], 'false,true': [nan, 0.03952312871779534]}
{'': [0.005289119116101008, 0.13628865709214452], 'false': [nan, 0.13628865709214452], 'false,false': [0.0026382825751109073, 0.12757484851330422], 'false,false,false': [0.10181966607651279, 0.1787017884836517], 'true': [0.0016381955724242602, 0.008597941434784317], 'true,false': [0.004076754271452265, 0.0], 'false,false,true': [0.005936135793999468, 7.401486830834377e-17], 'true,true': [0.0016381955724242602, nan]}
{'': [0.04312767407296399, 0.0012735526573196534], 'false': [0.00035305559616495655, 0.0014691402433479413], 'false,false': [nan, 0.0014691402433479413], 'false,false,false': [nan, 0.0014691402433479413], 'false,true': [nan, 0.00035305559616495655], 'false,true,false': [0.0002677340417231269, 0.0003999034012913881]}
{'': [0.005013560469361282, 0.07541609531129446], 'false': [0.0023650086887262813, 0.07438195818852891], 'false,false': [0.06694054369325794, 0.10456648334528312], 'false,false,true': [0.0029030781562867005, 0.011576167538936978], 'true': [0.0049314142484951, 0.0], 'false,true': [2.301569046736507e-05, 0.0]}
{'': [0.03129081001819391, 0.09457873657051807], 'false': [0.0014359891057311724, 0.1001227353396475], 'false,false': [0.06274058522288263, 0.0006777843546441656], 'true': [nan, 0.03129081001819378], 'true,false': [nan, 0.03129081001819391], 'false,false,false': [0.0007951493426760708, 0.0004415524851556539]}
{'': [0.039437262775730265, 0.07688452392301699], 'false': [nan, 0.07688452392301706], 'false,false': [nan, 0.07688452392301699], 'false,false,false': [nan, 0.07688452392301699], 'true': [0.006901315437683595, 0.01185793536287448]}
{'': [0.062429547855071196, 0.04146077431479367], 'true': [0.06613241979629952, 0.00012326461594239224], 'false': [nan, 0.041460774314793676], 'false,false': [0.013916916029231908, 0.056190097147327506], 'false,false,false': [0.04113541946571685, 0.08283962097537406], 'true,false': [0.00012326461594239224, nan]}
{'': [0.003788181173198855, 0.038693726726802415], 'false': [0.022723852463796476, 0.05939828321662191], 'false,false': [0.012584273055576911, 0.0012337563228987816], 'false,true': [0.0739602265214831, 0.000281685096926537], 'false,true,true': [0.0739602265214831, nan], 'false,false,false': [nan, 0.0012337563228987816]}
{'': [0.019034518647191825, 0.04030283669159978], 'false': [0.022370101529481285, 0.06424764301199674], 'false,false': [nan, 0.06424764301199674], 'false,false,false': [nan, 0.06424764301199674], 'true': [0.006608858347782074, 0.008592569547201216], 'true,false': [1.2735808909216266e-06, 0.028641805369629503], 'true,false,false': [0.00011935606892131493, 0.053818573909455394], 'true,true': [0.005891132452328793, 0.009061082285331852]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.524
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8268989350995116;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.01685106490048774;  // std dev = 0.331, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7353407938536504;  // std dev = 0.183, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), follows(E, D) )
%   | | | then return -0.10243972467350833;  // std dev = 0.840, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | | else return -0.135439428685028;  // std dev = 0.032, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7705540662753357;  // std dev = 0.155, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13054278753974033;  // std dev = 0.038, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.73168168114997;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.26885045181663686;  // std dev = 1.633, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return 0.6342350388941324;  // std dev = 0.899, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5586500244807169;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.2879908171165249;  // std dev = 0.664, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.7434214346185453;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5712841706301083;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5800080799021211;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6274210807069684;  // std dev = 0.211, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1160389771968183;  // std dev = 0.045, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1075021253456844;  // std dev = 2.532, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
%   | | | else return 0.2211260583681591;  // std dev = 1.647, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.4198816609411892;  // std dev = 0.007, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.46461456031008974;  // std dev = 0.186, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(E, A), tweets(A, H) )
%   | | | then return 0.24859689429383505;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.32433754537597265;  // std dev = 0.795, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.5284152468709048;  // std dev = 0.209, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.497260858748068;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6362326508100907;  // std dev = 0.094, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(K, A) )
%   | then return -0.10500613591253491;  // std dev = 0.005, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.15587866286503974;  // std dev = 0.051, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.2629987666429861;  // std dev = 0.969, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.35698409865087904;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.35416011319678453;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4525615125521154;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.36123417183879675;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.08559060648732286;  // std dev = 0.586, 70.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=1 */
%   | | | else return -0.02840349367197529;  // std dev = 0.860, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05684442013544495;  // std dev = 1.465, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return 0.10608275635785927;  // std dev = 1.767, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26885833149488864;  // std dev = 0.048, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, E) )
%   | | then return -0.059308337985476293;  // std dev = 0.107, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   | | else return -0.1383845513038699;  // std dev = 0.173, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.33138176855430584;  // std dev = 0.113, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27597362186069857;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3278404490205384;  // std dev = 0.839, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.45490530813037805;  // std dev = 0.096, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12751366031541894;  // std dev = 0.166, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.1765048042755093;  // std dev = 0.532, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.21977516817312415;  // std dev = 0.039, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return -0.1145257071882116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2582483645036535;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.18953684767451265;  // std dev = 0.828, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07928686738115269;  // std dev = 0.083, 95.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3104926029428161;  // std dev = 0.244, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1223050221612113;  // std dev = 0.101, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13358136992433622;  // std dev = 0.430, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.0546702730014591;  // std dev = 1.111, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.12799259268024726;  // std dev = 0.978, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.1629932927071154;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.19159592236318643;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.24953701868261224;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.045905460747356304;  // std dev = 0.110, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.23722662784177048;  // std dev = 0.186, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09364692663648609;  // std dev = 0.033, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04044160662840783;  // std dev = 0.892, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.00977441972402002;  // std dev = 0.987, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.18351726908964408;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.1148300196517632;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16329308485774788;  // std dev = 0.073, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.35374941144171024;  // std dev = 0.249, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07277493072003044;  // std dev = 0.025, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.21808977563927967;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.30661569106115283;  // std dev = 0.168, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.11046779582183931;  // std dev = 0.131, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.24734665651819643;  // std dev = 0.219, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.14745897856687967;  // std dev = 0.077, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.15411433579495762;  // std dev = 0.785, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17451738809307704;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.04999033610418019;  // std dev = 0.079, 74.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.1672802894927339;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.0761737763124655;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2159713436493585;  // std dev = 3.51e-05, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.13532214791295247;  // std dev = 0.076, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.033931416135838166;  // std dev = 0.272, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.621', 'seconds']
Refined model CLL: -0.103897


******************************************
Best model found
******************************************
Results 

CLL : -0.100332 

AUC ROC : 0.993601 

AUC PR : 0.366827 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 10.524 

Total Inference Time : 5.473008632659912 

Total revision time: 22.263627317428586
Best scored revision CLL: -0.103897


Results 

CLL : -0.100332 

AUC ROC : 0.993601 

AUC PR : 0.366827 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 22.29340079116821 

Total Inference Time : 5.473008632659912 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.941
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8224346493852267;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.003920030417729115;  // std dev = 0.345, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.2635543405049178;  // std dev = 0.491, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7322419079000545;  // std dev = 0.183, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07057146870252341;  // std dev = 0.212, 106.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.002317710777086178;  // std dev = 1.723, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.42063141964855916;  // std dev = 1.035, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1240806022936962;  // std dev = 4.296, 105.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5666311033294681;  // std dev = 0.177, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.48720122077296996;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4525886278763515;  // std dev = 0.782, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5978032699059139;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5610251080536862;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009584273513228958;  // std dev = 3.780, 146.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=24 */
%   | | | else return 0.04943020977819755;  // std dev = 3.430, 69.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5103407655796357;  // std dev = 2.954, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12546177408360779;  // std dev = 0.121, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return -0.1297746921526617;  // std dev = 0.056, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17636907266455654;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28069878555600175;  // std dev = 1.362, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | else return 0.5185255498592475;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.235753954502866;  // std dev = 0.964, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.4908845318531888;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6355639693922974;  // std dev = 0.285, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10110468854205946;  // std dev = 1.574, 171.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=4 */
%   | | else return 0.04280597155898489;  // std dev = 0.331, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005907491209304668;  // std dev = 2.235, 136.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=39 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27210099883008204;  // std dev = 0.166, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5010363338343684;  // std dev = 1.281, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13134006139622947;  // std dev = 0.138, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.14438991595619594;  // std dev = 0.169, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2763889226122906;  // std dev = 1.528, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else return -0.08112960530432721;  // std dev = 1.500, 161.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08582514055115698;  // std dev = 1.755, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1965678496503304;  // std dev = 0.055, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(A, E) )
%   | | then return 0.2623188629315812;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.059008033249535546;  // std dev = 0.121, 106.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.04408996875289283;  // std dev = 1.817, 67.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=23 */
%   | | | else return 0.029557422640566305;  // std dev = 2.049, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11147247509455896;  // std dev = 0.271, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27509026027930333;  // std dev = 0.744, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09786967309244352;  // std dev = 0.209, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36666731790343143;  // std dev = 0.629, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12139885498652078;  // std dev = 0.230, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16187869708414646;  // std dev = 1.129, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.06682350210727267;  // std dev = 1.093, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.08241390852958108;  // std dev = 0.340, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.11764523767586947;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.029416853974805052;  // std dev = 0.910, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.03760195030480881;  // std dev = 1.144, 50.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04202980479451339;  // std dev = 1.518, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.763', 'seconds']
Parameter learned model CLL:-0.114401 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.389, 2, 54], 'true,false,true': [8.69e-08, 95, 0], 'true,false,false': [0.345, 25, 4], 'false,true,true,true': [0.0, 0, 16], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [3.16e-08, 33, 0], 'false,false': [0.491, 22, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.183, 0, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.212, 99, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.723, 22, 4], 'false,false,false,true': [1.035, 2, 4], 'false,false,false,false': [4.296, 74, 31]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.177, 0, 32], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.774, 1, 2], 'true,false,false': [0.782, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.164, 0, 5], 'false,false,true,false': [3.65e-08, 0, 10], 'false,false,false,true': [3.78, 122, 24], 'false,false,false,false': [3.43, 53, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.954, 6, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.121, 108, 0], 'false,true,false,false': [0.056, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.362, 2, 37], 'true,false': [0.0, 0, 1], 'false,true,true': [0.964, 1, 14], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.285, 0, 26], 'false,false,true,false': [1.574, 167, 4], 'false,false,false': [0.331, 32, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.235, 97, 39], 'false,true': [0.166, 0, 15], 'false,false,true': [1.281, 1, 39], 'false,false,false,true': [0.138, 32, 0], 'false,false,false,false': [0.169, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.528, 2, 67], 'true,false': [1.5, 155, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.755, 25, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.055, 0, 45], 'true,false,true': [0.011, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.121, 99, 7], 'false,false,false,true': [1.817, 44, 23], 'false,false,false,false': [2.049, 35, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.271, 3, 38], 'false,true,true,true': [0.744, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.209, 126, 0], 'false,false,true': [0.629, 0, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 61, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.129, 1, 40], 'true,true,false': [1.093, 2, 14], 'true,false,true': [0.34, 100, 0], 'true,false,false,true': [0.028, 10, 0], 'true,false,false,false': [0.91, 11, 4], 'false,true': [1.144, 30, 20], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.518, 25, 15]}]
{'': [0.21839506172839537, 0.23765432098765582], 'false': [0.23495906016375898, 0.24105186267348383], 'false,true': [-8.881784197001253e-17, 3.027880976250427e-17], 'true': [0.03443877551020399, 0.031217481789802198], 'true,false': [7.946859544685331e-17, 0.11890606420927453], 'false,true,true': [-2.220446049250313e-16, 0.0]}
{'': [0.0007099021893119525, 0.12434132211138972], 'false': [0.045140260373679575, 0.17076708577788835], 'false,false': [0.11423122458169062, 0.1804063820867899], 'false,false,false': [0.17861307303732546, 0.17575521433427319], 'false,false,true': [nan, 0.11423122458169062], 'false,true': [nan, 0.045140260373679575]}
{'': [0.03274563564012127, 0.13224137082417348], 'false': [nan, 0.1322413708241732], 'false,false': [0.002104096072133821, 0.12152694158961064], 'false,false,false': [0.09785047881825498, 0.17054680612115466], 'true': [0.000974242673994874, 0.15166026345057815], 'true,false': [0.19987509907349668, 0.12228210023169192], 'false,false,true': [0.005410532756914543, 1.3322676295501878e-16], 'true,true': [0.000974242673994874, nan]}
{'': [0.08813524834366282, 0.0009430109594493208], 'false': [0.00013616831023055553, 0.0009728276826552321], 'false,false': [nan, 0.0009728276826552321], 'false,false,false': [nan, 0.0009728276826552321], 'false,true': [nan, 0.00013616831023054228], 'false,true,false': [0.00013660752298322104, 0.00011935182589879852]}
{'': [0.047731300428657475, 0.08387040324602274], 'false': [0.06190051749619341, 0.08150154632273474], 'false,false': [0.07515609633927091, 0.1094682183166859], 'false,false,true': [0.0031239450023980643, 0.014485518236450822], 'false,true': [0.061958992943912015, 0.0], 'true': [0.0475411406813544, 0.0]}
{'': [0.03672246597427729, 0.09785680817767836], 'false': [0.0018418284994893657, 0.10565784662297867], 'false,false': [0.04102391030982293, 0.0006428760099252916], 'true': [nan, 0.036722465974277474], 'true,false': [nan, 0.03672246597427729], 'false,false,false': [0.0005949271123039182, 0.000606540314346586]}
{'': [0.04678185542419991, 0.06842156609014512], 'false': [nan, 0.06842156609014513], 'false,false': [nan, 0.06842156609014512], 'false,false,false': [nan, 0.06842156609014512], 'true': [0.03384533782476126, 0.013980227911431062]}
{'': [0.00024320534040385097, 0.04282151061157994], 'false': [nan, 0.04282151061158007], 'false,false': [0.014722793445286755, 0.06362704336314372], 'false,false,false': [0.04928850919867629, 0.08234402544073031], 'true': [6.718653473862308e-05, 6.439849684987398e-05], 'true,false': [6.439849684987398e-05, nan]}
{'': [0.07347580976507628, 0.037700579739737734], 'false': [0.02267769392065286, 0.05810210372814286], 'false,false': [0.012780325671844395, 0.0008685451022863962], 'false,true': [0.023066301855248873, 0.0003478154575769067], 'false,true,true': [0.023066301855248873, nan], 'false,false,false': [nan, 0.0008685451022863962]}
{'': [0.029562750279687713, 0.04015738051158443], 'false': [0.02617108591713987, 0.057629356590538985], 'false,false': [nan, 0.057629356590539006], 'false,false,false': [nan, 0.057629356590538985], 'true': [0.045131200911778295, 0.009042594302332667], 'true,true': [0.03106434192011988, 0.07467831490639872], 'true,false': [0.0011566518447140995, 0.03833866159313338], 'true,false,false': [7.712853996439395e-05, 0.05519544677497752]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.284
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8364098046647294;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11010503315445591;  // std dev = 0.175, 126.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.3581489350995123;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.6853785074630132;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.7238400459245514;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7434654994441873;  // std dev = 0.050, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7739366431098158;  // std dev = 0.159, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12896905267818112;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.12544463852839127;  // std dev = 3.33e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.29701438684128156;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.30874113578563506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5341233908009558;  // std dev = 0.179, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.565955852851913;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.42549599047435355;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5696116833675853;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6043041524487189;  // std dev = 0.173, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11516104814163161;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.12036096640665885;  // std dev = 2.585, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
%   | | | else return 0.16920570062842874;  // std dev = 2.005, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3937730824319184;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.42628896770348246;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.09590158815086886;  // std dev = 1.151, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.41350683080876216;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5622462218291435;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.503425738953495;  // std dev = 0.948, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.578394272588999;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(J, A) )
%   | then return -0.1039361285167737;  // std dev = 5.10e-09, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return -0.15826598854867704;  // std dev = 0.059, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.30516803458556485;  // std dev = 0.980, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.40486278771856765;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3842537067179023;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04739567396804745;  // std dev = 0.858, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3328298226955853;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08958367539343819;  // std dev = 0.423, 84.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=1 */
%   | | | else return -0.01919505248605167;  // std dev = 1.153, 47.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07345607988615745;  // std dev = 1.786, 55.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
%   | | | else return 0.05300781020525163;  // std dev = 1.882, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27917241739161514;  // std dev = 0.078, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, E) )
%   | | then return -0.06300156953838999;  // std dev = 0.133, 87.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=7 */
%   | | else return -0.089047672928386;  // std dev = 0.011, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.37808064063445523;  // std dev = 0.271, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2505232358824136;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.347583699606696;  // std dev = 0.625, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.4936448060817666;  // std dev = 0.278, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1112135852236288;  // std dev = 0.058, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.1404183720819066;  // std dev = 0.460, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(C, F), recursion_accounttype(C, B) )
%   | | | then return 0.1947486608000437;  // std dev = 0.988, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return -0.06679509215981154;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.32695479113647385;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.08410182594703991;  // std dev = 0.026, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.27442211073631156;  // std dev = 0.262, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3016315996057737;  // std dev = 0.192, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09773238146790729;  // std dev = 0.054, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.08505905727479998;  // std dev = 0.688, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.1024051490739104;  // std dev = 1.537, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19227995106019607;  // std dev = 0.101, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.34717297561779814;  // std dev = 0.088, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(A, G) )
%   | | | then return 0.2873629565004764;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.26867608434865786;  // std dev = 0.093, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0788449838285684;  // std dev = 0.039, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.24128005084884965;  // std dev = 0.181, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.09543069288129094;  // std dev = 0.972, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05789723160913683;  // std dev = 0.749, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.05510867210516371;  // std dev = 1.018, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.12590017061890849;  // std dev = 0.979, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.19210654951619627;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2713591223698585;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06806464167924824;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.18365528573833242;  // std dev = 0.038, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.07309571581572918;  // std dev = 0.040, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.22187700447282963;  // std dev = 0.112, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3725782503459923;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1295755264597872;  // std dev = 0.065, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.11475614762854536;  // std dev = 0.948, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.14394889069759856;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.010616056882781423;  // std dev = 0.372, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return -0.0588312475725514;  // std dev = 0.053, 123.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=4 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.19633255017693493;  // std dev = 1.165, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.19647137674384077;  // std dev = 0.140, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09729762448841843;  // std dev = 0.151, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.01106642073012494;  // std dev = 0.749, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -3.537752859751811E-4;  // std dev = 0.924, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.786', 'seconds']
Refined model CLL: -0.10236


******************************************
Best model found
******************************************
Results 

CLL : -0.095262 

AUC ROC : 0.994124 

AUC PR : 0.42479 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 9.284 

Total Inference Time : 9.296701192855835 

Total revision time: 26.812849378585817
Best scored revision CLL: -0.10236


Results 

CLL : -0.095262 

AUC ROC : 0.994124 

AUC PR : 0.42479 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 26.84262285232544 

Total Inference Time : 9.296701192855835 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.279
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8451619221124996;  // std dev = 0.993, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.3248156017661784;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7269011143562277;  // std dev = 0.201, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03319628462889362;  // std dev = 0.264, 147.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04513189375333479;  // std dev = 1.771, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.743066086756546;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12422266435788142;  // std dev = 4.647, 120.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=36 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5716919011635944;  // std dev = 0.329, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8149837255475659;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5809674181237603;  // std dev = 0.154, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5903365942467733;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5567387967641423;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010842963742680858;  // std dev = 4.284, 216.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=30 */
%   | | | else return 0.08779134732130381;  // std dev = 3.760, 79.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5260591604518183;  // std dev = 2.872, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12278663967307055;  // std dev = 0.055, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.1331365912554872;  // std dev = 0.014, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18706937021362172;  // std dev = 0.309, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.21232851863578248;  // std dev = 2.399, 62.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=55 */
%   | else return 0.45077954627582406;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2962309711277831;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5067809903219325;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6231641377657351;  // std dev = 0.247, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.09802073916395425;  // std dev = 1.758, 182.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=5 */
%   | | else return -0.00979566223031249;  // std dev = 0.297, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02391836233079209;  // std dev = 2.744, 189.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=59 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19700123916037027;  // std dev = 0.999, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5016108771550497;  // std dev = 0.960, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1352622329729128;  // std dev = 0.269, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return -0.13683927656860154;  // std dev = 0.263, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3023684445382679;  // std dev = 0.855, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else return -0.08501003470186798;  // std dev = 1.653, 182.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03807960936071145;  // std dev = 1.968, 68.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17820558863912664;  // std dev = 0.993, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( follows(A, E) )
%   | | then return 0.2570000337832843;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04820373507465791;  // std dev = 0.154, 147.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.011060255156620813;  // std dev = 1.925, 99.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=26 */
%   | | | else return 0.03539636398855188;  // std dev = 2.186, 66.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1391660867089834;  // std dev = 0.210, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28970222445736643;  // std dev = 0.810, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09340071746862555;  // std dev = 0.088, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3455065238188061;  // std dev = 1.078, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12905285419144918;  // std dev = 0.313, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15124030760783175;  // std dev = 1.692, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | | else return 0.16926416704128033;  // std dev = 0.352, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08423623142977019;  // std dev = 0.033, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0945266003350748;  // std dev = 0.030, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.00795424835524089;  // std dev = 0.924, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.016367725253626824;  // std dev = 1.525, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17281902462844823;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019669254347994002;  // std dev = 1.754, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.242', 'seconds']
Parameter learned model CLL:-0.113969 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.993, 1, 76], 'true,false,true': [5.16e-08, 118, 0], 'true,false,false': [0.258, 52, 4], 'false,true,true,true': [0.0, 0, 19], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [3.65e-08, 36, 0], 'false,false': [0.499, 24, 21]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.201, 0, 60], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 131, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.771, 38, 4], 'false,false,false,true': [0.116, 0, 8], 'false,false,false,false': [4.647, 84, 36]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.329, 0, 46], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.154, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.184, 0, 6], 'false,false,true,false': [2.98e-08, 0, 11], 'false,false,false,true': [4.284, 186, 30], 'false,false,false,false': [3.76, 58, 21]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.872, 4, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.055, 152, 0], 'false,true,false,false': [0.014, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.309, 59, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.399, 7, 55], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 16], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.247, 0, 35], 'false,false,true,false': [1.758, 177, 5], 'false,false,false': [0.297, 52, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.744, 130, 59], 'false,true': [0.999, 1, 17], 'false,false,true': [0.96, 0, 48], 'false,false,false,true': [0.269, 69, 0], 'false,false,false,false': [0.263, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.855, 0, 95], 'true,false': [1.653, 175, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.968, 46, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 58], 'true,false,true': [0.023, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 131, 16], 'false,false,false,true': [1.925, 73, 26], 'false,false,false,false': [2.186, 44, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.21, 3, 56], 'false,true,true,true': [0.81, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.088, 194, 0], 'false,false,true': [1.078, 1, 36], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.313, 75, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.692, 3, 61], 'true,true,false': [0.352, 0, 15], 'true,false,true': [0.033, 117, 0], 'true,false,false,true': [0.03, 24, 0], 'true,false,false,false': [0.924, 15, 4], 'false,true': [1.525, 38, 23], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.754, 37, 19]}]
{'': [0.2171394104855483, 0.24408284023668717], 'false': [0.23786268313703063, 0.2488888888888888], 'false,true': [3.089316242435218e-16, 3.700743415417188e-17], 'true': [0.012818350480687057, 0.022460034350640673], 'true,false': [2.258080728051166e-17, 0.06632653061224474], 'false,true,true': [-2.8047739569477637e-16, 0.0]}
{'': [0.0006720636841090292, 0.12896281953248667], 'false': [0.06967365015180375, 0.17052099076683563], 'false,false': [0.074669345448385, 0.19128024188506565], 'false,false,false': [0.0016698428766425133, 0.17998548631191275], 'false,false,true': [nan, 0.074669345448385], 'false,true': [nan, 0.06967365015180375]}
{'': [0.004492602745069796, 0.12182576610528684], 'false': [nan, 0.12182576610528532], 'false,false': [0.0022498121436469714, 0.11205235473144266], 'false,false,false': [0.0849805495884137, 0.17894806040581587], 'true': [0.0023477509773993897, 0.011775668161601383], 'true,false': [0.003210145268792264, 0.002964322456748991], 'true,true': [0.0023477509773993897, nan], 'false,false,true': [0.005644059978419398, 8.074349270001139e-17]}
{'': [0.0644255628243025, 0.001183281122496345], 'false': [3.001823390506784e-05, 0.0016228900957076717], 'false,false': [nan, 0.0016228900957076717], 'false,false,false': [nan, 0.0016228900957076717], 'false,true': [nan, 3.001823390506784e-05], 'false,true,false': [1.959204292959365e-05, 8.476334849665358e-06]}
{'': [0.0922220483191665, 0.08578240728865381], 'true': [0.09280697860692555, 0.0], 'false': [0.002464197581384478, 0.08580430476488039], 'false,false': [0.08487833498531501, 0.08838202342436648], 'false,false,true': [0.001741283359608354, 0.016977902639672218], 'false,true': [1.0485778300012294e-05, 0.0]}
{'': [0.03983938800728842, 0.08641912881262537], 'false': [0.05540113031369074, 0.08731436523417298], 'false,false': [0.0191872561367508, 0.0011250423092895782], 'true': [nan, 0.03983938800728845], 'true,false': [nan, 0.03983938800728842], 'false,false,false': [0.0010482924425898052, 0.0012165880776733968]}
{'': [0.04631337265551737, 0.056927741781988395], 'false': [nan, 0.05692774178198841], 'false,false': [nan, 0.056927741781988395], 'false,false,false': [nan, 0.056927741781988395], 'true': [0.007689855328448284, 0.015008663416759794]}
{'': [0.016365872661649922, 0.03961651771709421], 'false': [nan, 0.03961651771709419], 'false,false': [0.02370202325358576, 0.05155182388461867], 'false,false,false': [0.03742921407666072, 0.07238039088070794], 'true': [0.016708317830822265, 0.000258735080099437], 'true,false': [0.000258735080099437, nan]}
{'': [0.044269625069772264, 0.03511921227942846], 'false': [0.02077260828487562, 0.06107807434152333], 'false,false': [0.03142641631885288, 0.0013076156280037664], 'false,true': [0.02047885589509435, 3.9771793529612594e-05], 'false,true,true': [0.02047885589509435, nan], 'false,false,false': [nan, 0.0013076156280037664]}
{'': [0.028376935175148506, 0.04579855315131126], 'false': [0.03814091101783824, 0.053814521601238105], 'false,false': [0.0, 0.0549276807965598], 'false,false,false': [nan, 0.05492768079655971], 'true': [0.03784987610289905, 0.006290639057736485], 'true,true': [0.044722362526988066, 0.008264090036472124], 'true,false': [9.158046045433936e-06, 0.02248674567964376], 'true,false,false': [3.712954162478239e-05, 0.044982393111242955]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 36.134
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8411997825571396;  // std dev = 0.129, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12090865652352484;  // std dev = 0.143, 191.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.83e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18373033044834958;  // std dev = 3.073, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return 0.10814893509951236;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7278601311092213;  // std dev = 0.208, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7311911912464263;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12776027357544043;  // std dev = 3.94e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.07723865062262177;  // std dev = 0.208, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.1222397264245596;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.05407941199324865;  // std dev = 1.198, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7350122940520397;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10843095683238096;  // std dev = 4.745, 133.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=36 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5370105311525056;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else if ( tweets(A, E) )
%   | | then return 0.4984395040930996;  // std dev = 0.352, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.2985191193134797;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5924474601273217;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.47414644938887335;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6281029829710332;  // std dev = 0.401, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11897870415787858;  // std dev = 0.111, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.06695764349308823;  // std dev = 2.615, 53.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=13 */
%   | | | else return 0.1944166687110831;  // std dev = 3.688, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.3726847261101037;  // std dev = 1.372, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return 0.4407407279361239;  // std dev = 0.386, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.6532385376388073;  // std dev = 0.298, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.42761202630908773;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5957444543987235;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.734100142680691;  // std dev = 0.288, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.6420711209503962;  // std dev = 0.913, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(K, A) )
%   | then return -0.10618999984455291;  // std dev = 0.007, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return -0.17641367564173957;  // std dev = 0.279, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3289398975910836;  // std dev = 0.107, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.5246960296736078;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.10084628608476018;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3332279154656322;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4666747095772209;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.46583956782116015;  // std dev = 1.258, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return -0.0960159236159183;  // std dev = 1.606, 204.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=5 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return -0.06835672525816507;  // std dev = 0.580, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.16187410309658312;  // std dev = 1.818, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.23434505965424643;  // std dev = 0.982, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.2696003597082536;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.04677425454882776;  // std dev = 0.380, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return -0.05191083205938349;  // std dev = 0.103, 125.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=13 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.31461718873671113;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1869298784444469;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.38930441522425147;  // std dev = 0.495, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5341263132458868;  // std dev = 0.440, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.126168602450341;  // std dev = 0.034, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then return 0.2245697075741587;  // std dev = 0.080, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, E), follows(A, C) )
%   | | | then return -0.037529241460401375;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.17392305114097492;  // std dev = 0.969, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0.2557295840243306;  // std dev = 0.032, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18878232480228319;  // std dev = 0.320, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return -0.08319496314540437;  // std dev = 0.048, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20106384148193332;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03158125913189815;  // std dev = 1.907, 69.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
%   | | | else return 0.12548162598392978;  // std dev = 1.624, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1960318211777012;  // std dev = 0.018, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.16400418441334755;  // std dev = 0.796, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.40793977893900724;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.07600401274606468;  // std dev = 0.013, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | | else return -0.09314753089844421;  // std dev = 0.411, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.25561963966354834;  // std dev = 1.688, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return -0.12732316331749818;  // std dev = 0.200, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.008675310935764574;  // std dev = 0.742, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.0429373408865025;  // std dev = 1.334, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15938015282219578;  // std dev = 0.027, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.06467712332816081;  // std dev = 0.955, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.17564540654415603;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.030832466113071378;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1599349188345815;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.15998714842791784;  // std dev = 0.187, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07222639894053172;  // std dev = 0.052, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.33139066960968416;  // std dev = 0.080, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.13288691337982556;  // std dev = 0.036, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13974944569315761;  // std dev = 0.118, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else return -0.06011480904811854;  // std dev = 0.050, 179.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1055638456217139;  // std dev = 1.032, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.08365517239837089;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.09152964906681846;  // std dev = 0.365, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.005468301005516258;  // std dev = 0.610, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.13778904875519826;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0033814624885325447;  // std dev = 1.094, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | | else return -0.03632111723658223;  // std dev = 1.376, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.443', 'seconds']
Refined model CLL: -0.104532


******************************************
Best model found
******************************************
Results 

CLL : -0.100918 

AUC ROC : 0.993373 

AUC PR : 0.369889 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 36.134 

Total Inference Time : 16.0207941532135 

Total revision time: 62.72893561172485
Best scored revision CLL: -0.104532


Results 

CLL : -0.100918 

AUC ROC : 0.993373 

AUC PR : 0.369889 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 62.758709085464474 

Total Inference Time : 16.0207941532135 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.571
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else return -0.0740544547309962;  // std dev = 0.251, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.20143251718906383;  // std dev = 0.475, 67.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7202259762708688;  // std dev = 1.016, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04201148386131193;  // std dev = 0.257, 191.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07101624670356507;  // std dev = 1.804, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5531768113063644;  // std dev = 1.240, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.08288582661646159;  // std dev = 5.099, 160.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5357915264964611;  // std dev = 1.755, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7338652995348101;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6319448340474639;  // std dev = 0.176, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5987667789130331;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5664782328459916;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.002652102843829096;  // std dev = 4.572, 235.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=34 */
%   | | | else return 0.06980323020017044;  // std dev = 4.084, 98.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5386126486211862;  // std dev = 2.715, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12193992999580071;  // std dev = 0.033, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | | else return -0.12962747342639694;  // std dev = 0.009, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15920834742856427;  // std dev = 0.279, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2951439020485274;  // std dev = 1.634, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.47037238180883545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.300350954507544;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.0969230609525834;  // std dev = 0.850, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6350448683963671;  // std dev = 0.339, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10140309213364473;  // std dev = 1.792, 255.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=5 */
%   | | else return 0.035461559447136824;  // std dev = 0.322, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027006966630554304;  // std dev = 3.103, 252.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25850156036845306;  // std dev = 0.300, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45636992919969893;  // std dev = 2.056, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1247348603777862;  // std dev = 0.205, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.12983277554712533;  // std dev = 0.211, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2786773120599142;  // std dev = 1.958, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.09033401731141172;  // std dev = 1.763, 254.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04625769510462354;  // std dev = 2.250, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19334048126461728;  // std dev = 0.094, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.3202345553751199;  // std dev = 0.107, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.047623041144890826;  // std dev = 0.149, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0034983606647885747;  // std dev = 2.134, 118.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=28 */
%   | | | else return 0.03958423740500113;  // std dev = 2.652, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18332824789427205;  // std dev = 0.060, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2847695741645829;  // std dev = 0.902, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09333462761470829;  // std dev = 0.122, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40235250994172844;  // std dev = 0.805, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11453422948381183;  // std dev = 0.251, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17326886038558934;  // std dev = 1.128, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.15696156603991795;  // std dev = 0.384, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08286310383555465;  // std dev = 0.024, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09941352126199496;  // std dev = 0.016, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.03664441569097995;  // std dev = 1.155, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.010642478978316917;  // std dev = 1.574, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.13204641498276645;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019139240093496063;  // std dev = 2.019, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.856', 'seconds']
Parameter learned model CLL:-0.111284 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [5.58e-08, 117, 0], 'true,false,false': [0.251, 55, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 51, 0], 'false,false': [0.475, 44, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 172, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.804, 56, 4], 'false,false,false,true': [1.24, 2, 8], 'false,false,false,false': [5.099, 120, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.755, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.176, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.572, 201, 34], 'false,false,false,false': [4.084, 75, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.715, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.033, 182, 0], 'false,true,false,false': [0.009, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.279, 100, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.634, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.85, 1, 1], 'false,false,true,true': [0.339, 0, 39], 'false,false,true,false': [1.792, 250, 5], 'false,false,false': [0.322, 49, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.103, 170, 82], 'false,true': [0.3, 0, 22], 'false,false,true': [2.056, 4, 52], 'false,false,false,true': [0.205, 82, 0], 'false,false,false,false': [0.211, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.958, 3, 121], 'true,false': [1.763, 247, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.25, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.094, 0, 83], 'true,false,true': [0.107, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 163, 19], 'false,false,false,true': [2.134, 90, 28], 'false,false,false,false': [2.652, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.06, 0, 78], 'false,true,true,true': [0.902, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.122, 248, 0], 'false,false,true': [0.805, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.251, 87, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.128, 1, 85], 'true,true,false': [0.384, 0, 19], 'true,false,true': [0.024, 171, 0], 'true,false,false,true': [0.016, 31, 0], 'true,false,false,false': [1.155, 25, 4], 'false,true': [1.574, 47, 25], 'false,false,true': [0.816, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.019, 50, 21]}]
{'': [0.23534626038781425, 0.2229937894273566], 'true': [0.04376735964986345, 0.022210743801652794], 'false': [0.22074099722991802, 0.2254399643573189], 'false,true': [7.105427357601002e-16, 5.659960517696876e-17], 'true,false': [2.6569439905559303e-17, 0.06320022981901739], 'false,true,true': [0.0, 0.0]}
{'': [0.01200188681626416, 0.11415822686240498], 'false': [0.06582563810429848, 0.14927472183138135], 'false,false': [0.054233794110641796, 0.17421867361243218], 'false,false,false': [0.15366290483258793, 0.16249319679172528], 'false,true': [nan, 0.06582563810429848], 'false,false,true': [nan, 0.054233794110641796]}
{'': [0.04108185260263735, 0.12461617793899833], 'false': [nan, 0.12461617793899832], 'false,false': [0.0017021227871407483, 0.11396076897520918], 'false,false,false': [0.08896554944683749, 0.1701934888178355], 'true': [0.04398914225756175, 0.009303774334946285], 'true,true': [0.04398914225756175, nan], 'true,false': [0.016201844994630694, 0.0038839665779761834], 'false,false,true': [0.005212751035617247, 2.3684757858670006e-16]}
{'': [0.04607388856608212, 0.0005594964531741785], 'false': [1.0957626218300644e-05, 0.0007760820334783558], 'false,false': [nan, 0.0007760820334783558], 'false,false,false': [nan, 0.0007760820334783558], 'false,true': [nan, 1.0957626218300644e-05], 'false,true,false': [5.910104670289221e-06, 3.643067515599063e-06]}
{'': [0.033339029786752655, 0.08098622554935953], 'false': [0.04589162499829958, 0.07918651177810679], 'false,false': [0.0737192756749058, 0.10384454476108036], 'false,false,true': [0.002941841013602187, 0.012598929377182997], 'false,true': [8.575942954014427e-06, 0.36124334886101594], 'true': [0.03337669333662894, 0.0]}
{'': [0.038199917360895466, 0.08334713189868095], 'false': [0.004093995098445042, 0.08653220799879316], 'false,false': [0.07546469370798918, 0.0005619959174744827], 'true': [nan, 0.03819991736089587], 'true,false': [nan, 0.038199917360895466], 'false,false,false': [0.0005146000607514898, 0.0006008549031381008]}
{'': [0.048389537839238335, 0.06251410367482449], 'false': [nan, 0.0625141036748243], 'false,false': [nan, 0.06251410367482449], 'false,false,false': [nan, 0.06251410367482449], 'true': [0.030932782327747203, 0.012242419185747377]}
{'': [0.0006081535109991928, 0.042657176707311506], 'false': [nan, 0.04265717670731179], 'false,false': [0.022308883873062922, 0.05984450676094684], 'false,false,false': [0.03858169668216315, 0.09130588818770494], 'true': [0.0001070459907863349, 0.005680882638868248], 'true,false': [0.005680882638868248, nan]}
{'': [0.0036519229877834533, 0.03463583748189496], 'false': [0.019368124890603425, 0.06323801961187116], 'false,false': [0.016181788776537375, 0.0007244379114903779], 'false,true': [0.021413417359925763, 5.967763361166484e-05], 'false,true,true': [0.021413417359925763, nan], 'false,false,false': [nan, 0.0007244379114903779]}
{'': [0.02179353170063886, 0.04990611569780529], 'false': [0.034426661268877536, 0.0649644420924692], 'false,false': [0.22222222222222224, 0.05739310787494287], 'false,false,false': [nan, 0.05739310787494274], 'true': [0.013560471353933852, 0.00606705899583263], 'true,true': [0.014797952162236746, 0.007741434860681424], 'true,false': [3.242438772688215e-06, 0.02320820652073589], 'true,false,false': [8.73286529432061e-06, 0.0459719975592237]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 16.174
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.12497342776968673;  // std dev = 0.129, 237.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.1273797043302816;  // std dev = 0.444, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7230785556827286;  // std dev = 0.214, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7304175977502706;  // std dev = 0.148, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.6846501295247716;  // std dev = 1.009, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12730799023861653;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.10791368024723719;  // std dev = 3.871, 105.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=29 */
%   | | | else return 0.1734275400900426;  // std dev = 2.563, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5596540569623792;  // std dev = 0.299, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5902069710901983;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.55447602547249;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4947422218202346;  // std dev = 1.273, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.11382205958472377;  // std dev = 7.30e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.08643145273544449;  // std dev = 3.846, 108.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=29 */
%   | | | else return 0.16132165396020404;  // std dev = 2.522, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.3933731322611606;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.2478895584302899;  // std dev = 1.292, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.4297365895156551;  // std dev = 0.214, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.5800032063149372;  // std dev = 0.211, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.4138139898209379;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4942959345878313;  // std dev = 0.197, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6776247024547861;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.739463186753365;  // std dev = 0.231, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12019680888314219;  // std dev = 0.027, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.3031957139114031;  // std dev = 0.991, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.32676475215245315;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.34293786750465977;  // std dev = 0.051, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5369189055634911;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3220577508978864;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3157771343990419;  // std dev = 0.937, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09226393869630095;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02387309134803034;  // std dev = 2.433, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.07531524237168717;  // std dev = 2.710, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2610972182174865;  // std dev = 0.070, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.05811876582024983;  // std dev = 0.137, 175.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=18 */
%   | | else return -0.08796489647912616;  // std dev = 0.122, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), follows(A, H) )
%   | | then return 0.29910560846573553;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18066116963041953;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.24094632110299932;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.0763086368509402;  // std dev = 1.343, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.51329392479705;  // std dev = 0.396, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.12627909048425956;  // std dev = 0.034, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2162692687058449;  // std dev = 0.188, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), follows(A, D) )
%   | | | then return -0.10148407586212353;  // std dev = 1.130, 71.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=1 */
%   | | | else return -0.06626578856248659;  // std dev = 0.365, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.2500805247483222;  // std dev = 0.994, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.07909377419747296;  // std dev = 0.018, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.12056606851987563;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.0024513342212972773;  // std dev = 1.707, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.020445646195687738;  // std dev = 2.321, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.18088070016080424;  // std dev = 0.061, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.17265208729417583;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1574822106146155;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.28825809410213765;  // std dev = 0.000142, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04534327803504441;  // std dev = 0.103, 250.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.281976002745104;  // std dev = 1.637, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.12630364485469467;  // std dev = 0.031, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0966555798790942;  // std dev = 0.671, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.03269806899346901;  // std dev = 1.489, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then return 0.15460371496023056;  // std dev = 0.044, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return -0.08219208853103258;  // std dev = 0.933, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.21626521382239952;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.20055221425946596;  // std dev = 0.288, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.06785197960125762;  // std dev = 0.819, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07318167063142952;  // std dev = 0.047, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.3132412987149065;  // std dev = 0.040, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.42506631694105595;  // std dev = 0.281, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1257796870890759;  // std dev = 0.027, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.07940210453513749;  // std dev = 0.267, 89.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=82 */
%   | | else if ( follows(A, F) )
%   | | | then return -0.15646212279281976;  // std dev = 1.157, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.04072283407908622;  // std dev = 1.359, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else return -0.059856568940933115;  // std dev = 0.042, 232.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.0037359570910945167;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2506874446739602;  // std dev = 0.048, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.10337909775066763;  // std dev = 0.096, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(A, I) )
%   | | then return 0.014796072455488144;  // std dev = 0.162, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | else return -0.006539702081145386;  // std dev = 0.292, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.342', 'seconds']
Refined model CLL: -0.100948


******************************************
Best model found
******************************************
Results 

CLL : -0.09689 

AUC ROC : 0.993176 

AUC PR : 0.351788 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 16.174 

Total Inference Time : 14.659872770309448 

Total revision time: 43.29825603485107
Best scored revision CLL: -0.100948


Results 

CLL : -0.09689 

AUC ROC : 0.993176 

AUC PR : 0.351788 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 43.328029508590696 

Total Inference Time : 14.659872770309448 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.134
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6627867205773587;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01244213982199843;  // std dev = 0.314, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1001061389385988;  // std dev = 1.621, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.46759292912382494;  // std dev = 1.359, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.726990918414524;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.581531700002179;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.581531700002179;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06211742326187753;  // std dev = 1.404, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | | | else return 0.029111541479577712;  // std dev = 1.498, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5477544525841543;  // std dev = 0.679, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11826657385282084;  // std dev = 0.028, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.13007482011237737;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1711653856736293;  // std dev = 0.102, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2866503469542047;  // std dev = 1.008, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.4266979216004899;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30997807393354493;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6347380775588314;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08764915398657255;  // std dev = 1.174, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else return -0.09554979716488392;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02039558696250565;  // std dev = 1.572, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2478336262183659;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4870198079954389;  // std dev = 0.499, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13421887118864664;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10906197070730676;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2629460811018005;  // std dev = 0.950, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.06399036274701932;  // std dev = 1.038, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.008313331306720753;  // std dev = 0.246, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.21840728643566049;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.049259248202849035;  // std dev = 0.140, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.04650959862700326;  // std dev = 0.425, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | | else return 0.08286115598059533;  // std dev = 0.991, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15800287436140237;  // std dev = 0.209, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26680419533677313;  // std dev = 0.257, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09231126705072036;  // std dev = 0.025, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4658714151510148;  // std dev = 0.306, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10577801448930962;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20732450063876506;  // std dev = 0.309, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.14102350832749844;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08541587521000164;  // std dev = 0.013, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06917539268945982;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.07845202970589893;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, G) )
%   | then return 0.017315360532635597;  // std dev = 0.290, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019857363967229855;  // std dev = 0.838, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.785', 'seconds']
Parameter learned model CLL:-0.111383 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.975, 1, 19], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false': [0.0, 4, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.484, 5, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.966, 1, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.314, 26, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.621, 12, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.359, 2, 13], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.404, 38, 3], 'false,false,false,false': [1.498, 14, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.679, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 25, 0], 'false,true,false,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.102, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.008, 1, 15], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.09, 0, 4], 'false,false,true,false': [1.174, 44, 2], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.572, 37, 17], 'false,true': [0.0, 0, 2], 'false,false,true': [0.499, 0, 6], 'false,false,false,true': [0.057, 5, 0], 'false,false,false,false': [0.078, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.95, 1, 21], 'true,false': [1.038, 41, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 3, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.026, 0, 14], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 42, 5], 'false,false,false,true': [0.425, 19, 3], 'false,false,false,false': [0.991, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.209, 1, 16], 'false,true,true,true': [0.257, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.025, 30, 0], 'false,false,true': [0.306, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.08, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.309, 0, 17], 'true,true,false': [0.005, 0, 2], 'true,false,true': [0.013, 35, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.29, 4, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.838, 8, 3]}]
{'': [0.2222222222222217, 0.24000000000000007], 'false': [0.24489795918367335, 0.2343749999999999], 'false,true': [1.4802973661668753e-16, 0.0], 'true': [0.047499999999999785, 3.900783600034334e-17], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [3.027880976250427e-17, 0.0]}
{'': [0.062222222222222415, 0.1338167093665515], 'false': [0.09886637094801766, 0.17851656836524202], 'false,false': [0.0, 0.18387345433346738], 'false,false,false': [0.0, 0.16423365621394717], 'false,true': [nan, 0.09886637094801766], 'false,false,true': [nan, 0.0]}
{'': [0.10665399821544745, 0.08855016378332856], 'true': [0.11941674845926661, 0.0], 'true,true': [0.12317240772021416, 0.0], 'false': [nan, 0.08855016378332853], 'false,false': [0.0, 0.07441342072698037], 'false,false,false': [0.04806733952202977, 0.1320706646133268], 'true,false': [nan, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.018433930437202692, 0.0008075616409067155], 'false': [4.511868101956621e-05, 0.0008608523177708235], 'false,false': [nan, 0.0008608523177708235], 'false,false,false': [nan, 0.0008608523177708235], 'false,true': [nan, 4.511868101956621e-05], 'false,true,false': [3.0903303935763126e-05, 0.0]}
{'': [0.060796596442195115, 0.06523516994514726], 'false': [0.0, 0.06260470212126668], 'false,false': [0.06611671693749571, -1.1564823173178713e-18], 'false,false,true': [0.002011974428791863, 0.02994357738904845], 'true': [0.0634426588278143, 0.0], 'false,true': [0.0, nan]}
{'': [0.04576835023115696, 0.08902266190259873], 'false': [0.0, 0.09618530512821331], 'false,false': [0.04141828876031547, 0.000928923837349121], 'true': [nan, 0.04576835023115697], 'true,false': [nan, 0.04576835023115696], 'false,false,false': [0.000643411137938818, 0.0008691657956900448]}
{'': [0.053764189774634104, 0.015105031816547468], 'true': [0.04105575403784405, 0.024489261537524874], 'false': [nan, 0.015105031816547468], 'false,false': [nan, 0.015105031816547468], 'false,false,false': [nan, 0.015105031816547468]}
{'': [4.732255454231726e-05, 0.028219976002687417], 'false': [nan, 0.028219976002687455], 'false,false': [0.019496730549368735, 0.03992307811261437], 'false,false,false': [0.008205768137993287, 0.09819461545520988], 'true': [4.732255454231726e-05, nan]}
{'': [0.0434915593800688, 0.03685515247224369], 'false': [0.017693114990640954, 0.08096296443882388], 'false,false': [0.023415808153342654, 0.000808852445528389], 'false,true': [0.013183891909168433, 2.123569577447045e-05], 'false,true,true': [0.013183891909168433, nan], 'false,false,false': [nan, 0.000808852445528389]}
{'': [0.020081000088706474, 0.04370932364449808], 'false': [0.011980090800213294, 0.06389814072130288], 'false,false': [nan, 0.06389814072130288], 'false,false,false': [nan, 0.06389814072130288], 'true': [0.005444276915679058, 1.2717521587586863e-05], 'true,true': [0.005620724575863646, 1.1368283857584455e-05], 'true,false': [4.938638204166068e-06, 2.1513998583691345e-05], 'true,false,false': [0.0, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.103
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109543;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.012788898429811946;  // std dev = 1.573, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.015375036594832914;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10453696399872661;  // std dev = 1.636, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5924066405975053;  // std dev = 0.208, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7163598014530212;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.10055637732436658;  // std dev = 0.835, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | | else return 0.054556368260470445;  // std dev = 0.746, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.47824589260192507;  // std dev = 1.071, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.41302380062177907;  // std dev = 0.004, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5448335440618275;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6691690060095984;  // std dev = 0.184, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.38960187278796105;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return -0.11550125412359909;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.11280615185450478;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11977897626203941;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( tweets(A, J) )
%   | | then return -0.20439178458494214;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.26980975644509164;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.31366231348963297;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3216907587019905;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2195433978022509;  // std dev = 0.860, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3872105550141034;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3216907587019905;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.546031159208485;  // std dev = 0.147, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09498055804416644;  // std dev = 1.096, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | else return -0.1066386159789685;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.2503558911878916;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.25584009005437036;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3672707128045272;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05541954863663974;  // std dev = 0.141, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.02854753854550387;  // std dev = 0.318, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25584009005437036;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.4546166833054303;  // std dev = 0.383, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1599714455135844;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.13310153473069747;  // std dev = 0.138, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( tweets(A, D) )
%   | | then return 0.20634964111738796;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.21022936258530378;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22725721331799018;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.3543207776136184;  // std dev = 0.199, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.09085271967545568;  // std dev = 0.025, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.07386130717100152;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2229033824934107;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1402763765991042;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.21800813508453545;  // std dev = 0.759, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.1756289821302095;  // std dev = 0.001, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.18993774083152837;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.20915415295576018;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3076091769494189;  // std dev = 0.159, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08676558609849656;  // std dev = 0.129, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return 0.19728144412314402;  // std dev = 0.602, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.025709184590888112;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.1848476604085189;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.005368405918431314;  // std dev = 0.859, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.21786491486616377;  // std dev = 0.157, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.07750115912432412;  // std dev = 0.022, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.09605344343549437;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.321708897577942;  // std dev = 0.267, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.1411342586955569;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.23831698371751311;  // std dev = 0.094, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15377294068725367;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2241001073168023;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1236182817842425;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07085181542330447;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.07409257420517311;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08803084175562194;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.12609376043560525;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12756595163593845;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07388944838669138;  // std dev = 0.390, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.446', 'seconds']
Refined model CLL: -0.112912


******************************************
Best model found
******************************************
Results 

CLL : -0.107535 

AUC ROC : 0.994769 

AUC PR : 0.387034 

Precision : 0.344828 

Recall : 0.961538 

F1 : 0.507614 

Total Learning Time : 3.103 

Total Inference Time : 2.646939754486084 

Total revision time: 9.337257396697998
Best scored revision CLL: -0.111383


Results 

CLL : -0.107535 

AUC ROC : 0.994769 

AUC PR : 0.387034 

Precision : 0.344828 

Recall : 0.961538 

F1 : 0.507614 

Total Learning Time : 9.367030870437622 

Total Inference Time : 2.646939754486084 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.411
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449664;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.4295775065280837;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6982523712646701;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.020012534812824577;  // std dev = 0.281, 81.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.02825646622389583;  // std dev = 1.893, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5383573622057313;  // std dev = 1.216, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else return 0.7324949780518171;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5717643344026706;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5717643344026706;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.058206625281701715;  // std dev = 2.007, 79.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=6 */
%   | | | else return -0.019669428871566596;  // std dev = 1.761, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5210690084021545;  // std dev = 0.931, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11539293827496329;  // std dev = 0.032, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return -0.12052108163518052;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15285052618178957;  // std dev = 0.158, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2838808944288063;  // std dev = 1.331, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else return 0.3960818123169352;  // std dev = 0.060, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3092174992538413;  // std dev = 1.83e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.639097368847556;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0850623388662021;  // std dev = 1.388, 97.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=3 */
%   | | else return -0.09613771912223712;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03505977244834903;  // std dev = 2.138, 109.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2473124651727756;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.38850191469471307;  // std dev = 1.090, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1150405169665416;  // std dev = 0.108, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10770708929826583;  // std dev = 0.138, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.21186461495639727;  // std dev = 1.988, 46.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=42 */
%   | else return -0.07891793349955825;  // std dev = 1.292, 101.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 6.080257471094572E-4;  // std dev = 0.607, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.21222977465735574;  // std dev = 0.022, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03980382132390245;  // std dev = 0.160, 82.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.010452264358467207;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.06551679979750591;  // std dev = 1.254, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20642243078238875;  // std dev = 0.063, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27832538743198143;  // std dev = 0.430, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09002784055156696;  // std dev = 0.039, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5198200207026229;  // std dev = 0.318, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11456328935474902;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17800593176597038;  // std dev = 0.971, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.13762007626704892;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08425441297318848;  // std dev = 0.009, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07421280925699908;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07622166520840783;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.004521742179615622;  // std dev = 0.396, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1557204416707081;  // std dev = 0.854, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.784', 'seconds']
Parameter learned model CLL:-0.114133 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.382, 2, 42], 'true,false,true': [8.16e-08, 90, 0], 'true,false,false': [0.0, 14, 0], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.495, 3, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.985, 1, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 71, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 16, 0], 'false,false,false,true': [0.0, 0, 3], 'false,false,false,false': [1.893, 20, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.216, 2, 29], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.866, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.007, 73, 6], 'false,false,false,false': [1.761, 25, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.931, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 67, 0], 'false,true,false,false': [0.01, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.158, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.331, 2, 31], 'true,false': [0.06, 0, 2], 'false,true,true': [1.83e-08, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.067, 0, 7], 'false,false,true,false': [1.388, 94, 3], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.138, 72, 37], 'false,true': [0.0, 0, 5], 'false,false,true': [1.09, 1, 8], 'false,false,false,true': [0.108, 11, 0], 'false,false,false,false': [0.138, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.988, 4, 42], 'true,false': [1.292, 97, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.607, 6, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.022, 0, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 72, 10], 'false,false,false,true': [0.499, 9, 4], 'false,false,false,false': [1.254, 10, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.063, 0, 33], 'false,true,true,true': [0.43, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 86, 0], 'false,false,true': [0.318, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.111, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.971, 1, 37], 'true,true,false': [0.009, 0, 5], 'true,false,true': [0.009, 69, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.009, 3, 0], 'false,true': [0.396, 8, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.854, 4, 4]}]
{'': [0.20325054784514363, 0.23582766439909303], 'false': [0.20408163265306106, 0.24489795918367332], 'false,true': [0.0, -1.1102230246251566e-17], 'true': [0.04338842975206727, 7.259150545626024e-17], 'true,false': [7.401486830834377e-17, -1.1895246692412391e-17], 'false,true,true': [0.0, nan]}
{'': [0.029384756657484766, 0.0946315192026077], 'false': [0.07892309230661962, 0.12253794984431922], 'false,false': [3.469446951953614e-18, 0.17369612768344295], 'false,false,false': [0.0, 0.14334885588906232], 'false,true': [nan, 0.07892309230661962], 'false,false,true': [nan, 3.469446951953614e-18]}
{'': [0.06853314704512872, 0.08423293991358155], 'false': [nan, 0.08423293991358108], 'false,false': [-1.9032394707859825e-16, 0.06632266743530162], 'true': [0.04731244638814702, 0.1875], 'true,false': [nan, 0.1875], 'false,false,false': [0.05100149185923161, 0.10697332847876947], 'true,true': [0.047660860152201646, 0.0], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.017318112965478426, 0.0004435992637440722], 'false': [1.7544431677906674e-05, 0.0015662126910075957], 'false,false': [nan, 0.0015662126910075957], 'false,false,false': [nan, 0.0015662126910075957], 'false,true': [nan, 1.7544431677906674e-05], 'false,true,false': [1.503978669014365e-05, 6.44001005147897e-06]}
{'': [0.05141586610887393, 0.053607090524692785], 'false': [4.7580986769649563e-17, 0.04972050466251656], 'true': [0.05370227900520661, 0.0018203814001572227], 'false,false': [0.051500310971910164, 0.0], 'false,false,true': [0.0006484244776311218, 0.019873390740187187], 'false,true': [4.7580986769649563e-17, nan]}
{'': [0.04193662340617208, 0.07403162089850064], 'false': [0.0, 0.07709618611888597], 'false,false': [0.13204131841739103, 0.0010725377237179418], 'true': [nan, 0.04193662340617196], 'true,false': [nan, 0.04193662340617208], 'false,false,false': [0.001069090178774601, 0.0010542455644966561]}
{'': [0.05642927441042397, 0.03680107108475233], 'true': [0.08592604732352989, 0.016535872292899174], 'false': [nan, 0.03680107108475233], 'false,false': [nan, 0.03680107108475233], 'false,false,false': [nan, 0.03680107108475233]}
{'': [1.542122621660258e-05, 0.03721567545850714], 'false': [nan, 0.03721567545850716], 'false,false': [0.025483853106162864, 0.06817337613282963], 'false,false,false': [0.019139299331110204, 0.11224511740244916], 'true': [1.542122621660258e-05, nan]}
{'': [0.004000806873373446, 0.02929557367913489], 'false': [0.016481757786864715, 0.09356227892625371], 'false,false': [0.020234394925441414, 0.0011299527654631371], 'false,true': [0.015402869890654767, 1.7920622879774324e-05], 'false,true,true': [0.015402869890654767, nan], 'false,false,false': [nan, 0.0011299527654631371]}
{'': [0.023339799184205572, 0.04976681111465022], 'false': [0.01305929267145934, 0.09111146074275789], 'false,false': [nan, 0.09111146074275789], 'false,false,false': [nan, 0.09111146074275789], 'true': [0.02210590510568216, 8.236869217862857e-06], 'true,true': [0.02482298331377856, 1.474657702311144e-05], 'true,false': [1.2510982394061627e-06, 1.3436333734895972e-05], 'true,false,false': [0.0, 2.485491635303751e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.513
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.13087620782678497;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.7347606411954051;  // std dev = 0.009, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, F) )
%   | | then return 0.6194734122109544;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7263890634182057;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.07263726035718228;  // std dev = 0.205, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.005576927581977903;  // std dev = 1.971, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5748479240146339;  // std dev = 0.009, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.7338976025428956;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5610267765567867;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11283641710420193;  // std dev = 0.013, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.0095081484775992;  // std dev = 1.348, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03223506509340048;  // std dev = 0.796, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.23739973255670574;  // std dev = 1.552, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.4340483804879771;  // std dev = 0.026, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3264789673370603;  // std dev = 0.941, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4582452579140618;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5083733114240673;  // std dev = 0.144, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.788076378970213;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.1062332496190083;  // std dev = 0.006, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( tweets(A, I) )
%   | | then return -0.12254910332708344;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.19852046219299774;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3327189405191733;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3224863058812306;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.14455454191891165;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.3882073289577192;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.0927168979658684;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 6.89124495685182E-4;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.47290010205894173;  // std dev = 0.212, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08128768045586114;  // std dev = 1.304, 110.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=3 */
%   | | else return -0.09225848799820012;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.19523392161458836;  // std dev = 0.965, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.30079608017989573;  // std dev = 0.112, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.018526715316315723;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06914136639033075;  // std dev = 0.156, 66.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=6 */
%   | | else return -0.07135092087281884;  // std dev = 0.103, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33025572977349016;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.294906889528077;  // std dev = 0.153, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6358786318868656;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10545641801244268;  // std dev = 0.023, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.2251521673198951;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.06047961222307049;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.24922868262664608;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.26723088537530487;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A) )
%   | then return -0.04781139571197257;  // std dev = 0.111, 100.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=10 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23892337431798355;  // std dev = 0.137, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09297811767618916;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.018406594592515514;  // std dev = 0.449, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.2563276647251424;  // std dev = 0.724, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then return 0.13635833151838717;  // std dev = 0.238, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.2268174962003743;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21537252949558103;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.21045019484353136;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32562703540677823;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08057246456420505;  // std dev = 0.005, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.16404909710629578;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.029734331476141154;  // std dev = 0.361, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.0756504691817502;  // std dev = 0.935, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.17547244121337127;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.1966617583183306;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.14277467511027397;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.0768903290002731;  // std dev = 0.907, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.272100038929445;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07480196764726493;  // std dev = 0.005, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.3964612800260133;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.08313344477595162;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1682530014533746;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15419773964334618;  // std dev = 0.079, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.22398178059105614;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.16815092988083818;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.06976140769518804;  // std dev = 0.004, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.06625872008203956;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.12322420576774587;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.04603938298473081;  // std dev = 0.294, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.07701247491813407;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.08568982114215318;  // std dev = 0.242, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.359', 'seconds']
Refined model CLL: -0.106584


******************************************
Best model found
******************************************
Results 

CLL : -0.103982 

AUC ROC : 0.994235 

AUC PR : 0.370038 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 6.513 

Total Inference Time : 7.356910705566406 

Total revision time: 19.000244592666625
Best scored revision CLL: -0.106584


Results 

CLL : -0.103982 

AUC ROC : 0.994235 

AUC PR : 0.370038 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 19.03001806640625 

Total Inference Time : 7.356910705566406 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.75
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8133728156965276;  // std dev = 1.693, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.13592671287729013;  // std dev = 0.448, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7080130503171729;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030263515388357632;  // std dev = 0.271, 142.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7473839334745774;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11161922254817894;  // std dev = 2.298, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.565058817656009;  // std dev = 1.066, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.7343665031330702;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5835404111048867;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5692064277266757;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4263492848695329;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038302498801968884;  // std dev = 2.813, 121.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=12 */
%   | | | else return -0.021553407481936904;  // std dev = 2.189, 48.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.51200326229015;  // std dev = 1.650, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11665031786523783;  // std dev = 0.034, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.11986934735482006;  // std dev = 1.49e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14454981473590092;  // std dev = 0.091, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28589198206430544;  // std dev = 1.452, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | else return 0.38095682712111556;  // std dev = 0.088, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3251344770324865;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6466012812492522;  // std dev = 0.148, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08806341185824168;  // std dev = 1.636, 139.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=4 */
%   | | else return -0.09777028005787235;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04447050731295934;  // std dev = 2.540, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2650895394906545;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.38414455732344177;  // std dev = 1.404, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11000123300936847;  // std dev = 0.067, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.10734863643211319;  // std dev = 0.103, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2755574806341423;  // std dev = 1.427, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else return -0.08300762762362027;  // std dev = 1.524, 160.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05911335771825272;  // std dev = 0.546, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17732569209479035;  // std dev = 0.992, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.1903468485888582;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.040138835689039254;  // std dev = 0.166, 125.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0052706850345403036;  // std dev = 0.861, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.05161665231696529;  // std dev = 1.568, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19166970574790188;  // std dev = 0.058, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.19678402647607163;  // std dev = 1.447, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09072354891602394;  // std dev = 0.041, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5141304115616754;  // std dev = 0.441, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10748133902544986;  // std dev = 0.091, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17947358540328234;  // std dev = 1.237, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.15666022429081322;  // std dev = 9.00e-05, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08462011847847058;  // std dev = 0.005, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07840282152643988;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.07283766796792772;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return 0.014336599880037798;  // std dev = 0.644, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008221245467216505;  // std dev = 1.346, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.155', 'seconds']
Parameter learned model CLL:-0.110778 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.693, 3, 64], 'true,false,true': [7.88e-08, 112, 0], 'true,false,false': [0.0, 14, 0], 'false,true,true,true': [0.926, 1, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,false': [0.448, 13, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.99, 1, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 126, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 11, 0], 'false,false,false,true': [1.49e-08, 0, 3], 'false,false,false,false': [2.298, 22, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.066, 1, 41], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.49e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 6], 'false,false,true,false': [0.926, 1, 6], 'false,false,false,true': [2.813, 109, 12], 'false,false,false,false': [2.189, 42, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.65, 1, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 98, 0], 'false,true,false,false': [1.49e-08, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.091, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.452, 2, 43], 'true,false': [0.088, 0, 2], 'false,true,true': [0.054, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.148, 0, 14], 'false,false,true,false': [1.636, 135, 4], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.54, 103, 56], 'false,true': [0.033, 0, 8], 'false,false,true': [1.404, 2, 11], 'false,false,false,true': [0.067, 21, 0], 'false,false,false,false': [0.103, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.427, 2, 64], 'true,false': [1.524, 155, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.546, 7, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.992, 1, 47], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.166, 109, 16], 'false,false,false,true': [0.861, 20, 6], 'false,false,false,false': [1.568, 13, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.058, 0, 45], 'false,true,true,true': [1.447, 2, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.041, 130, 0], 'false,false,true': [0.441, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.091, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.237, 1, 57], 'true,true,false': [9e-05, 0, 7], 'true,false,true': [0.005, 101, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.015, 6, 0], 'false,true': [0.644, 12, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.346, 14, 5]}]
{'': [0.22164353405460568, 0.21219135802469086], 'true': [0.04277121853419387, -1.76225876924628e-17], 'false': [0.22222222222222232, 0.20061728395061712], 'false,true': [0.12244897959183662, -1.0092936587501423e-17], 'false,true,true': [0.12244897959183662, nan], 'true,false': [5.551115123125783e-17, -1.1895246692412391e-17]}
{'': [0.019991670137443115, 0.09694536409379673], 'false': [0.0732415783301648, 0.1613304127632277], 'false,false': [2.523234146875356e-18, 0.19337151584884074], 'false,false,false': [7.401486830834377e-17, 0.1759635067374224], 'false,true': [nan, 0.0732415783301648], 'false,false,true': [nan, 2.523234146875356e-18]}
{'': [0.02530996559567853, 0.09326824415089618], 'false': [nan, 0.09326824415089652], 'false,false': [0.0710059171597634, 0.0752310284448846], 'false,false,false': [0.06541041804525612, 0.0997862961787666], 'false,false,true': [7.401486830834377e-17, 0.1224489795918368], 'true': [0.027061981459008438, 7.401486830834377e-17], 'true,true': [0.02703968429596872, 0.0], 'true,false': [nan, 7.401486830834377e-17]}
{'': [0.0358034953092945, 0.0001790663292214739], 'false': [1.1226296680444393e-05, 0.0002936779453080185], 'false,false': [nan, 0.0002936779453080185], 'false,false,false': [nan, 0.0002936779453080185], 'false,true': [nan, 1.1226296680444393e-05], 'false,true,false': [1.184675807446391e-05, 1.0092936587501423e-17]}
{'': [0.045390363666440774, 0.06506151700933722], 'false': [0.000245357726117242, 0.06142425645385771], 'false,false': [0.06251483840124063, 1.1564823173178713e-18], 'false,false,true': [0.0015636691087723698, 0.019266543927978597], 'true': [0.046852721129109376, 0.0038345630020270305], 'false,true': [0.000245357726117242, nan]}
{'': [0.04058741029493049, 0.07376890904469396], 'false': [0.0001402102021610535, 0.07536186693528125], 'false,false': [0.1515907865973601, 0.0003299947145347214], 'true': [nan, 0.04058741029493045], 'true,false': [nan, 0.04058741029493049], 'false,false,false': [0.00021251728887465636, 0.0004254635425101339]}
{'': [0.04586364334890211, 0.02293951099132293], 'true': [0.030856625062452524, 0.014507357716162166], 'false': [nan, 0.02293951099132293], 'false,false': [nan, 0.02293951099132293], 'false,false,false': [nan, 0.02293951099132293]}
{'': [0.020094940470879247, 0.04010203492011205], 'false': [nan, 0.04010203492011221], 'false,false': [0.027470404122000393, 0.07348713675832218], 'false,false,false': [0.028511472368886567, 0.13653970354982783], 'true': [0.020510124849401276, 0.0], 'true,false': [0.0, nan]}
{'': [0.0034207952625270248, 0.03431236178357669], 'false': [0.024479513004862116, 0.07096059726083724], 'false,false': [0.024311855194017462, 0.00028301717435535236], 'false,true': [0.08722695425824334, 1.3197654963993986e-05], 'false,true,true': [0.08722695425824334, nan], 'false,false,false': [nan, 0.00028301717435535236]}
{'': [0.023920516141351218, 0.06016812406821952], 'false': [0.02303329781023927, 0.09533029237893569], 'false,false': [nan, 0.09533029237893569], 'false,false,false': [nan, 0.09533029237893569], 'true': [0.023581954784161027, 1.1380055521766663e-05], 'true,true': [0.026372004233813147, 1.1578771830222934e-09], 'true,false': [2.057395922901478e-07, 2.0475590956189402e-05], 'true,false,false': [0.0, 3.79741581742118e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.171
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.8337586911970727;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.14185106490048782;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6649893563608996;  // std dev = 0.243, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | else return 0.7219215447677982;  // std dev = 0.010, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.3243696773246422;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7243696773246423;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04623357127157762;  // std dev = 2.413, 96.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=9 */
%   | | | else return -0.08521044563604158;  // std dev = 0.825, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08754580432167822;  // std dev = 2.302, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5351981049030006;  // std dev = 0.207, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.560174831745862;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5617692446068739;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4119046837095309;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7294730737433162;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1190634878342857;  // std dev = 0.035, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.004104746361198064;  // std dev = 1.323, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.10536060748411802;  // std dev = 1.869, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.3990681178942262;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.42819907181027406;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.46199669119920567;  // std dev = 0.093, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.477021352760507;  // std dev = 0.124, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5652507457221543;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.750231052721429;  // std dev = 0.123, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10744871176585999;  // std dev = 0.025, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.10469388295235389;  // std dev = 1.29e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.16270283256214213;  // std dev = 0.207, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.30273541868137305;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3659306316436929;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.32677384122855446;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.37163573401489824;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.35041546809460067;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.33347035824413407;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.47415772159345565;  // std dev = 0.326, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08643290916659596;  // std dev = 1.385, 144.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=4 */
%   | | else return -0.09163708783153478;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27722710356858643;  // std dev = 0.020, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3053076192544999;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09103771388481778;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.05191690134498264;  // std dev = 0.109, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26718392842142974;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2869127532143311;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.541785454128743;  // std dev = 0.234, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11184990132946818;  // std dev = 0.082, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.13006755917096016;  // std dev = 0.289, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( tweets(A, D) )
%   | | then return 0.22867809570918343;  // std dev = 0.002, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( tweets(A, E) )
%   | | | then return -0.03275089079298413;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.20968902606097886;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.22931681120319913;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.19462255745631465;  // std dev = 0.220, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return -0.08285931378567148;  // std dev = 0.003, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23194904616762202;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 7.382153645463027E-5;  // std dev = 0.656, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.07348780424587244;  // std dev = 1.107, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.14739589309097273;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.20303175761160597;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18163477252753893;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.21739552043930543;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.19603905545036002;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.13331869638628452;  // std dev = 0.963, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.07668710644499875;  // std dev = 0.032, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.027760000162310176;  // std dev = 0.834, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return -0.05982368156554174;  // std dev = 1.146, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.12566201448293748;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.1868909615950874;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.010291466436834444;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.0984861938213335;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.16707607243596698;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.17900506587334253;  // std dev = 0.027, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.07172186040672023;  // std dev = 0.002, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.41018041551968804;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12582906212718487;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1325364557389049;  // std dev = 0.995, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.031842845587930366;  // std dev = 1.327, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.13519335488071174;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06687083171296129;  // std dev = 0.002, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.14277841853780726;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26604783057052406;  // std dev = 0.104, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10695484141947;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, J) )
%   | | then return -0.013276994601568509;  // std dev = 0.377, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.013906003634615471;  // std dev = 0.243, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.479', 'seconds']
Refined model CLL: -0.102988


******************************************
Best model found
******************************************
Results 

CLL : -0.100142 

AUC ROC : 0.994284 

AUC PR : 0.365608 

Precision : 0.337719 

Recall : 0.987179 

F1 : 0.503268 

Total Learning Time : 8.171 

Total Inference Time : 9.609444618225098 

Total revision time: 24.713969465255737
Best scored revision CLL: -0.102988


Results 

CLL : -0.100142 

AUC ROC : 0.994284 

AUC PR : 0.365608 

Precision : 0.337719 

Recall : 0.987179 

F1 : 0.503268 

Total Learning Time : 24.74374293899536 

Total Inference Time : 9.609444618225098 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.075
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8346195233348062;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.16584124279182005;  // std dev = 0.462, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6960299887467757;  // std dev = 1.403, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.014638779193401653;  // std dev = 0.288, 152.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=20 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07932036041631864;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.748789696816298;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10927087332945752;  // std dev = 2.664, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5632462764710318;  // std dev = 1.062, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.7271120371076618;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.81794944986133;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3800795041166523;  // std dev = 0.940, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5669334437530081;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5669334437530081;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05384310286790622;  // std dev = 3.240, 186.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=16 */
%   | | | else return 0.04023262759541459;  // std dev = 2.543, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48385921811258203;  // std dev = 2.432, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11835341136163906;  // std dev = 0.007, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return -0.12827951693170195;  // std dev = 1.83e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15603747356487255;  // std dev = 0.161, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3188074147791398;  // std dev = 1.121, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.4378502676649345;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31400914782142586;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6434728063695411;  // std dev = 0.173, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09009853071514791;  // std dev = 1.948, 211.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=6 */
%   | | else return -0.10812532949280397;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.011906858284195585;  // std dev = 3.260, 241.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2596757005350501;  // std dev = 0.104, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.540440435439201;  // std dev = 0.682, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1129869652063549;  // std dev = 0.094, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.11880285153482045;  // std dev = 0.127, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28399980443375406;  // std dev = 1.464, 86.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | else return -0.08128088633453055;  // std dev = 1.876, 192.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02356515264668331;  // std dev = 0.652, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1672154256890594;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( follows(A, E) )
%   | | then return 0.2225226572181066;  // std dev = 0.033, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0429768449172482;  // std dev = 0.157, 177.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=20 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.013229790828982499;  // std dev = 1.044, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | | | else return 0.04274868869857458;  // std dev = 1.585, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14528600338165856;  // std dev = 0.224, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2570841789012401;  // std dev = 1.093, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08990213752976121;  // std dev = 0.041, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4762912777254213;  // std dev = 0.489, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10852392441066114;  // std dev = 0.136, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1526547984373497;  // std dev = 1.991, 78.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=74 */
%   | | else return 0.14295619314142424;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0829301560045787;  // std dev = 0.030, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08192088811489517;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -2.5304655529213697E-4;  // std dev = 0.440, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.03384088017389088;  // std dev = 1.092, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25661938800931916;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.059618080706329304;  // std dev = 1.210, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.147', 'seconds']
Parameter learned model CLL:-0.109746 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.0, 135, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.462, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.403, 2, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.288, 132, 20], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.102, 0, 4], 'false,false,false,false': [2.664, 30, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.062, 1, 53], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.94, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.24, 170, 16], 'false,false,false,false': [2.543, 38, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.432, 5, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.007, 127, 0], 'false,true,false,false': [1.83e-08, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.161, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.121, 1, 56], 'true,false': [0.123, 0, 4], 'false,true,true': [2.98e-08, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.173, 0, 19], 'false,false,true,false': [1.948, 205, 6], 'false,false,false': [2.95e-09, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.26, 169, 72], 'false,true': [0.104, 0, 12], 'false,false,true': [0.682, 0, 16], 'false,false,false,true': [0.094, 29, 0], 'false,false,false,false': [0.127, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.464, 2, 84], 'true,false': [1.876, 184, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.652, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.392, 2, 62], 'true,false,true': [0.033, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 157, 20], 'false,false,false,true': [1.044, 32, 8], 'false,false,false,false': [1.585, 23, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.224, 3, 60], 'false,true,true,true': [1.093, 1, 29], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.041, 151, 0], 'false,false,true': [0.489, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.136, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.991, 4, 74], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.03, 126, 0], 'true,false,false,true': [3.73e-09, 10, 0], 'true,false,false,false': [0.44, 7, 2], 'false,true': [1.092, 22, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.21, 14, 7]}]
{'': [0.22700550927170193, 0.21975425330812803], 'true': [0.022975778546712552, 0.01242039476286524], 'false': [0.2275000000000001, 0.21301775147929003], 'false,true': [-2.5376526277146434e-16, -1.2810265668751807e-17], 'true,false': [-5.921189464667501e-17, 0.07638888888888894], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.029810518802307066, 0.10909342047968631], 'false': [0.08285661361985161, 0.16374210944811876], 'false,false': [0.05246913580246909, 0.19104001506155782], 'false,false,false': [0.0025783336291846926, 0.17307235829213427], 'false,true': [nan, 0.08285661361985161], 'false,false,true': [nan, 0.05246913580246909]}
{'': [0.03776809542263178, 0.09033561036783092], 'false': [nan, 0.09033561036783086], 'false,false': [-5.921189464667501e-17, 0.07424618041328442], 'false,false,false': [0.05644449679801754, 0.13763039552319442], 'true': [0.020980282499293554, 0.1663670734259442], 'true,false': [0.003154506450459338, 0.1768720746771533], 'true,true': [0.020880588294570995, 0.0], 'false,false,true': [-6.344131569286608e-17, 0.0]}
{'': [0.05632907358106654, 0.00034724606634349797], 'false': [1.4910107175543588e-05, 0.0006995426679882897], 'false,false': [nan, 0.0006995426679882897], 'false,false,false': [nan, 0.0006995426679882897], 'false,true': [nan, 1.4910107175543588e-05], 'false,true,false': [3.9884580209665617e-07, 1.1895246692412391e-17]}
{'': [0.021724548671219833, 0.057907911530186734], 'false': [5.921189464667501e-17, 0.0544532870666154], 'false,false': [0.05741312577522806, 9.912705577010326e-18], 'false,false,true': [0.0015799517150376057, 0.017986795713715927], 'true': [0.02205247555913931, 0.0038096487655515654], 'false,true': [5.921189464667501e-17, nan]}
{'': [0.04408768635273569, 0.0762329884203424], 'false': [0.0009074200600958741, 0.08125390737666408], 'false,false': [0.029112006067926355, 0.0004538675188321168], 'true': [nan, 0.04408768635273593], 'true,false': [nan, 0.04408768635273569], 'false,false,false': [0.0003041186979661856, 0.0005971925685226749]}
{'': [0.048876987840855965, 0.020265068192032547], 'true': [0.024913691815968884, 0.018333646287945905], 'false': [nan, 0.020265068192032547], 'false,false': [nan, 0.020265068192032547], 'false,false,false': [nan, 0.020265068192032547]}
{'': [0.02947552967369045, 0.032892738716893855], 'false': [nan, 0.03289273871689389], 'false,false': [0.024590970999651844, 0.05149297304668405], 'false,false,false': [0.027256064488032784, 0.08100100053214526], 'true': [0.030286934973404643, 0.0005443638555320748], 'true,false': [0.0005443638555320748, nan]}
{'': [0.05030024711293622, 0.032618560232278646], 'false': [0.02325940509891102, 0.06479643849957259], 'false,false': [0.021734635848621797, 0.0004842068118097088], 'false,true': [0.03983233585880432, 1.1050988321299648e-05], 'false,true,true': [0.03983233585880432, nan], 'false,false,false': [nan, 0.0004842068118097088]}
{'': [0.030514591617337914, 0.055372869652918724], 'false': [0.04112730728980035, 0.06818704006574522], 'false,false': [0.0, 0.06966997310640663], 'false,false,false': [nan, 0.06966997310640663], 'true': [0.04558994759923046, 0.0017386214108201109], 'true,true': [0.050838603756934955, 1.726193722220098e-05], 'true,false': [6.985759101212141e-06, 0.01185294361444839], 'true,false,false': [1.3877787807814458e-18, 0.021512546045412105]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.825
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8434430527465715;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.1298750169962965;  // std dev = 0.109, 167.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.6867176335860531;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.722431919300339;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7224319193003391;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7338468449823914;  // std dev = 0.145, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7483807292902868;  // std dev = 0.165, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10571764399406354;  // std dev = 1.457, 116.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=3 */
%   | | | else return 0.009908625470460574;  // std dev = 2.608, 69.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009742249589903941;  // std dev = 1.549, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return 0.1693402369897182;  // std dev = 2.003, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5255908137668655;  // std dev = 1.384, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | | else return 0.2661426255331655;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.6090856308749026;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.643779415268478;  // std dev = 0.243, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5582402547597146;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7317095978625778;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.11986562364918277;  // std dev = 0.074, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.008525893733538664;  // std dev = 1.547, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return 0.1005207512895782;  // std dev = 2.061, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.34714209681554203;  // std dev = 1.652, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | | | else return 0.19562364053969966;  // std dev = 1.502, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.4424281320475703;  // std dev = 0.129, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4196657640294499;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5982225056371467;  // std dev = 0.243, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5048018507166966;  // std dev = 1.240, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10592874839362086;  // std dev = 0.052, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else return -0.10910112887641886;  // std dev = 0.032, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.16302980144722864;  // std dev = 0.256, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.35065118640474296;  // std dev = 0.151, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.03832094802944438;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.00834646330240881;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4290900882950324;  // std dev = 0.289, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.3196901922314082;  // std dev = 2.58e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.33215081984182215;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4521665078441124;  // std dev = 0.259, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08274549305123949;  // std dev = 1.915, 188.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=6 */
%   | | else return -0.09437175844632707;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A), follows(D, E) )
%   | | | then return 0.2734290865647079;  // std dev = 0.093, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.1994190558040877;  // std dev = 0.972, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.10275568479816932;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.04416918661851436;  // std dev = 0.127, 153.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=18 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.31345120069350285;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.14336388131824368;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.37265529592653224;  // std dev = 0.295, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6224501047926259;  // std dev = 0.334, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10916416143769729;  // std dev = 0.029, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2217309468460418;  // std dev = 0.047, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.10420177245553389;  // std dev = 0.940, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.04592836956902711;  // std dev = 0.809, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.25003696521276747;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return -0.04079265187105755;  // std dev = 1.127, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2526664234832376;  // std dev = 0.093, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then return -0.05245230394897714;  // std dev = 0.112, 174.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016376085434549843;  // std dev = 0.958, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0.01710519950793686;  // std dev = 1.438, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.11220254736248324;  // std dev = 1.854, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | | | else return 0.25329685155436593;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18940678646744566;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.28560456729189354;  // std dev = 0.086, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2398833798127996;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06658909110447618;  // std dev = 0.731, 99.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=3 */
%   | | | else return -0.012191693342184187;  // std dev = 1.266, 61.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.008466073641352745;  // std dev = 0.956, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return 0.043389779660528996;  // std dev = 1.398, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.1729869360272582;  // std dev = 0.012, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.25292870786907995;  // std dev = 0.996, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.20048084943428052;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20010286503568112;  // std dev = 0.068, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.24943876538381654;  // std dev = 0.091, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.07919904351871915;  // std dev = 0.006, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3379456871701344;  // std dev = 0.083, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5170059623970796;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11889764801768804;  // std dev = 0.035, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1821853210499818;  // std dev = 0.057, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else return 0.12730638585767762;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06865671122485481;  // std dev = 0.042, 153.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.0982118165939005;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.025942917979653608;  // std dev = 0.509, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.06279123801601899;  // std dev = 0.500, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1136894549261187;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.022752648254217522;  // std dev = 0.527, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.01615003862138841;  // std dev = 0.945, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.192', 'seconds']
Refined model CLL: -0.105579


******************************************
Best model found
******************************************
Results 

CLL : -0.104237 

AUC ROC : 0.993705 

AUC PR : 0.3159 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 8.825 

Total Inference Time : 9.879833221435547 

Total revision time: 27.59047403335571
Best scored revision CLL: -0.105579


Results 

CLL : -0.104237 

AUC ROC : 0.993705 

AUC PR : 0.3159 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 27.620247507095335 

Total Inference Time : 9.879833221435547 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.436
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6837571832981221;  // std dev = 1.893, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.035407461699183636;  // std dev = 0.265, 205.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0903077909499258;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7486990275884147;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1078796230563231;  // std dev = 3.237, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5871014254710504;  // std dev = 0.376, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7339275551292199;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8185625777634594;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5879547322892604;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5733364758155973;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5733364758155973;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.034185422136347336;  // std dev = 3.650, 196.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=21 */
%   | | | else return 0.007417116773121852;  // std dev = 2.855, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5238066218114675;  // std dev = 1.604, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11904161424290063;  // std dev = 0.048, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | | else return -0.12263657189962868;  // std dev = 0.007, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15970880161221118;  // std dev = 0.147, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2762073858436503;  // std dev = 1.896, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.4060228750684081;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3096692499354049;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6308885565558982;  // std dev = 0.200, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.082621664190185;  // std dev = 2.307, 238.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=9 */
%   | | else return -0.10963480702390702;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01926295702411413;  // std dev = 3.549, 285.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25616301885733617;  // std dev = 0.107, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4959822592755348;  // std dev = 1.105, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11988708934214748;  // std dev = 0.100, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.1154329729204248;  // std dev = 0.132, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26853434307111196;  // std dev = 1.935, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07296949995625644;  // std dev = 2.040, 227.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005933883912945005;  // std dev = 0.699, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18764550258648535;  // std dev = 0.995, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22329448494690957;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04662919663404958;  // std dev = 0.143, 217.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0294890488735117;  // std dev = 1.650, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
%   | | | else return 0.04473256520406274;  // std dev = 1.877, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1523539219781271;  // std dev = 0.201, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22377939787650178;  // std dev = 1.536, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09032414312507556;  // std dev = 0.032, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4566679698797091;  // std dev = 0.625, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10296006206452099;  // std dev = 0.124, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1838916960041264;  // std dev = 1.315, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.04602280153095554;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0835784991901417;  // std dev = 0.017, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07978354369181734;  // std dev = 1.29e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.050486785566530884;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.025529147826305765;  // std dev = 1.561, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22182264996981638;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011403391628527102;  // std dev = 1.492, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.805', 'seconds']
Parameter learned model CLL:-0.108912 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 161, 0], 'true,false,false': [0.287, 20, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.463, 20, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.893, 4, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 183, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.101, 0, 4], 'false,false,false,false': [3.237, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.376, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.138, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.65, 175, 21], 'false,false,false,false': [2.855, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.604, 0, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.048, 180, 0], 'false,true,false,false': [0.007, 51, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.896, 4, 73], 'true,false': [0.14, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.2, 0, 23], 'false,false,true,false': [2.307, 229, 9], 'false,false,false': [0.0, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.549, 194, 91], 'false,true': [0.107, 0, 13], 'false,false,true': [1.105, 1, 22], 'false,false,false,true': [0.1, 27, 0], 'false,false,false,false': [0.132, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.935, 3, 107], 'true,false': [2.04, 216, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.699, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 80], 'true,false,true': [0.036, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 195, 22], 'false,false,false,true': [1.65, 60, 13], 'false,false,false,false': [1.877, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.201, 3, 77], 'false,true,true,true': [1.536, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.032, 204, 0], 'false,false,true': [0.625, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.124, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.315, 1, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.017, 178, 0], 'true,false,false,true': [1.29e-08, 25, 0], 'true,false,false,false': [0.498, 20, 2], 'false,true': [1.561, 29, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.492, 24, 8]}]
{'': [0.23097502972651854, 0.22222222222222235], 'true': [0.03598567560485849, 0.01080951954373061], 'false': [0.22837370242214483, 0.2140309155766945], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.5170749404815803e-16, 0.0826446280991736], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.04168539272860297, 0.0997008514147061], 'false': [0.07008106740000579, 0.15813898887202393], 'false,false': [0.0433884297520661, 0.18234396807920075], 'false,false,false': [0.0025624097825737158, 0.16905492924795515], 'false,true': [nan, 0.07008106740000579], 'false,false,true': [nan, 0.0433884297520661]}
{'': [0.0037737678218367956, 0.09562937716258162], 'false': [nan, 0.0956293771625817], 'false,false': [-1.0449157878825003e-16, 0.08048255286976211], 'false,false,false': [0.06798857369299108, 0.11322815270424266], 'true': [0.0022919447828390546, 0.016031049438188782], 'true,false': [0.003127807099685853, 0.00475601114268942], 'true,true': [0.0020210542828498846, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.020427663464423016, 0.000293641373209788], 'false': [1.2541014575102902e-05, 0.0005271596799067047], 'false,false': [nan, 0.0005271596799067047], 'false,false,false': [nan, 0.0005271596799067047], 'false,true': [nan, 1.2541014575102902e-05], 'false,true,false': [1.2999842557122794e-05, 8.511900969120378e-07]}
{'': [0.04542908655418965, 0.059089950551608886], 'false': [-9.143013143971877e-17, 0.056214300119930505], 'false,false': [0.061462103404822936, -9.912705577010326e-18], 'false,false,true': [0.0017461223877241448, 0.02237003602754546], 'true': [0.04670218987554616, 0.004901986930606922], 'false,true': [-9.143013143971877e-17, nan]}
{'': [0.044203113031677156, 0.07946982346046437], 'false': [0.0008753812018435375, 0.08473615326127847], 'false,false': [0.053091460704257264, 0.0004079671251938121], 'true': [nan, 0.044203113031676566], 'true,false': [nan, 0.044203113031677156], 'false,false,false': [0.00037206515179615755, 0.00042373257737398517]}
{'': [0.04910522535881028, 0.01746541460629146], 'true': [0.03403283219306008, 0.018341561661728074], 'false': [nan, 0.01746541460629146], 'false,false': [nan, 0.01746541460629146], 'false,false,false': [nan, 0.01746541460629146]}
{'': [0.011972987673864512, 0.03406562310656977], 'false': [nan, 0.03406562310656953], 'false,false': [0.020559739425382417, 0.06120399175608314], 'false,false,false': [0.03727284376187127, 0.1136911978840215], 'true': [0.012222138536421807, 0.0006421506871620991], 'true,false': [0.0006421506871620991, nan]}
{'': [0.04048018955271655, 0.033657288906586695], 'false': [0.022003991582365063, 0.07265930709195814], 'false,false': [0.0229422945500153, 0.00038342197768514026], 'false,true': [0.06943204162641926, 4.883079347005189e-06], 'false,true,true': [0.06943204162641926, nan], 'false,false,false': [nan, 0.00038342197768514026]}
{'': [0.022940675198048658, 0.06404310857176243], 'false': [0.05939941538426446, 0.06877332901159972], 'false,false': [0.0, 0.06958079056500316], 'false,false,false': [nan, 0.06958079056500316], 'true': [0.026685040419526712, 0.0011982088460722098], 'true,true': [0.018191417415019638, 0.09017689661939943], 'true,false': [1.5533554341758048e-06, 0.005487714730819311], 'true,false,false': [6.661338147750939e-18, 0.011267211624972441]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.968
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.13246139353898603;  // std dev = 0.096, 213.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.6799463038288865;  // std dev = 0.201, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | else if ( follows(A, F), follows(C, F) )
%   | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6285643213018633;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.6925542743426769;  // std dev = 0.203, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.126478391297904;  // std dev = 5.96e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.7353787942131408;  // std dev = 0.032, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.25007449513354013;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.202334239218108;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5367233980548571;  // std dev = 1.397, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.42981823246613365;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5726753753232765;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6809968618706619;  // std dev = 0.251, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5740165063893604;  // std dev = 0.012, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5726753753232766;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11315217772398255;  // std dev = 7.88e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07201861142987609;  // std dev = 1.916, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.19325073309190557;  // std dev = 1.935, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, D) )
%   | | | then return 0.4171960883797582;  // std dev = 1.776, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | | | else return 0.09756031253450899;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.09914988576347072;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0.4395651929958182;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6501634979751056;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7468988036380139;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10228478410555077;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.10228478410555066;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.1544901127424898;  // std dev = 0.265, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | | then return 0.2870734096171721;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.34887602725311617;  // std dev = 0.122, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.4979730120066474;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18217735169314206;  // std dev = 0.794, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.3320439574327466;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3497676393824214;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.368430603593939;  // std dev = 0.249, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07120642986962371;  // std dev = 1.961, 198.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=9 */
%   | | else return -0.09326741738800236;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.256875504361413;  // std dev = 0.118, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return -0.08741748598671291;  // std dev = 5.19e-09, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.26326420622961993;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.02863533895940244;  // std dev = 0.870, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.039364641560315966;  // std dev = 0.122, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27525634786184183;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.0564261223586135;  // std dev = 1.186, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.46686065647934105;  // std dev = 0.494, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11455120413895775;  // std dev = 0.041, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.22204975010739472;  // std dev = 0.009, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return -0.11172669983459238;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24734052632043463;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.23089497676599252;  // std dev = 0.029, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.08125259086440723;  // std dev = 0.049, 212.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30947710902474623;  // std dev = 0.210, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10688139647128733;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0015628821150218992;  // std dev = 0.468, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.004834153744451501;  // std dev = 1.422, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.14545241728564237;  // std dev = 1.389, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.18524679384115578;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.18394094714082018;  // std dev = 0.023, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2855572537551375;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04550378766238113;  // std dev = 0.090, 209.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.17037339654734956;  // std dev = 0.992, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09213119793560419;  // std dev = 0.077, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04016651340662507;  // std dev = 0.423, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.03979833150234174;  // std dev = 1.419, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.16830967586940376;  // std dev = 0.011, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.11481649695266954;  // std dev = 0.995, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.08518262856780705;  // std dev = 0.868, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.272234592744667;  // std dev = 0.266, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.17364561830962283;  // std dev = 0.025, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07205925199970654;  // std dev = 0.002, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19697151870519752;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.40483732596159716;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10917825339685905;  // std dev = 0.045, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12718024345491163;  // std dev = 0.994, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.04135748982596725;  // std dev = 1.637, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return 0.15760026637522914;  // std dev = 0.043, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.06376369176244916;  // std dev = 0.035, 204.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.145380966728048;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.01635431541924261;  // std dev = 0.112, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.1477539737328749;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.022736033373775458;  // std dev = 0.418, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.02811393011766162;  // std dev = 1.209, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.283', 'seconds']
Refined model CLL: -0.100308


******************************************
Best model found
******************************************
Results 

CLL : -0.096647 

AUC ROC : 0.995245 

AUC PR : 0.420802 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 12.968 

Total Inference Time : 13.763158798217773 

Total revision time: 37.28133078002929
Best scored revision CLL: -0.100308


Results 

CLL : -0.096647 

AUC ROC : 0.995245 

AUC PR : 0.420802 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 37.31110425376892 

Total Inference Time : 13.763158798217773 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.201
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7294533872440255;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02999136615750272;  // std dev = 0.330, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14358238530683928;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.135382411994664;  // std dev = 2.476, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5895745856648917;  // std dev = 0.206, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.021744616018669227;  // std dev = 2.284, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
%   | | | else return 0.06180994686114943;  // std dev = 2.231, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5393014881974496;  // std dev = 1.566, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1272194873570108;  // std dev = 0.046, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.13204261102079826;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17450574293011412;  // std dev = 0.117, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28665370734719975;  // std dev = 0.523, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6189961210955324;  // std dev = 0.173, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10871769630301627;  // std dev = 0.828, 55.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=1 */
%   | | else return 0.08031099030653409;  // std dev = 0.335, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037602557701445785;  // std dev = 1.570, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return -0.5687869889653995;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5117515064100011;  // std dev = 0.532, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1281768937476309;  // std dev = 0.113, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.131229719682792;  // std dev = 0.124, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31252177492535044;  // std dev = 0.508, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.09454666192166715;  // std dev = 0.716, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09280304678576096;  // std dev = 0.985, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.02809418624441999;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.018194052725053287;  // std dev = 0.175, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.011046368232186627;  // std dev = 0.755, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.1944466743284428;  // std dev = 1.021, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1881066046968513;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.36429752824793865;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10021068538750245;  // std dev = 0.071, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37508636595971906;  // std dev = 0.356, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11729098875089895;  // std dev = 0.127, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20674279277603444;  // std dev = 0.281, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, C) )
%   | | then return -0.09162318150797638;  // std dev = 0.008, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0963731971555714;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08450183251808067;  // std dev = 0.045, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return 0.011852202587907057;  // std dev = 0.587, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.032223440088632246;  // std dev = 0.973, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.930', 'seconds']
Parameter learned model CLL:-0.116987 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.975, 1, 19], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false': [0.0, 9, 0], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 8, 0], 'false,false': [0.478, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 11], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.33, 36, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.136, 8, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.476, 23, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.206, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.284, 40, 9], 'false,false,false,false': [2.231, 23, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.566, 2, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.046, 37, 0], 'false,true,false,false': [0.024, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.117, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true,true': [0.523, 1, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.173, 0, 11], 'false,false,true,false': [0.828, 54, 1], 'false,false,false': [0.335, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.57, 37, 19], 'false,true': [0.0, 1, 0], 'false,false,true': [0.532, 0, 12], 'false,false,false,true': [0.113, 25, 0], 'false,false,false,false': [0.124, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.508, 0, 26], 'true,false': [0.716, 44, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.985, 8, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.301, 2, 11], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.175, 35, 8], 'false,false,false,true': [0.755, 13, 6], 'false,false,false,false': [1.021, 5, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.053, 0, 15], 'false,true,true,true': [0.008, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.071, 45, 0], 'false,false,true': [0.356, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.127, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.281, 0, 19], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.008, 48, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.045, 6, 0], 'false,true': [0.587, 11, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.973, 10, 6]}]
{'': [0.21253902185223675, 0.23725286160249692], 'false': [0.24489795918367352, 0.2283737024221454], 'false,true': [-1.4802973661668753e-16, -6.938893903907228e-18], 'true': [0.047499999999999785, 4.7580986769649563e-17], 'true,false': [3.027880976250427e-17, -9.25185853854297e-18], 'false,true,true': [0.0, 0.0]}
{'': [-8.074349270001139e-17, 0.14201069021120727], 'false': [0.10872158198720974, 0.17278374733780644], 'false,false': [0.0023028450073936876, 0.1936006402487207], 'false,false,false': [0.0, 0.18583902401165442], 'false,true': [nan, 0.10872158198720974], 'false,false,true': [nan, 0.0023028450073936876]}
{'': [0.00296125070124346, 0.12942387431203675], 'false': [nan, 0.12942387431203684], 'false,false': [nan, 0.12942387431203656], 'false,false,false': [0.10644575246863482, 0.16595915721271112], 'true': [0.003260801405212318, 0.0], 'true,true': [0.003260801405212318, nan], 'true,false': [nan, 0.0]}
{'': [0.07433957598266874, 0.0006834897724561089], 'false': [6.227513336576104e-05, 0.0007581706194200547], 'false,false': [nan, 0.0007581706194200547], 'false,false,false': [nan, 0.0007581706194200547], 'false,true': [nan, 6.227513336576104e-05], 'false,true,false': [5.834447839329341e-05, 5.8505507627365506e-05]}
{'': [0.01711032776033619, 0.09022196825448253], 'false': [nan, 0.09022196825448266], 'false,false': [0.08439253513557798, 0.11213219030230091], 'false,false,true': [0.0027122729319446685, 0.012467354237510133], 'true': [0.01711032776033619, nan]}
{'': [0.04403326086443344, 0.08383519154358028], 'false': [0.0, 0.07893712495509135], 'false,false': [0.023572819012442164, 0.0007060643309400761], 'true': [nan, 0.044033260864433564], 'true,false': [nan, 0.04403326086443344], 'false,false,false': [0.000511811141690568, 0.0010239948049869014]}
{'': [0.04932985663146136, 0.08090151480632374], 'false': [nan, 0.08090151480632372], 'false,false': [nan, 0.08090151480632374], 'false,false,false': [nan, 0.08090151480632374], 'true': [0.009941196008798042, 0.011407150573639705]}
{'': [0.13017751479289943, 0.04557750268984864], 'true': [0.13017751479289943, nan], 'false': [nan, 0.04557750268984874], 'false,false': [0.03063940225939854, 0.06150493711490777], 'false,false,false': [0.02996319431299264, 0.09468353678571305]}
{'': [0.0027835284711136645, 0.03820527356161117], 'false': [0.0224980882738438, 0.059698584585601025], 'false,false': [0.012668860181420726, 0.0008526368272804286], 'false,true': [1.1868923793586136e-05, 0.00011179432034595803], 'false,false,false': [nan, 0.0008526368272804286], 'false,true,true': [1.1868923793586136e-05, nan]}
{'': [0.0175546981453611, 0.03925001976285114], 'false': [0.020285342975747488, 0.059186207503867376], 'false,false': [nan, 0.059186207503867376], 'false,false,false': [nan, 0.059186207503867376], 'true': [0.00414120025237579, 4.24421248910054e-05], 'true,true': [0.00414120025237579, nan], 'true,false': [1.4428376742085802e-06, 0.00023457923204167895], 'true,false,false': [0.0, 0.0003345936673936206]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.637
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.02978559125349425;  // std dev = 0.332, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | else return -0.02846368608361706;  // std dev = 0.274, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return -0.12544463852839138;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.14225008331790565;  // std dev = 2.359, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5796827751747018;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return -0.04845299899409268;  // std dev = 1.172, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.25934802456059336;  // std dev = 1.302, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.11971219466793327;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7474163410421294;  // std dev = 0.105, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.16971984973395876;  // std dev = 0.127, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.5232224540829028;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.411612075971985;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.49992629752535456;  // std dev = 0.165, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then return 0.7117056559329376;  // std dev = 0.069, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5408506746503811;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6016502223183772;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.12264495817360713;  // std dev = 0.016, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.12246185493828365;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.1870458662110988;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.383969730515777;  // std dev = 0.089, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.333755262192349;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( tweets(D, E), follows(A, F) )
%   | | | then return -0.06652975557163009;  // std dev = 0.685, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return -0.1433687839265192;  // std dev = 0.436, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.5398873750988085;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12086343615964304;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(A, J), follows(H, J) )
%   | | | then return -0.1098980698207447;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05347057553304994;  // std dev = 0.566, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.05484259795973299;  // std dev = 1.195, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return -0.018784590244814617;  // std dev = 1.129, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2492394907478273;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.42769480844653274;  // std dev = 0.213, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10563510079587246;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.160282129546655;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.30257402752971657;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4442067935205975;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.13158395612952994;  // std dev = 0.129, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.11002978504815862;  // std dev = 0.111, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.20555796692595643;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.235093207339029;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.05431185709075646;  // std dev = 0.725, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | | else return -0.0971728708258077;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.3597004925400054;  // std dev = 0.233, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08580947722219291;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then return -0.009795131601959299;  // std dev = 0.166, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05270394850037008;  // std dev = 0.818, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.0773687123425777;  // std dev = 0.776, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.17400999709080667;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1959125363470739;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.3130393161267518;  // std dev = 0.266, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3098390872861608;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.0898304312239612;  // std dev = 0.010, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.36559658422738694;  // std dev = 0.130, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.09699654903722066;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.1570419658465019;  // std dev = 1.29e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.20066366450864398;  // std dev = 0.342, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15039838021342766;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.16716028326396903;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2751850574754539;  // std dev = 0.267, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.08488754849330817;  // std dev = 0.052, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.06199700553749284;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2555706718550766;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.30107767604103997;  // std dev = 0.094, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.11096080603788251;  // std dev = 0.109, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.2285597010015315;  // std dev = 0.159, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1321732775661606;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2144721490742193;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08035167329655804;  // std dev = 0.010, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.0591527455335593;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.17045697737790202;  // std dev = 0.101, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08892365897021764;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.22751680022903353;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1247271757333176;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.03714190698077123;  // std dev = 0.251, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.545', 'seconds']
Refined model CLL: -0.107514


******************************************
Best model found
******************************************
Results 

CLL : -0.116346 

AUC ROC : 0.992819 

AUC PR : 0.343325 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 5.637 

Total Inference Time : 5.268198251724243 

Total revision time: 14.75530260848999
Best scored revision CLL: -0.107514


Results 

CLL : -0.116346 

AUC ROC : 0.992819 

AUC PR : 0.343325 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 14.778922021865844 

Total Inference Time : 5.268198251724243 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.541
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.14185106490048774;  // std dev = 2.63e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.26723984419042146;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.724143121387306;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03941043499262467;  // std dev = 0.256, 79.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07234540353366031;  // std dev = 0.823, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7452075089279165;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12180377297733101;  // std dev = 3.106, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5714174498196934;  // std dev = 0.235, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5599511384589139;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5835787114402637;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5599511384589139;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5599511384589139;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014440200530541871;  // std dev = 2.913, 107.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=14 */
%   | | | else return -0.002585109479289272;  // std dev = 2.646, 52.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48984861478636477;  // std dev = 2.249, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11903177802168172;  // std dev = 0.022, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.12054546918453708;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1678051485891573;  // std dev = 0.209, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3185687382015943;  // std dev = 0.273, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.10813859339268202;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.637509472217113;  // std dev = 0.196, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09334950507427758;  // std dev = 1.362, 109.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=3 */
%   | | else return 0.030704512275936496;  // std dev = 0.303, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04061360943189243;  // std dev = 1.969, 103.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27534114909215224;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4730967977357396;  // std dev = 1.103, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12855834570284977;  // std dev = 0.122, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.11060215805344449;  // std dev = 0.055, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2196127229737755;  // std dev = 1.979, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | else return -0.0818264609041955;  // std dev = 1.187, 90.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026076653820601293;  // std dev = 1.410, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17040078934949462;  // std dev = 0.989, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.038980977076407346;  // std dev = 0.157, 69.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.0016247844479907556;  // std dev = 1.302, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.05514539351596961;  // std dev = 1.593, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15643122107731305;  // std dev = 0.143, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2089695780193464;  // std dev = 1.212, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09229036472525971;  // std dev = 0.049, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.42295878561761413;  // std dev = 0.524, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11935888553304154;  // std dev = 0.153, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14624383234932392;  // std dev = 1.425, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return 0.23375336928181262;  // std dev = 0.257, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08480074845760488;  // std dev = 0.003, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09177476633512414;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08181469467688937;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, G) )
%   | then return 0.051728477633091005;  // std dev = 0.819, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18112714967668297;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04746417553144158;  // std dev = 1.275, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.813', 'seconds']
Parameter learned model CLL:-0.111405 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 42], 'true,false,true': [5.37e-08, 50, 0], 'true,false,false': [2.63e-09, 23, 0], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 16, 0], 'false,false': [0.492, 13, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 71, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.823, 15, 1], 'false,false,false,true': [0.089, 0, 4], 'false,false,false,false': [3.106, 38, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.235, 0, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.12, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.913, 93, 14], 'false,false,false,false': [2.646, 43, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.249, 4, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.022, 59, 0], 'false,true,false,false': [0.005, 19, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.209, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.273, 0, 35], 'true,false': [0.0, 0, 0], 'false,true,true': [0.894, 1, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.196, 0, 15], 'false,false,true,false': [1.362, 106, 3], 'false,false,false': [0.303, 21, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.969, 66, 37], 'false,true': [0.035, 0, 4], 'false,false,true': [1.103, 1, 21], 'false,false,false,true': [0.122, 24, 0], 'false,false,false,false': [0.055, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.979, 4, 52], 'true,false': [1.187, 87, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.41, 18, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.989, 1, 33], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 61, 8], 'false,false,false,true': [1.302, 38, 12], 'false,false,false,false': [1.593, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.143, 1, 35], 'false,true,true,true': [1.212, 2, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.049, 81, 0], 'false,false,true': [0.524, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.153, 27, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.425, 2, 38], 'true,true,false': [0.257, 0, 4], 'true,false,true': [0.003, 72, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.03, 12, 0], 'false,true': [0.819, 14, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.275, 15, 8]}]
{'': [0.23097502972651718, 0.241566014160766], 'false': [0.2414266117969817, 0.24173553719008264], 'false,true': [-1.6148698540002277e-16, -6.938893903907228e-18], 'true': [0.022714981070850387, 6.995925908596876e-17], 'true,false': [5.773159728050814e-17, 9.654113257610057e-18], 'false,true,true': [-2.9605947323337506e-16, 0.0]}
{'': [-3.2297397080004555e-16, 0.12136968753227353], 'false': [0.06569172208004966, 0.16873318130665918], 'false,false': [0.04229293135538513, 0.19145398903828095], 'false,false,false': [0.001986731201513825, 0.17868637879905608], 'false,true': [nan, 0.06569172208004966], 'false,false,true': [nan, 0.04229293135538513]}
{'': [0.0020071228927924217, 0.10281640692382024], 'false': [nan, 0.1028164069238204], 'false,false': [0.0, 0.09741558552946704], 'false,false,false': [0.0792910417653539, 0.13461574043803048], 'true': [0.001840668147113019, 0.0029584596521763373], 'true,false': [0.0, 0.0035864221242226657], 'true,true': [0.001840668147113019, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.07664291865404825, 0.000902087311601186], 'false': [6.9871760901022226e-06, 0.0008389313761510847], 'false,false': [nan, 0.0008389313761510847], 'false,false,false': [nan, 0.0008389313761510847], 'false,true': [nan, 6.9871760901022226e-06], 'false,true,false': [8.316645898385362e-06, 1.1256892025278628e-06]}
{'': [0.0021349085408466934, 0.07874682235924167], 'false': [0.15999999999999998, 0.07566975394195778], 'false,true': [0.15999999999999998, nan], 'false,false': [0.07207686574721277, 0.09175481142426037], 'false,false,true': [0.002572950433414552, 0.017026119329614037], 'true': [0.0021349085408466934, nan]}
{'': [0.0376505345894637, 0.0855802440869451], 'false': [0.0003141793607293192, 0.08751478272664669], 'false,false': [0.05534861356782313, 0.00040612855544295683], 'true': [nan, 0.037650534589463706], 'true,false': [nan, 0.0376505345894637], 'false,false,false': [0.0006227108932234682, 9.775750324564526e-05]}
{'': [0.05794586077254343, 0.07952500531498945], 'false': [nan, 0.07952500531498939], 'false,false': [nan, 0.07952500531498945], 'false,false,false': [nan, 0.07952500531498945], 'true': [0.06991117206848368, 0.015648226350642818]}
{'': [0.028780030256797647, 0.04130675871702557], 'false': [nan, 0.041306758717025646], 'false,false': [0.02454149081489757, 0.054257302569057], 'false,false,false': [0.033929198135955074, 0.08749281190907962], 'true': [0.028780030256797647, nan]}
{'': [0.020349401330100745, 0.04572191786458763], 'false': [0.02647522715945911, 0.07564805789158865], 'false,false': [0.017171834489518284, 0.0008649299997398279], 'false,true': [0.11304901420279535, 2.9092252199944165e-05], 'false,true,true': [0.11304901420279535, nan], 'false,false,false': [nan, 0.0008649299997398279]}
{'': [0.027694877857712682, 0.04720884471041286], 'false': [0.026854007739540404, 0.06841093101342885], 'false,false': [0.0, 0.07064091137430423], 'false,false,false': [nan, 0.07064091137430424], 'true': [0.04827593223719206, 1.596154211303576e-05], 'true,true': [0.050757401683916584, 0.016499493175275236], 'true,false': [8.997875741866155e-08, 6.325197407320703e-05], 'true,false,false': [-5.046468293750712e-18, 7.378802414136192e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.767
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.74e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.30259337954395665;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.684673300674475;  // std dev = 0.193, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0.7254232309641754;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0526068755336202;  // std dev = 1.806, 58.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=5 */
%   | | | else return -0.03156485511290853;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08097526743684687;  // std dev = 0.822, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1747324423432288;  // std dev = 2.844, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5332976507795288;  // std dev = 0.195, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.5660249778306556;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.6241446438414372;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5564081552089728;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.73016576494604;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11922363341553405;  // std dev = 0.035, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03603030886201424;  // std dev = 2.197, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | else return 0.19393398603523068;  // std dev = 1.905, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.436156591350234;  // std dev = 0.024, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.41829710077282733;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5659453354681814;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6617141643751626;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7153251905798944;  // std dev = 0.114, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then return -0.10707619883079077;  // std dev = 0.004, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.15044842542567446;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.17176287042078123;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.24439366892242312;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.3357815698341964;  // std dev = 0.022, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.11666400771431147;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, E) )
%   | | | then return 0.15084947280502875;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.39508869710548705;  // std dev = 0.128, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.0975454781166805;  // std dev = 0.039, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.492146609403772;  // std dev = 0.184, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1308139190625269;  // std dev = 0.040, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.11984339855846894;  // std dev = 0.820, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.06589281900183723;  // std dev = 1.313, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2587860025664119;  // std dev = 0.045, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.27683411234311595;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05599019679058142;  // std dev = 0.148, 73.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=7 */
%   | | else return -0.059101483978931696;  // std dev = 0.112, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.24842803887641904;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.30664866360896803;  // std dev = 0.916, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.4631630693901433;  // std dev = 0.340, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10979654168043035;  // std dev = 0.081, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.12495621605406246;  // std dev = 0.275, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2144029793683334;  // std dev = 0.014, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(C, E) )
%   | | | then return 0.3096254779215451;  // std dev = 0.237, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4387536643530529;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(C, F) )
%   | | then return -0.09039268221221268;  // std dev = 0.010, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else return -0.15818103839501593;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.22298124599403288;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07787126258642353;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.11298874893307764;  // std dev = 0.522, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.06296258950987763;  // std dev = 0.243, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(C, E), follows(A, E) )
%   | | then if ( follows(E, D), follows(D, E) )
%   | | | then return 0.19474240441439442;  // std dev = 0.256, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.07236334026593916;  // std dev = 0.583, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(C, F) )
%   | | | then return 0.2630758029520078;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.33593903519172885;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08742357775712924;  // std dev = 0.017, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18697508922676206;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07271224604605023;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, I) )
%   | | then return 0.09254894821093325;  // std dev = 0.511, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.040178806565156454;  // std dev = 0.774, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.048860900686597354;  // std dev = 1.316, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.15875848305786738;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15336605537722384;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17730318533753445;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.10442191972197486;  // std dev = 0.886, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.174258103446926;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07138779964317261;  // std dev = 0.028, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.26747190223736894;  // std dev = 0.091, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.12007902785904029;  // std dev = 0.043, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11155273160404973;  // std dev = 0.166, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return 0.21949589965758406;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06692599290043401;  // std dev = 0.003, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13306467212329798;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 7.590333310421289E-4;  // std dev = 0.522, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.056077941877096575;  // std dev = 0.430, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1160229053048839;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.002596654625059659;  // std dev = 0.580, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.04207931044879075;  // std dev = 0.726, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.273', 'seconds']
Refined model CLL: -0.0994


******************************************
Best model found
******************************************
Results 

CLL : -0.100857 

AUC ROC : 0.992716 

AUC PR : 0.336571 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 15.767 

Total Inference Time : 15.893420219421387 

Total revision time: 37.47370019721985
Best scored revision CLL: -0.0994


Results 

CLL : -0.100857 

AUC ROC : 0.992716 

AUC PR : 0.336571 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 37.4973196105957 

Total Inference Time : 15.893420219421387 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.987
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.05613677918620208;  // std dev = 0.280, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.18314893509951236;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7081679669251087;  // std dev = 1.002, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.025756678490564896;  // std dev = 0.274, 111.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.011613513612159822;  // std dev = 1.749, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5719545760452863;  // std dev = 0.939, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.08838476928710771;  // std dev = 3.863, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5339424123639547;  // std dev = 1.437, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7303953457184852;  // std dev = 0.215, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.44949391877399814;  // std dev = 0.949, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5658485675511802;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5658485675511802;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012028121675481153;  // std dev = 3.620, 155.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=21 */
%   | | | else return 0.04128984474719102;  // std dev = 3.230, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5515513859298178;  // std dev = 1.968, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12394601019488811;  // std dev = 0.056, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | | else return -0.12989721280268934;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16177031867031746;  // std dev = 0.175, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28122327700478755;  // std dev = 1.577, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | else return 0.4665555327728308;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29891563445555885;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6298729587350188;  // std dev = 0.263, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.08938431674329812;  // std dev = 1.762, 142.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=5 */
%   | | else return 0.04024463739222579;  // std dev = 0.324, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04306253907808566;  // std dev = 2.342, 139.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=50 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2482557686639227;  // std dev = 0.114, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47720055889853336;  // std dev = 1.629, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11761745871410308;  // std dev = 0.110, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return -0.12850211917251983;  // std dev = 0.107, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28342099843796364;  // std dev = 1.298, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else return -0.08185949757448296;  // std dev = 1.645, 159.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006654966184600208;  // std dev = 1.790, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19098705085800424;  // std dev = 0.075, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.24375344344961547;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04915226319298261;  // std dev = 0.141, 124.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.011501117554483938;  // std dev = 1.720, 71.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=18 */
%   | | | else return 0.05229504344542177;  // std dev = 1.983, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16867058428148085;  // std dev = 0.147, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26756137340888086;  // std dev = 1.147, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09657464397581247;  // std dev = 0.077, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36646827729861603;  // std dev = 1.315, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11292091973321626;  // std dev = 0.181, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1858433817447852;  // std dev = 0.566, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.18444123816638053;  // std dev = 0.343, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.08518547512527276;  // std dev = 0.008, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10244020618721826;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.00219232828296722;  // std dev = 0.888, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.002204066593576955;  // std dev = 1.373, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22811965018359104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0538866781354433;  // std dev = 1.553, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.221', 'seconds']
Parameter learned model CLL:-0.114726 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 62], 'true,false,true': [8.69e-08, 103, 0], 'true,false,false': [0.28, 32, 3], 'false,true,true,true': [0.0, 0, 13], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [3.49e-08, 35, 0], 'false,false': [0.468, 27, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.002, 1, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.274, 98, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.749, 25, 4], 'false,false,false,true': [0.939, 1, 5], 'false,false,false,false': [3.863, 66, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.437, 2, 40], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.215, 0, 3], 'true,false,false': [0.949, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.62, 134, 21], 'false,false,false,false': [3.23, 54, 14]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.968, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.056, 116, 0], 'false,true,false,false': [0.022, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.175, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.577, 3, 47], 'true,false': [0.0, 0, 1], 'false,true,true': [1.83e-08, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.263, 0, 22], 'false,false,true,false': [1.762, 137, 5], 'false,false,false': [0.324, 29, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.342, 89, 50], 'false,true': [0.114, 0, 11], 'false,false,true': [1.629, 2, 32], 'false,false,false,true': [0.11, 46, 0], 'false,false,false,false': [0.107, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.298, 1, 72], 'true,false': [1.645, 153, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.79, 45, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.075, 0, 47], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 111, 13], 'false,false,false,true': [1.72, 53, 18], 'false,false,false,false': [1.983, 33, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.147, 1, 48], 'false,true,true,true': [1.147, 1, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.077, 124, 0], 'false,false,true': [1.315, 1, 23], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.181, 59, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.566, 0, 52], 'true,true,false': [0.343, 0, 10], 'true,false,true': [0.008, 67, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.888, 14, 3], 'false,true': [1.373, 32, 15], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.553, 23, 12]}]
{'': [0.21823840799921598, 0.21432098765432223], 'true': [0.030273437499999334, 0.02126654064272202], 'false': [0.2099999999999995, 0.21937499999999951], 'false,true': [-2.3684757858670006e-16, 3.489272363107635e-17], 'true,false': [7.329627735389383e-17, 0.07836734693877535], 'false,true,true': [-2.7328566760003855e-16, 0.0]}
{'': [0.020494410136317903, 0.12612420058434035], 'false': [0.07491488914594793, 0.16580973808960758], 'false,false': [0.10548321658237375, 0.18023990797669673], 'false,false,false': [0.14710469612036323, 0.16770491566229778], 'false,false,true': [nan, 0.10548321658237375], 'false,true': [nan, 0.07491488914594793]}
{'': [0.06219674600875372, 0.11455170132335009], 'false': [nan, 0.11455170132335026], 'false,false': [4.4408920985006264e-17, 0.10615141972040433], 'false,false,false': [0.08456089679667278, 0.15338917060610927], 'true': [0.04919344226024366, 0.12280934897647693], 'true,false': [0.015448058290354375, 0.15018812376638854], 'true,true': [0.04919344226024366, nan], 'false,false,true': [3.700743415417188e-17, 0.0]}
{'': [0.04078904248139322, 0.0004518672540839242], 'false': [3.0830618566782486e-05, 0.0006254882550224107], 'false,false': [nan, 0.0006254882550224107], 'false,false,false': [nan, 0.0006254882550224107], 'false,true': [nan, 3.083061856677925e-05], 'false,true,false': [2.6638638096338505e-05, 2.3998362201508145e-05]}
{'': [0.049445241255197996, 0.08404161972686514], 'false': [3.3306690738754695e-17, 0.08435397736596863], 'false,false': [0.07944961284832933, 0.10519597504960909], 'false,false,true': [0.0031351654083101687, 0.02187491316889693], 'true': [0.049760655001320125, 0.0], 'false,true': [3.3306690738754695e-17, nan]}
{'': [0.03946096402001436, 0.09060202297687146], 'false': [0.00117723193401311, 0.09540786864310645], 'false,false': [0.0780678970476959, 0.0003037810841427797], 'true': [nan, 0.03946096402001465], 'true,false': [nan, 0.03946096402001436], 'false,false,false': [0.00026264792160538854, 0.000287713426507627]}
{'': [0.047705832818481446, 0.05340509468689266], 'false': [nan, 0.05340509468689276], 'false,false': [nan, 0.05340509468689266], 'false,false,false': [nan, 0.05340509468689266], 'true': [0.023077191426782453, 0.01702893271075268]}
{'': [0.0001735385944408585, 0.040392996785939515], 'false': [nan, 0.04039299678593987], 'false,false': [0.019977338261791686, 0.058816482875414126], 'false,false,false': [0.041679480389811695, 0.08370298792343009], 'true': [0.00011922481772897607, 0.0], 'true,false': [0.0, nan]}
{'': [0.021565462769932722, 0.04261927672813944], 'false': [0.026483136167810513, 0.06847254764352714], 'false,false': [0.07207428410335824, 0.0005551928984114912], 'false,true': [0.057155418116206606, 4.7759991451150834e-05], 'false,true,true': [0.057155418116206606, nan], 'false,false,false': [nan, 0.0005551928984114912]}
{'': [0.024033387854829228, 0.05303997267240976], 'false': [0.04012856605930661, 0.06779425422692958], 'false,false': [0.0, 0.06888797934832949], 'false,false,false': [nan, 0.06888797934832948], 'true': [0.007068679738835838, 0.008929597742945557], 'true,false': [9.728465052817044e-07, 0.025281430460194997], 'true,false,false': [0.0, 0.0464196207213858], 'true,true': [0.006171445487243841, 0.011732648938340718]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.617
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8373156017661788;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11705767647073559;  // std dev = 0.155, 121.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.2581489350995123;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7267454239706863;  // std dev = 0.147, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5900195683705347;  // std dev = 0.946, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7531684369973856;  // std dev = 0.138, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.12819003302032425;  // std dev = 4.94e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03453715052479665;  // std dev = 2.025, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
%   | | | else return 0.17337745662623558;  // std dev = 1.880, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.5587126319436563;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.4476015208325449;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.4042630917139943;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.6312219697409462;  // std dev = 0.099, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5587126319436561;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.10738401227184763;  // std dev = 0.676, 95.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=1 */
%   | | | else return 0.009188033696706753;  // std dev = 2.144, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03686289908389236;  // std dev = 2.414, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | | else return 0.11445844643631103;  // std dev = 2.215, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(D, F) )
%   | | | then return 0.39896559499964285;  // std dev = 0.995, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.553749655406809;  // std dev = 0.171, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2607556959652932;  // std dev = 0.956, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4199999353443057;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5256494979421732;  // std dev = 1.252, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.5901325776049007;  // std dev = 0.926, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10839264151021664;  // std dev = 0.058, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else return -0.11137068444244445;  // std dev = 0.027, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.13647261663394844;  // std dev = 0.255, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.2914223127874528;  // std dev = 0.984, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.33607478148001;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.38712729734203266;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5013351536646039;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3223979333187343;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0888654390937396;  // std dev = 0.552, 101.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=1 */
%   | | | else return -0.010760963273572958;  // std dev = 1.720, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03177678226979533;  // std dev = 1.442, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | | else return 0.09684000835113393;  // std dev = 2.129, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2702062275439989;  // std dev = 0.009, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3036053821713732;  // std dev = 1.118, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.09251362395742536;  // std dev = 0.068, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return -0.063023267039234;  // std dev = 0.133, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2838071699969143;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1313224103141597;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3341887876552739;  // std dev = 0.966, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.5569551013592596;  // std dev = 0.250, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.12228556032476136;  // std dev = 0.034, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then return 0.2189492563611938;  // std dev = 0.007, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.20261892279061905;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.24238240202032169;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then return 0.03288602748653753;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.23988843839468785;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3920657489335844;  // std dev = 0.234, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08498345309178486;  // std dev = 0.075, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.010922019164951266;  // std dev = 1.510, 54.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=13 */
%   | | | else return 0.04787705353886696;  // std dev = 1.413, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.183976863067315;  // std dev = 0.007, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return 0.2646021830476526;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.0778036517431829;  // std dev = 0.801, 75.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=1 */
%   | | | else return -0.0066188463908775285;  // std dev = 1.344, 73.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=16 */
%   | | else return -0.20767363886975926;  // std dev = 0.544, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.31736131263021733;  // std dev = 0.407, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.10727990575606584;  // std dev = 0.070, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.09594825444556321;  // std dev = 0.631, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.04415025643072307;  // std dev = 1.205, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15892995658055922;  // std dev = 0.011, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.19037967939934458;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.2849568547572111;  // std dev = 0.200, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1518823362525293;  // std dev = 0.714, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.07666772324425883;  // std dev = 0.010, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2470258425855885;  // std dev = 0.941, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.41330389090240954;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.09142581413920443;  // std dev = 0.054, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.16855130678822242;  // std dev = 0.177, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12171161330958814;  // std dev = 0.139, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.19347375886371726;  // std dev = 0.059, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.062375585660548245;  // std dev = 0.055, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.10540646159155909;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.036765222356331;  // std dev = 1.026, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.016596318154070047;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.31001197234600114;  // std dev = 0.661, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.03608142372420854;  // std dev = 0.881, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.033629917807310256;  // std dev = 0.963, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.402', 'seconds']
Refined model CLL: -0.103567


******************************************
Best model found
******************************************
Results 

CLL : -0.102594 

AUC ROC : 0.993013 

AUC PR : 0.352995 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 8.617 

Total Inference Time : 11.461321592330933 

Total revision time: 29.000591663360595
Best scored revision CLL: -0.103567


Results 

CLL : -0.102594 

AUC ROC : 0.993013 

AUC PR : 0.352995 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 29.02421107673645 

Total Inference Time : 11.461321592330933 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.333
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8220043567862592;  // std dev = 1.700, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.04429008929073166;  // std dev = 0.297, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.2217852987358757;  // std dev = 0.481, 55.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7155332493698141;  // std dev = 1.015, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.036129178815683644;  // std dev = 0.263, 151.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06049347523220553;  // std dev = 1.791, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7586635677411031;  // std dev = 0.118, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14098701861156765;  // std dev = 4.459, 106.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5622208427684373;  // std dev = 1.068, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7304276282919648;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3671232442131403;  // std dev = 1.305, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6033150859647478;  // std dev = 0.170, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5652415061196344;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018994459858700602;  // std dev = 4.118, 211.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=27 */
%   | | | else return 0.07354032829214766;  // std dev = 3.759, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5417902513545081;  // std dev = 2.510, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1220687237581503;  // std dev = 0.064, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return -0.13164281551512222;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17154625804539855;  // std dev = 0.301, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26825269049269723;  // std dev = 2.000, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | else return 0.4641961258517229;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2360875715115502;  // std dev = 0.966, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.4959129666796064;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6049899325019923;  // std dev = 0.962, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.09934488967324186;  // std dev = 1.781, 201.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=5 */
%   | | else return 0.02427198030206633;  // std dev = 0.325, 47.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03270788471329407;  // std dev = 2.781, 185.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26300507189073596;  // std dev = 0.156, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48320971794607104;  // std dev = 1.558, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13168232071776984;  // std dev = 0.225, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return -0.13417019776103248;  // std dev = 0.205, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2733937623761224;  // std dev = 1.911, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.08679508964028065;  // std dev = 1.652, 202.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016235979957177262;  // std dev = 1.996, 73.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17843503234564187;  // std dev = 0.995, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else if ( follows(A, E) )
%   | | then return 0.2505294481681755;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.045448920074120845;  // std dev = 0.144, 154.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.007611180870387774;  // std dev = 1.898, 94.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=23 */
%   | | | else return 0.08050651274589964;  // std dev = 2.141, 55.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18947618285665094;  // std dev = 0.065, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29657033894516716;  // std dev = 0.809, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09428512861451713;  // std dev = 0.108, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3873410999686559;  // std dev = 0.668, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12655286969928858;  // std dev = 0.268, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17329315457803698;  // std dev = 1.090, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | else return 0.17327114876801733;  // std dev = 0.353, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.08368114298102321;  // std dev = 0.030, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09627675716270145;  // std dev = 0.029, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.016920287106380928;  // std dev = 0.944, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.002468540077279799;  // std dev = 1.246, 75.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20033511153277017;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0033323104786605762;  // std dev = 1.806, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.036', 'seconds']
Parameter learned model CLL:-0.114257 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.7, 3, 80], 'true,false,true': [0.0, 138, 0], 'true,false,false': [0.297, 37, 4], 'false,true,true,true': [0.972, 1, 17], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.8e-08, 37, 0], 'false,false': [0.481, 35, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.015, 1, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 135, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 45, 4], 'false,false,false,true': [0.118, 0, 7], 'false,false,false,false': [4.459, 73, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.068, 1, 51], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.218, 0, 3], 'true,false,false': [1.305, 2, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.17, 0, 5], 'false,false,true,false': [0.0, 0, 11], 'false,false,false,true': [4.118, 184, 27], 'false,false,false,false': [3.759, 61, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.51, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 131, 0], 'false,true,false,false': [0.018, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.301, 88, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.0, 4, 60], 'true,false': [0.0, 0, 1], 'false,true,true': [0.966, 1, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.962, 1, 32], 'false,false,true,false': [1.781, 196, 5], 'false,false,false': [0.325, 37, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.781, 122, 63], 'false,true': [0.156, 0, 17], 'false,false,true': [1.558, 2, 44], 'false,false,false,true': [0.225, 75, 0], 'false,false,false,false': [0.205, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.911, 3, 97], 'true,false': [1.652, 196, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.996, 52, 21]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 62], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 138, 16], 'false,false,false,true': [1.898, 71, 23], 'false,false,false,false': [2.141, 34, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.065, 0, 61], 'false,true,true,true': [0.809, 0, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.108, 160, 0], 'false,false,true': [0.668, 0, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.268, 61, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.09, 1, 66], 'true,true,false': [0.353, 0, 14], 'true,false,true': [0.03, 122, 0], 'true,false,false,true': [0.029, 19, 0], 'true,false,false,false': [0.944, 21, 4], 'false,true': [1.246, 55, 20], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.806, 47, 18]}]
{'': [0.217819474389605, 0.2286788315451497], 'false': [0.22592152199762144, 0.23140495867768554], 'false,true': [0.04535147392290242, 3.900783600034334e-17], 'true': [0.034838147771809706, 0.021847008520333226], 'false,true,true': [0.05246913580246885, 1.4802973661668753e-16], 'true,false': [-7.079683055580708e-17, 0.08804283164782852]}
{'': [0.015835047927924416, 0.1265379937596472], 'false': [0.06911246735031863, 0.17021779858047137], 'false,false': [0.06544924142262809, 0.19826338901345295], 'false,false,false': [0.0019761589158966736, 0.18759150339427583], 'false,true': [nan, 0.06911246735031863], 'false,false,true': [nan, 0.06544924142262809]}
{'': [0.051495291576222235, 0.11867826909281882], 'false': [nan, 0.11867826909281869], 'false,false': [0.002123433811848874, 0.10815936070486855], 'false,false,false': [0.08035532043963625, 0.17439974819830495], 'true': [0.021954427163008584, 0.17067176021264366], 'true,false': [0.015840597835372467, 0.18928462879901053], 'true,true': [0.021954427163008584, nan], 'false,false,true': [0.005798389928888925, -1.2111523905001707e-16]}
{'': [0.04959080478998349, 0.0009276163353035609], 'false': [4.081027006058297e-05, 0.001030115091284907], 'false,false': [nan, 0.001030115091284907], 'false,false,false': [nan, 0.001030115091284907], 'false,true': [nan, 4.0810270060580124e-05], 'false,true,false': [3.1403693043047285e-05, 1.312712133002325e-05]}
{'': [0.0621013556595829, 0.08428931658255003], 'false': [0.05866211311092703, 0.0823501811637033], 'false,false': [0.077602982059939, 0.10549394938477781], 'false,false,true': [0.028017099711162768, 0.015782884241579656], 'true': [0.06248101503622085, 0.0], 'false,true': [0.058357363652463703, 0.0]}
{'': [0.04179549131623905, 0.0838713882939369], 'false': [0.0014347286467214177, 0.08686513335317828], 'false,false': [0.05274629868229304, 0.000704080878046796], 'true': [nan, 0.04179549131623911], 'true,false': [nan, 0.04179549131623905], 'false,false,false': [0.0006772906755923103, 0.0007358143647850806]}
{'': [0.049856413650319106, 0.05458836038422385], 'false': [nan, 0.054588360384223766], 'false,false': [nan, 0.05458836038422385], 'false,false,false': [nan, 0.05458836038422385], 'true': [0.03651227891338142, 0.01350347752964303]}
{'': [0.015382903025964442, 0.03980145607688647], 'false': [nan, 0.03980145607688615], 'false,false': [0.0208119867720396, 0.05617797072705933], 'false,false,false': [0.03833454426950617, 0.08332172300512043], 'true': [0.01570877821367967, 8.015612145888251e-05], 'true,false': [8.015612145888251e-05, nan]}
{'': [0.004161594949769747, 0.03932900861959799], 'false': [0.023820147633501196, 0.0656793259847971], 'false,false': [0.01353158475146387, 0.001179001259797071], 'false,true': [0.021821867301089704, 7.35625872021195e-05], 'false,true,true': [0.021821867301089704, nan], 'false,false,false': [nan, 0.001179001259797071]}
{'': [0.022937444866682827, 0.03447686199767782], 'false': [0.02069953874115802, 0.04988486986836572], 'false,false': [0.0, 0.050181567484856866], 'false,false,false': [nan, 0.05018156748485695], 'true': [0.016210140576654167, 0.0059924745204116645], 'true,true': [0.017738952469621545, 0.008893683259753272], 'true,false': [7.243013060061358e-06, 0.02181192958020733], 'true,false,false': [4.472578185811903e-05, 0.03563565134294831]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.945
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.8040948810454575;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.11804154109096424;  // std dev = 0.152, 168.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25208832903890627;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7067245558218872;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return 0.7374082908760575;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12808011913566733;  // std dev = 1.01e-07, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.08347203853847689;  // std dev = 0.189, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.1576341665786182;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.09301965108930686;  // std dev = 1.186, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7372321343150519;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.11437487243488526;  // std dev = 4.518, 117.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.5380549089098857;  // std dev = 0.982, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.568843686597959;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5607050574860645;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6186812568310822;  // std dev = 0.102, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5647901077271955;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11089126542027927;  // std dev = 0.671, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   | | | else return -0.0018497329646023817;  // std dev = 2.487, 80.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1046176858109828;  // std dev = 3.552, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
%   | | | else return 0.19147154877725148;  // std dev = 2.547, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.38717065734105094;  // std dev = 1.393, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.0836801366883158;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.3325037287988714;  // std dev = 0.961, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5414324161458093;  // std dev = 0.647, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.3979384527019554;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5321871615328937;  // std dev = 0.128, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6656801857529154;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7878081853230547;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.1329691147662626;  // std dev = 0.038, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.339636943074872;  // std dev = 0.099, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.11874247877933466;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3521067210707956;  // std dev = 0.086, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.5074406586361841;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32833852070342673;  // std dev = 0.047, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08725640212548823;  // std dev = 0.652, 118.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=1 */
%   | | | else return -0.015011968000151229;  // std dev = 2.040, 85.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=13 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.040716057316404715;  // std dev = 1.909, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.16916489625142564;  // std dev = 2.718, 47.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.27040757722520725;  // std dev = 0.104, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.09778887056930581;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.42443365830798835;  // std dev = 0.229, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08945516531070902;  // std dev = 0.074, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.06670214898526015;  // std dev = 0.144, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.267833036153833;  // std dev = 0.051, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2878857731665935;  // std dev = 0.296, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5545167640456152;  // std dev = 0.384, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.1531105962198947;  // std dev = 0.047, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.21950085416375967;  // std dev = 0.085, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return 0.14686527957795886;  // std dev = 0.269, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07154563019376856;  // std dev = 0.060, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.31226220317301584;  // std dev = 1.217, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.0967117199332583;  // std dev = 0.064, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3599497206652694;  // std dev = 0.531, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.1591018958095672;  // std dev = 0.217, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.016799513444420197;  // std dev = 0.963, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.034377454688069076;  // std dev = 1.311, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.16335758526510943;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.17553394214145634;  // std dev = 0.068, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.30108602795587147;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(G, H) )
%   | | then return 0.04601191139950469;  // std dev = 0.878, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.18091357017550308;  // std dev = 0.088, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.06768476202434777;  // std dev = 1.187, 131.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=5 */
%   | | | else return -0.010241539620302356;  // std dev = 1.173, 54.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=9 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.01675331521681234;  // std dev = 1.420, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.04040966184944046;  // std dev = 1.924, 47.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.17110272713739438;  // std dev = 0.033, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( tweets(A, E) )
%   | | then return 0.11995497952559342;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1967091080301937;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.09629646390553977;  // std dev = 0.983, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.2954756669777744;  // std dev = 0.930, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.07587644302829383;  // std dev = 0.114, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3060423094333527;  // std dev = 0.084, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.38573430327734143;  // std dev = 0.146, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.1437798112899839;  // std dev = 0.037, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.09096499329044092;  // std dev = 0.221, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else return 0.20057354371523603;  // std dev = 0.096, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.06381720057108733;  // std dev = 0.067, 187.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1078578289128741;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.03594564610018761;  // std dev = 1.171, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return -0.002580722598044538;  // std dev = 0.998, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.16839252509589486;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.01496764482119084;  // std dev = 1.107, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | | | else return -0.017206167589502896;  // std dev = 1.268, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.468', 'seconds']
Refined model CLL: -0.112063


******************************************
Best model found
******************************************
Results 

CLL : -0.106013 

AUC ROC : 0.993071 

AUC PR : 0.349338 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 17.945 

Total Inference Time : 18.910609006881714 

Total revision time: 47.38927972602844
Best scored revision CLL: -0.112063


Results 

CLL : -0.106013 

AUC ROC : 0.993071 

AUC PR : 0.349338 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 47.412899139404296 

Total Inference Time : 18.910609006881714 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.621
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return -0.06777699082641366;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.16895974591032248;  // std dev = 0.463, 74.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284173469110135;  // std dev = 0.197, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.033624774205570154;  // std dev = 0.264, 176.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06631445006339902;  // std dev = 1.804, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6473085281388045;  // std dev = 0.872, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.10669168486402361;  // std dev = 5.008, 148.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5579932509365468;  // std dev = 1.071, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5162603438089054;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6117929028520652;  // std dev = 0.190, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5929904641722129;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5600761471153025;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021678131265370947;  // std dev = 4.608, 273.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=34 */
%   | | | else return 0.05966005384318592;  // std dev = 4.112, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5401798158632305;  // std dev = 2.518, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12102863059635625;  // std dev = 0.053, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | | else return -0.12921030984216414;  // std dev = 0.010, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1599955768812211;  // std dev = 0.254, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3083642299940962;  // std dev = 1.022, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.5207180016260267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29588478928000955;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5015473360303508;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6348156281155448;  // std dev = 0.353, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10155223193687708;  // std dev = 1.798, 247.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=5 */
%   | | else return 0.015721221609593692;  // std dev = 0.306, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028694173524889295;  // std dev = 3.046, 242.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1674559556841233;  // std dev = 1.389, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.501210777570207;  // std dev = 1.565, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12013430832067895;  // std dev = 0.162, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.1304269167906787;  // std dev = 0.188, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27485970327170267;  // std dev = 1.812, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08809699720797015;  // std dev = 1.708, 253.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0354427426791871;  // std dev = 2.296, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16606112247601093;  // std dev = 1.403, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2872623085056577;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04641321664790179;  // std dev = 0.141, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0060237698567356555;  // std dev = 2.011, 111.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=28 */
%   | | | else return 0.015749920597420936;  // std dev = 2.588, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16938251540711877;  // std dev = 0.102, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2887707014629014;  // std dev = 0.853, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0920161808630576;  // std dev = 0.097, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.35630157800535556;  // std dev = 1.482, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1175631903825818;  // std dev = 0.238, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1572711414783268;  // std dev = 1.618, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.1674850671147424;  // std dev = 0.360, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08290360557576579;  // std dev = 0.029, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10503351911511583;  // std dev = 0.261, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.0168640693629291;  // std dev = 0.987, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.014005074957182954;  // std dev = 1.313, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19188500019756294;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022916175973649255;  // std dev = 2.100, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.741', 'seconds']
Parameter learned model CLL:-0.110645 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 157, 0], 'true,false,false': [0.262, 50, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.71e-08, 45, 0], 'false,false': [0.463, 51, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.197, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 157, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.804, 49, 4], 'false,false,false,true': [0.872, 1, 8], 'false,false,false,false': [5.008, 108, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.071, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.775, 1, 3], 'true,false,false': [0.19, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false,true': [4.608, 239, 34], 'false,false,false,false': [4.112, 80, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.518, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.053, 180, 0], 'false,true,false,false': [0.01, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.254, 93, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.022, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.353, 0, 39], 'false,false,true,false': [1.798, 242, 5], 'false,false,false': [0.306, 58, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.046, 160, 82], 'false,true': [1.389, 2, 22], 'false,false,true': [1.565, 1, 52], 'false,false,false,true': [0.162, 65, 0], 'false,false,false,false': [0.188, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.812, 2, 121], 'true,false': [1.708, 246, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.296, 61, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.403, 2, 83], 'true,false,true': [0.008, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 167, 19], 'false,false,false,true': [2.011, 83, 28], 'false,false,false,false': [2.588, 70, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.102, 1, 78], 'false,true,true,true': [0.853, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.097, 216, 0], 'false,false,true': [1.482, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 98, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.618, 2, 85], 'true,true,false': [0.36, 0, 19], 'true,false,true': [0.029, 171, 0], 'true,false,false,true': [0.261, 32, 0], 'true,false,false,false': [0.987, 23, 4], 'false,true': [1.313, 51, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.1, 50, 21]}]
{'': [0.22427910288359082, 0.22222222222222296], 'true': [0.02725128832212642, 0.018597965005278303], 'false': [0.22959183673469508, 0.21420745069393815], 'false,true': [7.105427357601002e-16, 4.9343245538895844e-17], 'true,false': [-1.3860109097231253e-16, 0.06858710562414251], 'false,true,true': [0.0, 0.0]}
{'': [0.000457452842075621, 0.12140549950859054], 'false': [0.06966575447521074, 0.1582219617365165], 'false,false': [0.06139517954131832, 0.1804059423946913], 'false,false,false': [0.08448961506036781, 0.1694845573732529], 'false,true': [nan, 0.06966575447521074], 'false,false,true': [nan, 0.06139517954131832]}
{'': [0.02266282029145672, 0.11363258151586288], 'false': [nan, 0.11363258151586439], 'false,false': [0.0017687383956289185, 0.10276180893459232], 'false,false,false': [0.07778171403609828, 0.1641676207247429], 'true': [0.01686856490381907, 0.055087198056682794], 'true,false': [0.15019808368102283, 0.004489598632067715], 'true,true': [0.01686856490381907, nan], 'false,false,true': [0.005416761336614062, 1.1842378929335003e-16]}
{'': [0.03987702757971459, 0.0005280302884204649], 'false': [2.2089206708014205e-05, 0.0006917687586074338], 'false,false': [nan, 0.0006917687586074338], 'false,false,false': [nan, 0.0006917687586074338], 'false,true': [nan, 2.208920670800164e-05], 'false,true,false': [1.531353993065032e-05, 3.3665891672786386e-06]}
{'': [0.013776431534777667, 0.07979023035665372], 'false': [0.001926574945213903, 0.07925432435313189], 'false,false': [0.07559268206459148, 0.09377632151690292], 'false,false,true': [0.0031987248253789367, 0.013081812530264223], 'true': [0.013382240751557167, 0.0], 'false,true': [8.756876482385323e-06, 0.0]}
{'': [0.03833760065749241, 0.09465845755255047], 'false': [0.08040306562927678, 0.09515180286367857], 'false,false': [0.04623249728240417, 0.000508514253372179], 'true': [nan, 0.03833760065749236], 'true,false': [nan, 0.03833760065749241], 'false,false,false': [0.00040412499023975403, 0.0005624209278301689]}
{'': [0.045495344718184144, 0.05920912916248602], 'false': [nan, 0.05920912916248586], 'false,false': [nan, 0.05920912916248602], 'false,false,false': [nan, 0.05920912916248602], 'true': [0.026706455180995122, 0.011534862355428216]}
{'': [0.022970778297916886, 0.037810818560271554], 'false': [nan, 0.037810818560271436], 'false,false': [0.020012021738810885, 0.05242000313389757], 'false,false,false': [0.03641658010424212, 0.07126644088283075], 'true': [0.023172755527403083, 3.4713434702890456e-05], 'true,false': [3.4713434702890456e-05, nan]}
{'': [0.010486042063319245, 0.037049019903018204], 'false': [0.021350382668668743, 0.06323745615472427], 'false,false': [0.05226053993591847, 0.0005775032041204877], 'false,true': [0.019156414796335335, 4.364711791159155e-05], 'false,true,true': [0.019156414796335335, nan], 'false,false,false': [nan, 0.0005775032041204877]}
{'': [0.023834947790111777, 0.04158687913233671], 'false': [0.022671636863473323, 0.061185943402092415], 'false,false': [0.0, 0.062127286622474555], 'false,false,false': [nan, 0.06212728662247454], 'true': [0.025943464164467564, 0.0050935306615175376], 'true,true': [0.030097767099499104, 0.006835505030114945], 'true,false': [4.8872072321494475e-06, 0.01959519260099305], 'true,false,false': [0.002128140870141069, 0.036080557103511095]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.459
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else return -0.0740544547309962;  // std dev = 0.251, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.3966104735610508;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.7089542281855848;  // std dev = 0.135, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.6568754632686017;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.11616844657556769;  // std dev = 0.107, 129.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=2 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7352520801784442;  // std dev = 0.196, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12739831627934647;  // std dev = 0.030, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7246280548188374;  // std dev = 0.027, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.11596051882570745;  // std dev = 1.428, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.15272120434845377;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5654600806640834;  // std dev = 0.184, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.5115354622810115;  // std dev = 0.649, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.2312391635528557;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5981800644662859;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5796693078207669;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.49067029930204953;  // std dev = 1.128, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.11465256011766199;  // std dev = 0.042, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.0869809036205165;  // std dev = 2.205, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
%   | | | else return 0.17271002817000222;  // std dev = 3.092, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, D), follows(D, E) )
%   | | | then return 0.4015741011344844;  // std dev = 0.992, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.4712435503948546;  // std dev = 0.318, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2147011243073421;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.45246340087554415;  // std dev = 0.295, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3544312611664667;  // std dev = 1.062, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5318419530889804;  // std dev = 0.143, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.7139690192847723;  // std dev = 0.141, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(K, A) )
%   | then return -0.10339580651177552;  // std dev = 0.003, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.15081242579366755;  // std dev = 0.049, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.31745680137312;  // std dev = 1.032, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.05777932843478965;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16372126487010777;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.5239009232532439;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34703349003364153;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08946722444072149;  // std dev = 0.624, 124.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=1 */
%   | | | else return -0.021574527745974764;  // std dev = 1.614, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03532166445565992;  // std dev = 2.084, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.016046770057047365;  // std dev = 2.401, 78.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.26075071859215865;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.17610710083190387;  // std dev = 1.363, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return 0.27728334328472565;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then return -0.0456837613292149;  // std dev = 0.129, 143.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=14 */
%   | | else return -0.07072459656628817;  // std dev = 0.085, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27896390087421435;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.22943446831344977;  // std dev = 1.042, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4323517594768761;  // std dev = 0.507, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.1227530922342549;  // std dev = 0.043, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.18338759047608932;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.11964271255421362;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22020328355174715;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.23113155273925748;  // std dev = 0.033, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.27767412168533395;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3524620139917984;  // std dev = 0.269, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08350918940739022;  // std dev = 0.029, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.011715076398393079;  // std dev = 1.797, 102.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=29 */
%   | | | else return -0.009689225830597245;  // std dev = 1.777, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17494641159801877;  // std dev = 0.111, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.2952543300211058;  // std dev = 0.020, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.27083933772949814;  // std dev = 0.300, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.07265441671415636;  // std dev = 0.666, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0772376805108944;  // std dev = 0.028, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2958491424314493;  // std dev = 0.229, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.10435751658958675;  // std dev = 0.093, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.020806016923721322;  // std dev = 1.406, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0.012244294551866784;  // std dev = 1.503, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1336034761447077;  // std dev = 0.990, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.16003889659775994;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.17187864702834377;  // std dev = 0.023, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0.01969135392433663;  // std dev = 0.817, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.0955924810767683;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.19364305359351192;  // std dev = 0.051, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07200797591287954;  // std dev = 0.027, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.30218350177387665;  // std dev = 0.083, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.11399897128733065;  // std dev = 0.038, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.12904335434988046;  // std dev = 1.013, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return -0.1189261882455526;  // std dev = 0.896, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1897925599500636;  // std dev = 0.047, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06827554704122578;  // std dev = 0.080, 210.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.16624526040268883;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0038801819739443205;  // std dev = 0.132, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2005458102095934;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.0015230939205249417;  // std dev = 0.981, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
%   | | | else return -0.04187630071171071;  // std dev = 1.362, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.312', 'seconds']
Refined model CLL: -0.100308


******************************************
Best model found
******************************************
Results 

CLL : -0.096959 

AUC ROC : 0.993103 

AUC PR : 0.342242 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 15.459 

Total Inference Time : 14.026200532913208 

Total revision time: 41.858644323349
Best scored revision CLL: -0.100308


Results 

CLL : -0.096959 

AUC ROC : 0.993103 

AUC PR : 0.342242 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 41.88226373672485 

Total Inference Time : 14.026200532913208 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.163
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.10814893509951219;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7345931089219904;  // std dev = 0.132, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08051784754057639;  // std dev = 0.191, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.136832517440075;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017320234578629457;  // std dev = 1.189, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5623577006417185;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.7438063611374589;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7516175563315362;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5623577006417186;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5623577006417186;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07359045095055841;  // std dev = 1.179, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | | else return 0.03614347975178396;  // std dev = 0.884, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47791068271579995;  // std dev = 0.596, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.10982344997710215;  // std dev = 0.007, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.1206567661141815;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13863778278391106;  // std dev = 0.065, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3122691311655784;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.46529084496827255;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3122691311655783;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6827398794324155;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10298331808967809;  // std dev = 0.051, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10320615800178982;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01705676962807386;  // std dev = 1.535, 60.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.02635056329284899;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5383350983566282;  // std dev = 0.112, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1128400391963295;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.12033791719760852;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.20689600876925557;  // std dev = 1.295, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return -0.10387727184881318;  // std dev = 0.354, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025317994659827276;  // std dev = 0.380, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.21286188936718414;  // std dev = 0.040, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, E) )
%   | | then return 0.30559223448262873;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.06476788269995107;  // std dev = 0.095, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05600436290520204;  // std dev = 0.356, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return -0.027771250702208317;  // std dev = 0.499, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1484883625530719;  // std dev = 0.173, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25954633114195946;  // std dev = 0.227, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08011296682904674;  // std dev = 0.017, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36970960918679474;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09382489398619136;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13635306135048927;  // std dev = 0.805, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.16439580618312966;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07417286242475926;  // std dev = 0.016, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07610806356342009;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0014815265148378914;  // std dev = 0.251, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.030229160892492432;  // std dev = 0.242, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01495537581902082;  // std dev = 0.389, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.753', 'seconds']
Parameter learned model CLL:-0.095187 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.978, 1, 22], 'true,false,true': [2.58e-08, 28, 0], 'true,false,false': [0.3, 9, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,false': [0.433, 3, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.132, 0, 21], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.191, 36, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 8, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.189, 10, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 17], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.179, 32, 2], 'false,false,false,false': [0.884, 5, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.596, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.007, 39, 0], 'false,true,false,false': [3.73e-09, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.065, 9, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 17], 'true,false': [0.006, 0, 2], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.099, 0, 3], 'false,false,true,false': [0.051, 42, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.535, 40, 20], 'false,true': [0.901, 1, 3], 'false,false,true': [0.112, 0, 2], 'false,false,false,true': [0.052, 10, 0], 'false,false,false,false': [0.042, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.295, 2, 23], 'true,false': [0.354, 41, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.38, 4, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.04, 0, 20], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.095, 43, 2], 'false,false,false,true': [0.356, 14, 1], 'false,false,false,false': [0.499, 6, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.173, 1, 19], 'false,true,true,true': [0.227, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.017, 32, 0], 'false,false,true': [0.1, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.049, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.805, 1, 20], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.016, 38, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.251, 3, 1], 'false,true': [0.242, 2, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.389, 3, 1]}]
{'': [0.23488309594195214, 0.10937500000000004], 'true': [0.04158790170132359, 0.025623268698060975], 'false': [0.07638888888888894, 0.18750000000000003], 'false,true': [0.0, -1.0092936587501423e-17], 'true,false': [2.3790493384824782e-17, 0.09000000000000005], 'false,true,true': [0.0, nan]}
{'': [0.0008265684778188014, 0.05042567043961596], 'false': [0.03633149787233058, 0.07634712571194961], 'false,false': [3.469446951953614e-18, 0.11773998113793993], 'false,false,false': [nan, 0.11773998113793993], 'false,true': [nan, 0.03633149787233058], 'false,false,true': [nan, 3.469446951953614e-18]}
{'': [0.003237369734306287, 0.07684354161071821], 'false': [nan, 0.0768435416107182], 'false,false': [-3.700743415417188e-17, 0.055832472886569576], 'false,false,false': [0.04090923327496127, 0.13016219213707142], 'true': [0.0017274736997741316, 0.0], 'true,true': [-5.224578939412501e-17, 0.0], 'true,false': [0.0, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.014188242979889196, 0.0001966084968361546], 'false': [1.3002378924825193e-05, 0.0004626001315962845], 'false,false': [nan, 0.0004626001315962845], 'false,false,false': [nan, 0.0004626001315962845], 'false,true': [nan, 1.3002378924825193e-05], 'false,true,false': [1.3329030220864943e-06, 2.7755575615628915e-18]}
{'': [0.002207190453209472, 0.042444316992799005], 'false': [-1.850371707708594e-17, 0.03715523683485642], 'false,false': [0.038688826589079156, 0.0], 'false,false,true': [0.0032702550149238028, 6.13283503721447e-05], 'true': [-1.0449157878825003e-16, 1.7469136178865918e-05], 'false,true': [-1.850371707708594e-17, nan]}
{'': [0.03929299529082002, 0.07299313407656537], 'false': [0.20315260108238142, 0.04319469285219853], 'false,false': [0.006221771969853185, 0.0002942202678212283], 'true': [nan, 0.039292995290820004], 'true,false': [nan, 0.03929299529082002], 'false,false,false': [0.00027542802959558134, 0.0002904043057876786]}
{'': [0.050039298588452956, 0.02402088635508219], 'true': [0.06709310586462892, 0.0030572901810397113], 'false': [nan, 0.02402088635508219], 'false,false': [nan, 0.02402088635508219], 'false,false,false': [nan, 0.02402088635508219]}
{'': [0.00046708202364739845, 0.011775660659486598], 'false': [nan, 0.011775660659486598], 'false,false': [0.009003420222204548, 0.017234620023639843], 'false,false,false': [0.008440808036544416, 0.03553501969994814], 'true': [8.096389124740977e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.030067601082294622, 0.017465555228165147], 'false': [0.01283054329245075, 0.030871210040683952], 'false,false': [0.0049907143594385694, 0.00023660323829518686], 'false,true': [0.012853806298584708, 8.920005777701169e-06], 'false,true,true': [0.012853806298584708, nan], 'false,false,false': [nan, 0.00023660323829518686]}
{'': [0.019706815295588896, 0.03007349906078904], 'false': [0.019493184374082814, 0.03790875428561702], 'false,false': [nan, 0.03790875428561702], 'false,false,false': [nan, 0.03790875428561702], 'true': [0.028232431332938325, 0.0017541302456361648], 'true,true': [0.03085285209635389, 0.0], 'true,false': [6.492795472465431e-06, 0.007724732053260616], 'true,false,false': [0.0, 0.015699743440044267]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.851
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7259318791307059;  // std dev = 0.132, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.0831987359914241;  // std dev = 0.824, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.004742059851341982;  // std dev = 0.296, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.14489878247426094;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03964814283030389;  // std dev = 0.760, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1842553658468876;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.49535562588663534;  // std dev = 0.788, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5537710531387339;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7204295120324535;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7406313365021965;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5537710531387339;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07500524270322716;  // std dev = 0.832, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return -0.12144858235200588;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16230668403594933;  // std dev = 1.054, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1613826138360013;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3396828547768819;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.4305919456859728;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.41633137834983447;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.46973714283876417;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.696244992753452;  // std dev = 0.184, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.11049832428793496;  // std dev = 0.034, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.11371814674893621;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1570375121991045;  // std dev = 0.097, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2819324134551426;  // std dev = 0.229, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.31991047656004346;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4222024489669142;  // std dev = 0.053, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.31223982607550965;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5928298616579227;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10422535060872566;  // std dev = 0.116, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10855500357472095;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.2871699224132824;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.25860025269827114;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27192968619087343;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05473629335898537;  // std dev = 0.121, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.09427285913397333;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2834184846033239;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4462918010028321;  // std dev = 0.113, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10775209532360079;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.09697493173294831;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(A, C), follows(C, E) )
%   | | then return 0.23133939408817428;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2609628363432231;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2045443644598326;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return -0.05647408802268184;  // std dev = 0.537, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return -0.08633401238521932;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, I), follows(A, F) )
%   | | | then return -0.14286522062765586;  // std dev = 0.398, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.05287151472443159;  // std dev = 0.307, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( tweets(A, J) )
%   | | then return -0.15700705828112205;  // std dev = 0.720, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.1363850542415471;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.11024197045364893;  // std dev = 0.956, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.1942308378198165;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1732677402970716;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.24458585733879212;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.3698222365943452;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08040966893654057;  // std dev = 0.015, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.11561238814046837;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then return -0.07051335014262211;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09210670748528656;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17551287356596834;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.15918473531087124;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2164214926204176;  // std dev = 0.203, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.07389567751983224;  // std dev = 0.018, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.07873227731816325;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.29521536482500493;  // std dev = 0.092, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.0881788425327209;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16286156054615405;  // std dev = 0.185, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1390384871218881;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.11946766326092562;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.06964551934042398;  // std dev = 0.002, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.07320764041844444;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.02200721651967922;  // std dev = 0.221, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( follows(A, I) )
%   | | then return -0.08822679360441982;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.08035107141952424;  // std dev = 0.327, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.0722176313682664;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.313', 'seconds']
Refined model CLL: -0.094451


******************************************
Best model found
******************************************
Results 

CLL : -0.093312 

AUC ROC : 0.994935 

AUC PR : 0.425084 

Precision : 0.334129 

Recall : 0.897436 

F1 : 0.486957 

Total Learning Time : 3.851 

Total Inference Time : 2.6410024166107178 

Total revision time: 9.951551975250243
Best scored revision CLL: -0.094451


Results 

CLL : -0.093312 

AUC ROC : 0.994935 

AUC PR : 0.425084 

Precision : 0.334129 

Recall : 0.897436 

F1 : 0.486957 

Total Learning Time : 9.975171388626098 

Total Inference Time : 2.6410024166107178 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.586
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.07042249347191636;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.13087620782678497;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7236743763167229;  // std dev = 0.145, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01712181151052668;  // std dev = 0.282, 78.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1334928440871636;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.15854103505980627;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.1329064516301944;  // std dev = 1.762, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5701338909417376;  // std dev = 0.278, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.7229161107482647;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.3200619984525839;  // std dev = 0.621, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5543288337203727;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5543288337203727;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06189891768875856;  // std dev = 2.136, 93.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=7 */
%   | | | else return -0.004896644271275886;  // std dev = 1.746, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46903263522168837;  // std dev = 1.731, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11689311502087689;  // std dev = 0.028, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.12304888646046831;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15295744158558452;  // std dev = 0.071, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2672487311032011;  // std dev = 1.313, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return 0.157502801032658;  // std dev = 0.882, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3089175378961001;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6374771118057001;  // std dev = 0.122, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09542405936735839;  // std dev = 1.209, 106.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=2 */
%   | | else return -0.10131415671038929;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0434772663850858;  // std dev = 2.238, 111.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=41 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.10765976342751445;  // std dev = 0.997, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46834631219535866;  // std dev = 0.805, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1138042905516927;  // std dev = 0.065, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.1103095752459048;  // std dev = 0.070, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27859151103623314;  // std dev = 1.221, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return -0.08540302064206476;  // std dev = 1.083, 87.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.027018272532654822;  // std dev = 0.398, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19767223112158308;  // std dev = 0.053, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E) )
%   | | then return 0.45360866569522384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.030089430608417702;  // std dev = 0.161, 73.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04304334006447693;  // std dev = 0.475, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.0754657164916282;  // std dev = 1.084, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1635210384712335;  // std dev = 0.182, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30053720975841447;  // std dev = 0.380, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08997570107186047;  // std dev = 0.045, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4613256590204641;  // std dev = 0.394, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11182983577195767;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18626434196006528;  // std dev = 0.501, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.15538785371761643;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08407439494238189;  // std dev = 0.012, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07213355889513327;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.031198243762463527;  // std dev = 0.362, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.04336963763406508;  // std dev = 0.364, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04442377465970926;  // std dev = 0.899, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.879', 'seconds']
Parameter learned model CLL:-0.105987 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 44], 'true,false,true': [5.96e-08, 57, 0], 'true,false,false': [0.258, 13, 1], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.445, 8, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.145, 0, 35], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.282, 68, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 17, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [1.762, 12, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.278, 0, 32], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.621, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.136, 86, 7], 'false,false,false,false': [1.746, 23, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.731, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 52, 0], 'false,true,false,false': [0.0, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.071, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.313, 2, 32], 'true,false': [0.882, 1, 2], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.122, 0, 9], 'false,false,true,false': [1.209, 104, 2], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.238, 70, 41], 'false,true': [0.997, 1, 4], 'false,false,true': [0.805, 1, 5], 'false,false,false,true': [0.065, 10, 0], 'false,false,false,false': [0.07, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.221, 1, 46], 'true,false': [1.083, 85, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.398, 9, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.053, 0, 34], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 63, 10], 'false,false,false,true': [0.475, 15, 2], 'false,false,false,false': [1.084, 8, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.182, 1, 34], 'false,true,true,true': [0.38, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.045, 81, 0], 'false,false,true': [0.394, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.066, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.501, 0, 42], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.012, 82, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.362, 8, 1], 'false,true': [0.364, 14, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.899, 8, 3]}]
{'': [0.23818525519848852, 0.19390581717451505], 'true': [1.2918958832001822e-15, 0.013886133703630291], 'false': [0.18750000000000003, 0.1983471074380164], 'false,true': [0.0, -6.938893903907228e-18], 'true,false': [6.232831015439475e-17, 0.06632653061224494], 'false,true,true': [0.0, nan]}
{'': [0.0006000353802097688, 0.08813476422588318], 'false': [0.07979007700136756, 0.10662694237037974], 'false,false': [-9.79608551139844e-18, 0.17692254378804803], 'false,false,false': [0.0, 0.18261077238517304], 'false,true': [nan, 0.07979007700136756], 'false,false,true': [nan, -9.79608551139844e-18]}
{'': [0.01735499277237287, 0.0754156848199875], 'false': [nan, 0.07541568481998753], 'false,false': [-4.4408920985006264e-17, 0.06399423449663998], 'false,false,false': [0.04905115263346939, 0.11294667394267634], 'true': [0.003027468978125706, 0.1925932262351331], 'true,false': [0.1925932262351331, nan], 'true,true': [0.0024147317264493484, 0.0], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.05765180687577887, 0.0002444420580279056], 'false': [1.73000673564407e-05, 0.00045692229841173067], 'false,false': [nan, 0.00045692229841173067], 'false,false,false': [nan, 0.00045692229841173067], 'false,true': [nan, 1.730006735643342e-05], 'false,true,false': [1.4703462272878622e-05, 0.0]}
{'': [0.06850740938130723, 0.05267445056057039], 'true': [0.05067556622273295, 0.25953401693488837], 'false': [-2.2204460492503132e-17, 0.04997323332048384], 'false,false': [0.051576970339844104, 0.0], 'false,false,true': [0.0016452944444848387, 0.013779085817561201], 'false,true': [-2.2204460492503132e-17, nan]}
{'': [0.04511168687487491, 0.1017888073580692], 'false': [0.1988877593180028, 0.08252288244872376], 'false,false': [0.10788985707531469, 0.0004370985181474147], 'true': [nan, 0.04511168687487491], 'true,false': [nan, 0.04511168687487491], 'false,false,false': [0.00042604900923894073, 0.0004413277952610277]}
{'': [0.0500588874467463, 0.01440976956170703], 'true': [0.03173512725485429, 0.013486848985823271], 'false': [nan, 0.01440976956170703], 'false,false': [nan, 0.01440976956170703], 'false,false,false': [nan, 0.01440976956170703]}
{'': [0.0018972850392070433, 0.03374419289129878], 'false': [nan, 0.03374419289129887], 'false,false': [0.025893388346855308, 0.05339622449282141], 'false,false,false': [0.013282627007567395, 0.1068630110516945], 'true': [8.156015343827201e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.033015798363986, 0.02870954587045345], 'false': [0.017645516765549003, 0.08366510385136837], 'false,false': [0.03111174319415868, 0.00043937710972461743], 'false,true': [0.013131464913705244, 2.4800622657359547e-05], 'false,true,true': [0.013131464913705244, nan], 'false,false,false': [nan, 0.00043937710972461743]}
{'': [0.017512565834057848, 0.0367057872308755], 'false': [0.008300403156352741, 0.0734551935257217], 'false,false': [nan, 0.0734551935257217], 'false,false,false': [nan, 0.0734551935257217], 'true': [0.005741244093230225, 0.0015406215327168594], 'true,true': [0.0059713022360898815, 0.0], 'true,false': [1.8364116580372439e-06, 0.007689388063955215], 'true,false,false': [0.0, 0.014540926115404937]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.748
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.19148226843284558;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.6778067455442877;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7533803635396507;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05132902004248386;  // std dev = 1.805, 57.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=5 */
%   | | | else return -0.06911676847910167;  // std dev = 0.816, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1293354673175653;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.16679450876845162;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.17214829816101004;  // std dev = 1.756, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5263791541243287;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.27204238202295644;  // std dev = 0.655, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5503337922621845;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return -0.07596593705471803;  // std dev = 1.658, 75.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=4 */
%   | | | else return 0.09515604456578594;  // std dev = 1.039, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.040119550377491105;  // std dev = 1.191, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.23646323628616;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4296738657034326;  // std dev = 0.042, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3256961029880169;  // std dev = 0.940, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5162354813964835;  // std dev = 0.200, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.42104657983373256;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7476827759751997;  // std dev = 0.064, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11559282399168998;  // std dev = 0.056, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return -0.11124479265596944;  // std dev = 0.015, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.17958773122157523;  // std dev = 0.119, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.307271881819216;  // std dev = 0.191, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.3242786644955776;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.32851754679883505;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5782820194641626;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09857518070606026;  // std dev = 1.053, 112.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=2 */
%   | | else return -0.10991366089162873;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2705819703625174;  // std dev = 0.010, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.08915134919904798;  // std dev = 0.895, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.26614449869919093;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return -0.045567876874013924;  // std dev = 0.146, 69.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=7 */
%   | | else return -0.06344926694702291;  // std dev = 0.116, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3098416447596878;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5292035715685829;  // std dev = 0.192, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11844642387195689;  // std dev = 0.103, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.13190256314948445;  // std dev = 0.118, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(C, F), follows(C, A) )
%   | | | then return 0.2227700867527607;  // std dev = 0.033, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20777373266316546;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23229206884803405;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.27523893524634363;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2318479096197718;  // std dev = 0.092, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4348779892084589;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09017290587510993;  // std dev = 0.059, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03730134937848239;  // std dev = 0.560, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.01808240680376535;  // std dev = 0.906, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.0921211194031901;  // std dev = 1.339, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.1944831468269856;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18443048813731547;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.34100331835876385;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.04798146342268367;  // std dev = 0.585, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.33262937955997135;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0826059346093921;  // std dev = 0.041, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.033737914125971435;  // std dev = 0.567, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.020251316296344194;  // std dev = 0.988, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.17772394445212578;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.1623133583454562;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.04341003727886815;  // std dev = 0.575, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16558742307446528;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.26335842673891446;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0761860474723132;  // std dev = 0.003, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.402983504048557;  // std dev = 0.170, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0920653220337423;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.17198301449098005;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.06621159638406013;  // std dev = 1.636, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return 0.19754643616033107;  // std dev = 0.092, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.11797351133568923;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07134504912176445;  // std dev = 0.023, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.0696203900485007;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.07027946280873822;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.005158007550746219;  // std dev = 0.266, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, I) )
%   | then return -0.035959805809240554;  // std dev = 0.121, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.03740998416919289;  // std dev = 0.244, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.702', 'seconds']
Refined model CLL: -0.103355


******************************************
Best model found
******************************************
Results 

CLL : -0.105685 

AUC ROC : 0.995126 

AUC PR : 0.443052 

Precision : 0.341463 

Recall : 0.987179 

F1 : 0.507414 

Total Learning Time : 6.748 

Total Inference Time : 4.829326391220093 

Total revision time: 17.029815324783325
Best scored revision CLL: -0.103355


Results 

CLL : -0.105685 

AUC ROC : 0.995126 

AUC PR : 0.443052 

Precision : 0.341463 

Recall : 0.987179 

F1 : 0.507414 

Total Learning Time : 17.05343473815918 

Total Inference Time : 4.829326391220093 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.821
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.08921948595311938;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.058148935099512286;  // std dev = 0.400, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7024572741914054;  // std dev = 1.004, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.022585049742731986;  // std dev = 0.276, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13133348876651285;  // std dev = 2.69e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13695042478332914;  // std dev = 2.522, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5380040220112273;  // std dev = 1.346, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | else return 0.7240091094784222;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7661614883322585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.39289758644692285;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5595642531135895;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.031055469476458764;  // std dev = 2.941, 123.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=14 */
%   | | | else return -0.03482814797158723;  // std dev = 2.010, 46.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5134034728568722;  // std dev = 1.433, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11919680911785945;  // std dev = 0.041, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return -0.11928019137291376;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14781272797850623;  // std dev = 0.051, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3258697088193631;  // std dev = 0.361, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.4544962361712166;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3255772795511151;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6144077068881819;  // std dev = 0.161, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08511923769317656;  // std dev = 1.766, 152.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=5 */
%   | | else return -0.10240299357977502;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013321711158321375;  // std dev = 2.852, 177.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=57 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2706331934105713;  // std dev = 0.111, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4858132288672857;  // std dev = 0.913, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11567824226807968;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.10313970995834623;  // std dev = 0.055, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2647453822952817;  // std dev = 1.385, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else return -0.07491133092958328;  // std dev = 1.549, 127.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.025395634035700696;  // std dev = 0.427, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1748642883610689;  // std dev = 0.991, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.23608124115932178;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04874483473312552;  // std dev = 0.154, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.015666990722558376;  // std dev = 1.059, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.08627979549482225;  // std dev = 1.283, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1898417968582428;  // std dev = 0.056, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29182423908216304;  // std dev = 0.477, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08941449772855016;  // std dev = 0.035, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43257265252443894;  // std dev = 0.569, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10775484093147498;  // std dev = 0.087, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15125549224442086;  // std dev = 1.569, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | else return -0.1165828810365056;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.0831446880716595;  // std dev = 0.001, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07538109949925197;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.009164387939108724;  // std dev = 0.220, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.013646956288720757;  // std dev = 1.192, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06523246654901968;  // std dev = 1.068, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.717', 'seconds']
Parameter learned model CLL:-0.109575 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 62], 'true,false,true': [8.69e-08, 97, 0], 'true,false,false': [0.223, 18, 1], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 11, 0], 'false,false': [0.4, 16, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.004, 1, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.276, 101, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.69e-08, 26, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.522, 25, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.346, 2, 45], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.913, 1, 5], 'false,false,true,false': [1.49e-08, 0, 3], 'false,false,false,true': [2.941, 109, 14], 'false,false,false,false': [2.01, 41, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.433, 1, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 104, 0], 'false,true,false,false': [0.0, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.051, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.361, 0, 46], 'true,false': [0.032, 0, 2], 'false,true,true': [0.05, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.161, 0, 14], 'false,false,true,false': [1.766, 147, 5], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.852, 120, 57], 'false,true': [0.111, 0, 6], 'false,false,true': [0.913, 1, 12], 'false,false,false,true': [0.058, 15, 0], 'false,false,false,false': [0.055, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.385, 2, 67], 'true,false': [1.549, 122, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.427, 11, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.991, 1, 47], 'true,false,true': [0.024, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 115, 14], 'false,false,false,true': [1.059, 35, 8], 'false,false,false,false': [1.283, 11, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.056, 0, 48], 'false,true,true,true': [0.477, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 140, 0], 'false,false,true': [0.569, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.087, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.569, 2, 59], 'true,true,false': [0.866, 1, 3], 'true,false,true': [0.001, 95, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.22, 3, 1], 'false,true': [1.192, 16, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.068, 10, 4]}]
{'': [0.22866431006186097, 0.20999999999999946], 'true': [-6.87622002348484e-16, 0.00854637336504167], 'false': [0.24000000000000005, 0.15999999999999986], 'false,true': [0.09876543209876527, -1.0092936587501423e-17], 'false,true,true': [-2.220446049250313e-16, 0.0], 'true,false': [7.783006770568107e-17, 0.04986149584487539]}
{'': [0.020155622662817976, 0.09459417570581427], 'false': [0.07632782825147481, 0.1257595241441072], 'false,false': [2.7755575615628914e-17, 0.1808379666242298], 'false,false,false': [0.0, 0.1766900804781027], 'false,true': [nan, 0.07632782825147481], 'false,false,true': [nan, 2.7755575615628914e-17]}
{'': [0.03789492407787229, 0.08737097679573341], 'false': [nan, 0.08737097679573344], 'false,false': [0.0987654320987654, 0.07508872624634051], 'false,false,true': [0.13888888888888887, 7.401486830834377e-17], 'false,false,false': [0.07031492898213432, 0.08784308601404374], 'true': [0.038445675157310864, 0.011108638443283358], 'true,true': [0.03854287881735433, 0.0], 'true,false': [0.0, 0.0]}
{'': [0.02701495599475399, 0.00011075657411568092], 'false': [1.291988171179977e-05, 0.00015104167788579208], 'false,false': [nan, 0.00015104167788579208], 'false,false,false': [nan, 0.00015104167788579208], 'false,true': [nan, 1.291988171179643e-05], 'false,true,false': [1.6521025054687068e-05, -7.656710514656252e-18]}
{'': [0.0033969074367508623, 0.05624088039510017], 'false': [0.00030883001226972295, 0.053277831299337934], 'false,false': [0.056736972990101615, 2.3129646346357427e-18], 'false,false,true': [0.0018481690572791365, 0.020523055378981084], 'true': [0.002833573535987358, 0.0004981695964904886], 'false,true': [0.00030883001226972295, nan]}
{'': [0.045956457632308115, 0.08632610609782411], 'false': [0.0020374678139457314, 0.09282420225387797], 'false,false': [0.06414180495220984, 0.0002469872984132256], 'true': [nan, 0.04595645763230826], 'true,false': [nan, 0.045956457632308115], 'false,false,false': [0.00022494941460626065, 0.00019157614070053341]}
{'': [0.048335886961898444, 0.013023940474093039], 'true': [0.02778406729598087, 0.018888055025782145], 'false': [nan, 0.013023940474093039], 'false,false': [nan, 0.013023940474093039], 'false,false,false': [nan, 0.013023940474093039]}
{'': [0.019789079619152914, 0.03250195245159716], 'false': [nan, 0.03250195245159736], 'false,false': [0.023668135306410456, 0.04971202047222829], 'false,false,false': [0.02606764956013183, 0.10978728610192325], 'true': [0.020451797637770056, 0.0002862324748339612], 'true,false': [0.0002862324748339612, nan]}
{'': [0.0030984418693733168, 0.025902988051884988], 'false': [0.01484368095514656, 0.05847587434469578], 'false,false': [0.029429027794534882, 0.00020534411015420178], 'false,true': [0.014214947124359889, 8.56451214197624e-06], 'false,true,true': [0.014214947124359889, nan], 'false,false,false': [nan, 0.00020534411015420178]}
{'': [0.030887811267209065, 0.0689002250965419], 'false': [0.059242164150371306, 0.08152723994286362], 'false,false': [nan, 0.08152723994286362], 'false,false,false': [nan, 0.08152723994286362], 'true': [0.05357060021304371, 0.0006265268483334897], 'true,true': [0.04037373561535364, 0.1875], 'true,false': [1.433486333261189e-08, 0.0038403313137869714], 'true,false,false': [-2.3129646346357427e-18, 0.012072835587768489]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.235
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8146706742299468;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.19148226843284566;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.730357950431872;  // std dev = 0.105, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.6356751215075226;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6442166988343624;  // std dev = 0.959, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.021220612223930683;  // std dev = 0.282, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11286762561454498;  // std dev = 2.545, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5746554933487471;  // std dev = 0.191, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.7852293304891095;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.706440737448399;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5822216825680226;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5925981498483072;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11451528627326228;  // std dev = 0.048, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14544032479322314;  // std dev = 1.814, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return 0.039147030715293435;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.4244860474936146;  // std dev = 0.089, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.2380123872547159;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.43661564918791296;  // std dev = 0.087, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5067344783444223;  // std dev = 0.236, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, I) )
%   | | then return 0.6336520944728148;  // std dev = 0.082, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8109972465084881;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10204749948637792;  // std dev = 0.065, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.11129441148476268;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.17101615262909964;  // std dev = 0.068, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.32332244672180394;  // std dev = 0.041, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.3393976614049953;  // std dev = 0.092, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20496964562570866;  // std dev = 0.367, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return 0.45906554599338323;  // std dev = 0.059, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3333151854691452;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.43201588374409755;  // std dev = 0.386, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07635986170820869;  // std dev = 1.563, 140.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=5 */
%   | | else return -0.09246864611080173;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.25696720494911224;  // std dev = 0.037, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.07914513432333128;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3358204007611892;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.05460424024568061;  // std dev = 0.955, 95.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=9 */
%   | | | else return -0.2214026643305465;  // std dev = 0.604, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06657885219473082;  // std dev = 0.102, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.13280878557982312;  // std dev = 0.364, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4063156250825587;  // std dev = 0.317, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.12378644576860526;  // std dev = 0.026, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.21888285437324173;  // std dev = 0.120, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12325608026715103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.054343751308934374;  // std dev = 0.916, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, F), follows(G, C) )
%   | | then return 0.24203730071937857;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.27252815437643235;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.03950116053735463;  // std dev = 0.183, 176.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19220214613533343;  // std dev = 0.022, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return 0.22358435141543564;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return -0.06911082414445431;  // std dev = 0.522, 83.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=2 */
%   | | | else return -0.08260236029129782;  // std dev = 0.013, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.2867774582387752;  // std dev = 0.157, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07881954577094612;  // std dev = 0.036, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), follows(A, J) )
%   | | | then return -0.0031033394269632006;  // std dev = 1.044, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0.03391003838608827;  // std dev = 0.352, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.096192536303161;  // std dev = 0.327, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then return 0.17005535091900922;  // std dev = 0.033, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.040756720270156865;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.17601546357618195;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1769710382037948;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13310315950286228;  // std dev = 0.966, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.07387880430141104;  // std dev = 0.004, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.33976094262760587;  // std dev = 0.108, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5149783584227945;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12083303239975836;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1387879692618397;  // std dev = 0.108, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.07347547950590691;  // std dev = 0.948, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20519500926292247;  // std dev = 0.127, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.27493215731722126;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.06950882109308434;  // std dev = 0.031, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.05383050989874068;  // std dev = 0.065, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.25649758601425404;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10081303063172908;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.04919099143388345;  // std dev = 0.243, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.819', 'seconds']
Refined model CLL: -0.102239


******************************************
Best model found
******************************************
Results 

CLL : -0.101398 

AUC ROC : 0.995452 

AUC PR : 0.470237 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 9.235 

Total Inference Time : 9.483779191970825 

Total revision time: 25.897313123703
Best scored revision CLL: -0.102239


Results 

CLL : -0.101398 

AUC ROC : 0.995452 

AUC PR : 0.470237 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 25.920932537078855 

Total Inference Time : 9.483779191970825 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.148
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970732;  // std dev = 1.397, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.07935106490048778;  // std dev = 0.242, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2265699877310913;  // std dev = 0.482, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6970633081088793;  // std dev = 1.403, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04909900790021821;  // std dev = 0.245, 165.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09079676268064373;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7557396194794511;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.09235385423187886;  // std dev = 3.027, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5813025478539761;  // std dev = 0.357, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.7340639564200284;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8214929447963577;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5955113011256771;  // std dev = 0.120, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4557799831045575;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5668910942156686;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04280821600559808;  // std dev = 3.291, 179.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=17 */
%   | | | else return 0.04847420385835133;  // std dev = 2.231, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5192723320753455;  // std dev = 1.401, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11599639783834087;  // std dev = 0.008, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | | else return -0.1254553822996688;  // std dev = 0.002, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16464279162730813;  // std dev = 0.177, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2796581264555992;  // std dev = 1.640, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | else return 0.4425039405562779;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3224753855462401;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.622474268527478;  // std dev = 0.117, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07748994200119734;  // std dev = 2.284, 198.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=9 */
%   | | else return -0.10631448096956779;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03196014317187168;  // std dev = 2.864, 209.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2641570402535023;  // std dev = 0.100, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48294556163997476;  // std dev = 1.282, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11443919920193234;  // std dev = 0.084, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.11202826327038451;  // std dev = 0.117, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25092355644335884;  // std dev = 1.857, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | else return -0.06850058147209187;  // std dev = 2.041, 179.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05910645695240666;  // std dev = 0.908, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1698168428722462;  // std dev = 1.356, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.22951149338833376;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05511018264004796;  // std dev = 0.132, 176.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.041002749592305085;  // std dev = 1.321, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return -0.0011763834785025562;  // std dev = 1.667, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1769096401568607;  // std dev = 0.138, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2806365909820558;  // std dev = 0.557, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09018973848595448;  // std dev = 0.037, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46065584203311544;  // std dev = 0.604, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11408277201037992;  // std dev = 0.107, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15800536094648482;  // std dev = 1.589, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.1455381801765868;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08442228039205363;  // std dev = 0.079, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0790308227358483;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.02042715864653039;  // std dev = 0.466, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.0012637303837361418;  // std dev = 1.252, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20919651616633095;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.052394079838049515;  // std dev = 1.285, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.845', 'seconds']
Parameter learned model CLL:-0.111984 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.397, 2, 80], 'true,false,true': [0.0, 138, 0], 'true,false,false': [0.242, 30, 2], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.482, 12, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.403, 2, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.245, 150, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.979, 23, 1], 'false,false,false,true': [0.089, 0, 3], 'false,false,false,false': [3.027, 43, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.357, 0, 58], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.12, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.943, 1, 8], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [3.291, 162, 17], 'false,false,false,false': [2.231, 29, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.401, 0, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.008, 132, 0], 'false,true,false,false': [0.002, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.64, 3, 61], 'true,false': [0.024, 0, 3], 'false,true,true': [0.039, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.117, 0, 15], 'false,false,true,false': [2.284, 189, 9], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.864, 137, 72], 'false,true': [0.1, 0, 9], 'false,false,true': [1.282, 1, 19], 'false,false,false,true': [0.084, 18, 0], 'false,false,false,false': [0.117, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.857, 3, 85], 'true,false': [2.041, 168, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.908, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.356, 2, 64], 'true,false,true': [0.024, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.132, 161, 15], 'false,false,false,true': [1.321, 28, 12], 'false,false,false,false': [1.667, 29, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.138, 1, 64], 'false,true,true,true': [0.557, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.037, 176, 0], 'false,false,true': [0.604, 0, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.107, 26, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.589, 2, 75], 'true,true,false': [0.014, 0, 5], 'true,false,true': [0.079, 144, 0], 'true,false,false,true': [7.45e-09, 16, 0], 'true,false,false,false': [0.466, 9, 2], 'false,true': [1.252, 24, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.285, 15, 6]}]
{'': [0.2195137314184939, 0.23818525519848724], 'false': [0.2414266117969817, 0.23268698060941836], 'false,true': [-1.6148698540002277e-16, -6.938893903907228e-18], 'true': [0.023795359904817976, 0.011626297577854505], 'true,false': [-7.079683055580708e-17, 0.05859375000000002], 'false,true,true': [-1.6148698540002277e-16, nan]}
{'': [0.02896754983767986, 0.09119439214074469], 'false': [0.05996117081219257, 0.14337315548346782], 'false,false': [0.03993055555555559, 0.17092571522963582], 'false,false,false': [0.002630475579283124, 0.1579873296053436], 'false,true': [nan, 0.05996117081219257], 'false,false,true': [nan, 0.03993055555555559]}
{'': [0.004385220639028187, 0.08887713292060048], 'false': [nan, 0.08887713292060051], 'false,false': [0.07100591715976351, 0.07468855118900183], 'false,false,false': [0.06051809097575452, 0.13820995416720527], 'false,false,true': [0.09876543209876552, 0.0], 'true': [0.002553022563261693, 0.016411669477604907], 'true,false': [0.003151031079035249, 0.004825013766210547], 'true,true': [0.002201513957271536, 0.0]}
{'': [0.019614583786316864, 0.000483053986742373], 'false': [1.3689387470330452e-05, 0.0009442169725043257], 'false,false': [nan, 0.0009442169725043257], 'false,false,false': [nan, 0.0009442169725043257], 'false,true': [nan, 1.3689387470330452e-05], 'false,true,false': [5.421018747046406e-07, 1.759618736293646e-07]}
{'': [0.04128853483173935, 0.055259565501153365], 'false': [0.00012914560393891458, 0.05184865861169584], 'false,false': [0.05663263158675382, -2.523234146875356e-18], 'false,false,true': [0.0009144586232145239, 0.026350191491815198], 'true': [0.042027322939172704, 0.0001963698300686175], 'false,true': [0.00012914560393891458, nan]}
{'': [0.03925524662015246, 0.09583634229657792], 'false': [0.0011095066149976833, 0.10556189638774824], 'false,false': [0.08215050331628455, 0.0005052080411575227], 'true': [nan, 0.03925524662015242], 'true,false': [nan, 0.03925524662015246], 'false,false,false': [0.00038759704495351194, 0.0005946995510230682]}
{'': [0.05105311118452812, 0.05492094373304498], 'false': [nan, 0.05492094373304498], 'false,false': [nan, 0.05492094373304498], 'false,false,false': [nan, 0.05492094373304498], 'true': [0.03917655472053967, 0.02326341340368962]}
{'': [0.02716012909676023, 0.031558937654041656], 'false': [nan, 0.031558937654041753], 'false,false': [0.017547789270141893, 0.059957607920530676], 'false,false,false': [0.04359337598567107, 0.07720373033941304], 'true': [0.027869358760802695, 0.00029690627430437044], 'true,false': [0.00029690627430437044, nan]}
{'': [0.019073711387890893, 0.030009033687793098], 'false': [0.014677705528802914, 0.08582485136333504], 'false,false': [0.024356282921427486, 0.000437069512907579], 'false,true': [0.014772894001849488, 7.690457121337849e-06], 'false,true,true': [0.014772894001849488, nan], 'false,false,false': [nan, 0.000437069512907579]}
{'': [0.02333963385880865, 0.05772710367170673], 'false': [0.04477009018185665, 0.07607177296018076], 'false,false': [0.0, 0.0785766472465786], 'false,false,false': [nan, 0.0785766472465786], 'true': [0.03080127628043783, 0.0015494444204324606], 'true,true': [0.03278942873816059, 3.777531054514893e-05], 'true,false': [4.367514814623521e-05, 0.008858901263348045], 'true,false,false': [3.469446951953614e-18, 0.019709382083214315]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.53
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.40360348055405776;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( tweets(C, E), follows(A, C) )
%   | | then return 0.5528067455442877;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7376797461881007;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.7733786587074263;  // std dev = 0.108, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.46042423690984896;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.10049005090956208;  // std dev = 1.862, 164.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=5 */
%   | | | else return 0.06892136049569808;  // std dev = 1.488, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06732606381912457;  // std dev = 1.897, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.20400271597762282;  // std dev = 2.165, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.48144769743982274;  // std dev = 1.913, 50.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | | else return 0.56951724989863;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6031176523608918;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.4870028373106396;  // std dev = 1.052, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5525538211228374;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.35536643674628426;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.07616970537605577;  // std dev = 0.184, 179.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10998090965850496;  // std dev = 1.802, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.3540965390928831;  // std dev = 1.776, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.4163295643062496;  // std dev = 0.994, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.33394095765764215;  // std dev = 0.918, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5657244940182924;  // std dev = 0.204, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.43255614381657853;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6375491410140959;  // std dev = 0.942, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.7212770447993649;  // std dev = 0.127, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(H, A) )
%   | then return -0.11107483960908097;  // std dev = 0.008, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( tweets(A, I) )
%   | | then return -0.16127352104716391;  // std dev = 0.103, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.2844727192854736;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.22830004359872433;  // std dev = 1.891, 36.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   | | | else return 0.33205469359203915;  // std dev = 0.058, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.4232632205674517;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.34476970639184845;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.45368277341234586;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3311508266732596;  // std dev = 0.076, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5834397072375894;  // std dev = 0.193, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08168665514958132;  // std dev = 1.794, 208.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=9 */
%   | | else return -0.1375023369113251;  // std dev = 0.067, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2775080893532832;  // std dev = 0.134, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.33589611547035314;  // std dev = 0.933, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09088997332136074;  // std dev = 0.033, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.03939266116120984;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.06804304811788048;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2837366507747329;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.012724213130920184;  // std dev = 1.159, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.40969012441415553;  // std dev = 1.023, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.1368860080714734;  // std dev = 0.042, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.23047779824639963;  // std dev = 0.146, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else return 0.32525169749826277;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.06787407170324249;  // std dev = 0.769, 99.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=4 */
%   | | | else return -0.043703938701918785;  // std dev = 0.873, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.37157283712041106;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09575819732815942;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.21672686778453099;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09056903923042021;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.019591312043843283;  // std dev = 1.709, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18957663036376574;  // std dev = 0.112, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0.2382773832736566;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.19995855968942344;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2446000689120392;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2651619054951188;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07292302292608409;  // std dev = 0.686, 151.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=2 */
%   | | | else return -0.03517189434371496;  // std dev = 1.061, 62.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0013401510129796043;  // std dev = 1.134, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return -0.030598715537798478;  // std dev = 1.356, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.13603520112948375;  // std dev = 0.983, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.16986267348338246;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.05458721154030742;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.17581392011296687;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.21516201217199776;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.24939598767324606;  // std dev = 0.108, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07602106673880196;  // std dev = 0.050, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.37389032450115056;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.14927238396906756;  // std dev = 0.043, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09774040738532808;  // std dev = 1.684, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.19316307416317488;  // std dev = 0.919, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.13278719119576252;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0678981727213891;  // std dev = 0.031, 173.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.04212330344342537;  // std dev = 0.147, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.07126944809881242;  // std dev = 0.202, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20370623719419134;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.010358298327105454;  // std dev = 0.441, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.02648128328915722;  // std dev = 0.952, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.026', 'seconds']
Refined model CLL: -0.108954


******************************************
Best model found
******************************************
Results 

CLL : -0.106709 

AUC ROC : 0.994222 

AUC PR : 0.372489 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 8.53 

Total Inference Time : 10.499187231063843 

Total revision time: 28.076053646087644
Best scored revision CLL: -0.108954


Results 

CLL : -0.106709 

AUC ROC : 0.994222 

AUC PR : 0.372489 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 28.0996730594635 

Total Inference Time : 10.499187231063843 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.372
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return -0.07733493586822972;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.14847151574467365;  // std dev = 0.454, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7129884838057782;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030263746623646202;  // std dev = 0.271, 193.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08724074285834388;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.749379439769521;  // std dev = 0.104, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.057623221699775774;  // std dev = 3.354, 79.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5501841160104856;  // std dev = 1.361, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7293174630001366;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8195744418975275;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4133383181897445;  // std dev = 0.797, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5616620632577537;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5616620632577537;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03584782733931445;  // std dev = 3.669, 199.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=21 */
%   | | | else return 0.019367382368328558;  // std dev = 2.857, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4759567275909996;  // std dev = 3.005, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11859449894821052;  // std dev = 0.017, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.12428400416937556;  // std dev = 0.001, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1528344509645243;  // std dev = 0.140, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28376762730550087;  // std dev = 1.978, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.4374141854707845;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3122312440679117;  // std dev = 3.65e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6423123925030131;  // std dev = 0.206, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07870623592078027;  // std dev = 2.359, 227.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=9 */
%   | | else return -0.10726206703902694;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01676216723670373;  // std dev = 3.454, 305.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25800611036984933;  // std dev = 0.108, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5066563699499262;  // std dev = 1.324, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10783623956989846;  // std dev = 0.050, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.11677675720871013;  // std dev = 0.116, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2930787875445898;  // std dev = 1.404, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07335431803095041;  // std dev = 2.111, 229.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0421000183275427;  // std dev = 0.615, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20013676460658422;  // std dev = 0.073, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.221011635499598;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04017459760812099;  // std dev = 0.152, 190.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.006305386997948647;  // std dev = 1.418, 57.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=13 */
%   | | | else return 0.09595357495294767;  // std dev = 1.706, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15297291388606798;  // std dev = 0.202, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2508988586498164;  // std dev = 1.111, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0917371378763795;  // std dev = 0.032, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46365824468874545;  // std dev = 0.637, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10460281366568874;  // std dev = 0.131, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17267246609896406;  // std dev = 1.557, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.1370784980762606;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08460716551681323;  // std dev = 0.022, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08421654297109459;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.01567986046343093;  // std dev = 0.467, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.037213558423232665;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24847005361643482;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09749337433794573;  // std dev = 1.313, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.730', 'seconds']
Parameter learned model CLL:-0.111222 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 200, 0], 'true,false,false': [0.246, 29, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.454, 22, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 171, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.104, 0, 4], 'false,false,false,false': [3.354, 62, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.361, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.797, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.669, 178, 21], 'false,false,false,false': [2.857, 55, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.005, 6, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.017, 152, 0], 'false,true,false,false': [0.001, 55, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.14, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.978, 4, 73], 'true,false': [0.128, 0, 4], 'false,true,true': [3.65e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.206, 0, 23], 'false,false,true,false': [2.359, 218, 9], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.454, 214, 91], 'false,true': [0.108, 0, 13], 'false,false,true': [1.324, 1, 22], 'false,false,false,true': [0.05, 23, 0], 'false,false,false,false': [0.116, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.404, 1, 107], 'true,false': [2.111, 218, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.615, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.073, 0, 80], 'true,false,true': [0.035, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 168, 22], 'false,false,false,true': [1.418, 44, 13], 'false,false,false,false': [1.706, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.202, 3, 77], 'false,true,true,true': [1.111, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.032, 205, 0], 'false,false,true': [0.637, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.131, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.557, 2, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [0.022, 178, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.467, 9, 2], 'false,true': [0.985, 21, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.313, 13, 8]}]
{'': [0.21484375000000192, 0.2204589843750001], 'false': [0.23140495867768548, 0.2060353798126952], 'false,true': [0.07100591715976314, 2.7755575615628915e-18], 'true': [0.01868480725623786, 0.00858304754408634], 'false,true,true': [-1.4802973661668753e-16, 0.0], 'true,false': [-2.3980817331903383e-16, 0.060353798126951116]}
{'': [0.012191672105431255, 0.09803259482967878], 'false': [0.07329242681961107, 0.13894982624696303], 'false,false': [0.04338842975206607, 0.15762575367500503], 'false,false,false': [0.0026831114530012634, 0.142409424713963], 'false,true': [nan, 0.07329242681961107], 'false,false,true': [nan, 0.04338842975206607]}
{'': [0.03456696120140514, 0.09651243255089881], 'false': [nan, 0.0965124325508988], 'false,false': [-1.0449157878825003e-16, 0.08216070616160238], 'false,false,false': [0.06763107463058587, 0.12368033099928491], 'true': [0.025802893154815824, 0.125471161884345], 'true,false': [0.003300830129710608, 0.12718849795616305], 'true,true': [0.025721694670804023, 0.0], 'false,false,true': [-1.9737298215558337e-16, -1.6653345369377348e-16]}
{'': [0.06839620566319428, 0.00023556713133459904], 'false': [7.722809201898319e-06, 0.00046804986122146134], 'false,false': [nan, 0.00046804986122146134], 'false,false,false': [nan, 0.00046804986122146134], 'false,true': [nan, 7.722809201894028e-06], 'false,true,false': [1.907815485515195e-06, 2.371705635117006e-08]}
{'': [0.04960794461863265, 0.0661576905767416], 'false': [7.836868409118753e-17, 0.06387753261644252], 'false,false': [0.06586424258739575, -6.1679056923619804e-18], 'false,false,true': [0.0018396490664178314, 0.024523472586602067], 'true': [0.050807384882733, 0.004077245554763492], 'false,true': [7.836868409118753e-17, nan]}
{'': [0.03912277874184057, 0.0928888274992623], 'false': [0.0008936205053333018, 0.10342908526450724], 'false,false': [0.07627160063108562, 0.00031418921483820456], 'true': [nan, 0.03912277874183996], 'true,false': [nan, 0.03912277874184057], 'false,false,false': [0.00010924518111235636, 0.00043219899011246707]}
{'': [0.048316329298806165, 0.021033856572930904], 'true': [0.01825787032725791, 0.01946119051161438], 'false': [nan, 0.021033856572930904], 'false,false': [nan, 0.021033856572930904], 'false,false,false': [nan, 0.021033856572930904]}
{'': [9.108601623098172e-05, 0.035671260467902074], 'false': [nan, 0.035671260467901804], 'false,false': [0.02313818170370799, 0.05969451550540174], 'false,false,false': [0.035296184374887525, 0.1039731648129532], 'true': [6.703690266113838e-05, 0.000627918622633894], 'true,false': [0.000627918622633894, nan]}
{'': [0.040775138757412066, 0.03168163424174298], 'false': [0.019216200198485998, 0.07340454163353574], 'false,false': [0.023869323435309824, 0.00040958348872542426], 'false,true': [0.037437119493960655, 5.004916296879887e-06], 'false,true,true': [0.037437119493960655, nan], 'false,false,false': [nan, 0.00040958348872542426]}
{'': [0.02272515049160074, 0.05045673065312543], 'false': [0.029371513256664938, 0.07937969624594264], 'false,false': [0.0, 0.08212359279573829], 'false,false,false': [nan, 0.08212359279573829], 'true': [0.02318940223026382, 0.0013000520667254588], 'true,true': [0.025252973003893647, 1.9644133243355382e-05], 'true,false': [2.7947460395217655e-06, 0.0089021705553308], 'true,false,false': [-4.89804275569922e-18, 0.019808152417490663]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 19.9
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8275366902015522;  // std dev = 0.172, 98.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=95 */
%   | | else return 0.6581489350995123;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.13109837672844524;  // std dev = 0.103, 186.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7305740407145316;  // std dev = 0.168, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.22561021531350703;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.725610215313507;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.780261168673797;  // std dev = 0.130, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.663110215313507;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12662905626929183;  // std dev = 6.32e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15937394842092611;  // std dev = 1.973, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.1659686125817976;  // std dev = 2.299, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5161356030415408;  // std dev = 1.710, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.42700885887179346;  // std dev = 1.316, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.5614017892398696;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.648003692519948;  // std dev = 0.227, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5795744094885826;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5767273509853662;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11327389279956997;  // std dev = 1.30e-07, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11459085790463587;  // std dev = 1.978, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.1642406470264846;  // std dev = 2.249, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), tweets(D, F) )
%   | | then if ( follows(G, A), follows(G, D) )
%   | | | then return 0.44259285705510604;  // std dev = 0.344, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.2863280068596034;  // std dev = 1.800, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.4425822781944914;  // std dev = 0.068, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.6652839290170198;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return 0.4533965950199559;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6656476016521229;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7302187754850481;  // std dev = 0.221, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10238497266466369;  // std dev = 2.95e-09, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return -0.19094491666665495;  // std dev = 0.230, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(D, F), follows(A, D) )
%   | | | then return 0.316777291533284;  // std dev = 1.000, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.13515489735630476;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.4250815306255189;  // std dev = 0.150, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.39862759169905565;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.12063892337651275;  // std dev = 0.969, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.33065843072071965;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4155711182716734;  // std dev = 0.529, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07838259819433467;  // std dev = 2.015, 253.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=9 */
%   | | else return -0.09335121196179676;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.21647148185936835;  // std dev = 0.217, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | else return -0.08692527377912822;  // std dev = 7.74e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.2770602672635921;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.0219219268290404;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.06413692646930813;  // std dev = 0.146, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.28342037449468055;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16730086817129958;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.48138473793854186;  // std dev = 0.112, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.1227287775670298;  // std dev = 0.038, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, C), tweets(C, D) )
%   | | then return 0.20021891845975492;  // std dev = 0.153, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.23711444642622345;  // std dev = 0.033, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.22456163163228815;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return -0.2723343464759742;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.053829203796078515;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2528469089732065;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then return -0.05995970725353185;  // std dev = 0.076, 226.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.014566407016737894;  // std dev = 1.319, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.021389529404968754;  // std dev = 1.640, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.12428362671753554;  // std dev = 1.675, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.18717258675302048;  // std dev = 0.085, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.20943272953089884;  // std dev = 0.031, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.27095369908870603;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.11762426454868839;  // std dev = 0.315, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return -0.07562627020673914;  // std dev = 0.021, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17791861379200943;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0029070477594978525;  // std dev = 1.131, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.08388489030593808;  // std dev = 1.455, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.1685107987192135;  // std dev = 0.034, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.05872229153898759;  // std dev = 1.331, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.20767476598551904;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A) )
%   | | then return -0.09493131501750185;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.15337107648566647;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18587662597397514;  // std dev = 0.032, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07075415557188176;  // std dev = 0.016, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3974461700306723;  // std dev = 0.072, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12942331145982394;  // std dev = 0.026, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13724323366424285;  // std dev = 0.145, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14443184619685404;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06294159950411567;  // std dev = 0.032, 200.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23085349316818204;  // std dev = 0.226, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09965846164291818;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.01999223277488978;  // std dev = 0.193, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14151143519703469;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.019285837469100453;  // std dev = 0.434, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.022412432586698266;  // std dev = 1.022, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.275', 'seconds']
Refined model CLL: -0.102485


******************************************
Best model found
******************************************
Results 

CLL : -0.102606 

AUC ROC : 0.99381 

AUC PR : 0.320964 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 19.9 

Total Inference Time : 13.76679515838623 

Total revision time: 44.009467288970946
Best scored revision CLL: -0.102485


Results 

CLL : -0.102606 

AUC ROC : 0.99381 

AUC PR : 0.320964 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 44.0330867023468 

Total Inference Time : 13.76679515838623 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.176
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.05851773156715445;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.736684656333645;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.055542263269307356;  // std dev = 0.235, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09906915556631568;  // std dev = 1.150, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7763394517212514;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.13567644987305055;  // std dev = 2.096, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.588406735189609;  // std dev = 0.167, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6190495103528424;  // std dev = 0.110, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5725157817997065;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03366801673311554;  // std dev = 1.853, 46.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=5 */
%   | | | else return 0.07802996961560055;  // std dev = 2.028, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4974415207463394;  // std dev = 1.655, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12334860716013726;  // std dev = 0.064, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.1337276042198021;  // std dev = 0.037, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17328806042698677;  // std dev = 0.125, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3324156431381653;  // std dev = 0.211, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3147868160032627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5324439537542494;  // std dev = 1.026, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.0806776894359047;  // std dev = 1.128, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | else return -0.0072637957395736445;  // std dev = 0.296, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01446833502631519;  // std dev = 1.276, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2511250129810501;  // std dev = 1.67e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5653545803329186;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13420753536327745;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.13725316092213696;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3180848635353879;  // std dev = 0.507, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.07740957896394506;  // std dev = 0.967, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06139493944207396;  // std dev = 1.082, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19209895311519534;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03864270473289635;  // std dev = 0.155, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.013214664159746712;  // std dev = 1.068, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return -0.019257647906754088;  // std dev = 1.242, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17286963577830206;  // std dev = 0.053, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29328609593554317;  // std dev = 0.595, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09410072813411155;  // std dev = 0.062, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.42944405716926504;  // std dev = 0.187, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11590427032561809;  // std dev = 0.089, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18887290639981702;  // std dev = 0.333, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.160831763707454;  // std dev = 0.222, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08154929796565868;  // std dev = 0.013, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10842773213936256;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.086733885042963;  // std dev = 0.648, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.009489442189206467;  // std dev = 0.587, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16059874942790864;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018919443479522093;  // std dev = 0.841, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.085', 'seconds']
Parameter learned model CLL:-0.113317 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.351, 2, 21], 'true,false,true': [2.11e-08, 26, 0], 'true,false,false': [0.276, 11, 1], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 4, 0], 'false,false': [0.471, 12, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.235, 34, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.15, 6, 2], 'false,false,false,true': [0.08, 0, 2], 'false,false,false,false': [2.096, 17, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.167, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.11, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [1.853, 41, 5], 'false,false,false,false': [2.028, 19, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.655, 2, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 29, 0], 'false,true,false,false': [0.037, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.125, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.211, 0, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.026, 1, 6], 'false,false,true,false': [1.128, 42, 2], 'false,false,false': [0.296, 14, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.276, 33, 13], 'false,true': [1.67e-08, 0, 7], 'false,false,true': [0.498, 0, 11], 'false,false,false,true': [0.067, 13, 0], 'false,false,false,false': [0.063, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.507, 0, 19], 'true,false': [0.967, 44, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.082, 12, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.017, 0, 17], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 25, 3], 'false,false,false,true': [1.068, 20, 4], 'false,false,false,false': [1.242, 24, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.053, 0, 13], 'false,true,true,true': [0.595, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.062, 40, 0], 'false,false,true': [0.187, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.089, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.333, 0, 13], 'true,true,false': [0.222, 0, 8], 'true,false,true': [0.013, 34, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.648, 3, 1], 'false,true': [0.587, 11, 3], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.841, 10, 5]}]
{'': [0.23058317656544033, 0.23040000000000005], 'true': [0.07939508506616269, 0.025623268698061006], 'false': [0.24489795918367335, 0.22222222222222232], 'false,true': [1.4802973661668753e-16, 0.0], 'true,false': [1.708035422500241e-17, 0.07638888888888894], 'false,true,true': [0.0, 0.0]}
{'': [-2.0898315757650005e-16, 0.13288745543456437], 'false': [0.055378543424433754, 0.1919460178539842], 'false,false': [0.16522193240268165, 0.19843306484575113], 'false,false,false': [0.0032337464495867385, 0.18312666840924077], 'false,false,true': [nan, 0.16522193240268165], 'false,true': [nan, 0.055378543424433754]}
{'': [0.0031893498712293102, 0.12559782806700104], 'false': [nan, 0.12559782806700096], 'false,false': [6.344131569286608e-17, 0.10914404066476156], 'false,false,false': [0.07464810724244043, 0.16453323073788234], 'true': [0.0025252239964004275, 0.00604752092380767], 'true,false': [nan, 0.00604752092380767], 'true,true': [0.0025252239964004275, nan], 'false,false,true': [nan, 6.344131569286608e-17]}
{'': [0.08305002186348763, 0.0008634092014777923], 'false': [0.00016096307104940255, 0.0009182283324317142], 'false,false': [nan, 0.0009182283324317142], 'false,false,false': [nan, 0.0009182283324317142], 'false,true': [nan, 0.00016096307104940255], 'false,true,false': [0.0001425256767902777, 0.00013432936519649775]}
{'': [0.003436968027474738, 0.08942561080211887], 'false': [0.0, 0.08942915478012037], 'false,false': [0.09008611826191218, 0.08737175271116009], 'false,false,true': [0.1503668951482076, 0.028899385932299196], 'true': [0.003436968027474738, nan], 'false,true': [0.0, nan]}
{'': [0.035403369937641364, 0.09553782154907697], 'false': [3.9650822308041306e-17, 0.10787327844700509], 'false,false': [0.02257479691272374, 0.0003194907498565086], 'true': [nan, 0.0354033699376414], 'true,false': [nan, 0.035403369937641364], 'false,false,false': [0.0003504473213798645, 0.0002862792192140917]}
{'': [0.050702028177019576, 0.05319545583148349], 'false': [nan, 0.05319545583148348], 'false,false': [nan, 0.05319545583148349], 'false,false,false': [nan, 0.05319545583148349], 'true': [0.013513751676791258, 0.020340845916134626]}
{'': [1.6824869610390482e-05, 0.04051156270096592], 'false': [nan, 0.04051156270096592], 'false,false': [0.023956276268322387, 0.04877610476678374], 'false,false,false': [0.04750003684892318, 0.04974809334042973], 'true': [1.6824869610390482e-05, nan]}
{'': [0.0028445147180358177, 0.04402144555779126], 'false': [0.03239251038383529, 0.06812590262104895], 'false,false': [0.004981923950038126, 0.0005629591893989606], 'false,true': [0.032132951208032674, 9.616237109263959e-05], 'false,true,true': [0.032132951208032674, nan], 'false,false,false': [nan, 0.0005629591893989606]}
{'': [0.024470851203435152, 0.03604557554577719], 'false': [0.024579523605080127, 0.045430360487503124], 'false,false': [0.0, 0.047204487078293965], 'false,false,false': [nan, 0.04720448707829397], 'true': [0.007809197324164148, 0.012584923108086423], 'true,false': [4.966107665269712e-06, 0.06200307189699393], 'true,false,false': [0.0, 0.10496211538337755], 'true,true': [0.008529018142370205, 0.006152727833369082]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.669
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.83e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7457631362714745;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12790644362818882;  // std dev = 0.050, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15619471171805724;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.002041639617118063;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5548663652456886;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.5942213113817162;  // std dev = 0.157, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11338740872984097;  // std dev = 0.036, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.001035909036957915;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.2823806183327624;  // std dev = 1.284, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.4233918719430527;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then return 0.46254757327671253;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6652184951487051;  // std dev = 0.192, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.1033710977105506;  // std dev = 0.042, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.10127432518170229;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14566663969339325;  // std dev = 0.100, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3195413032925117;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.31200964480477655;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3194325802300923;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.06838536573460188;  // std dev = 0.547, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | | else return 0.016573335557648675;  // std dev = 0.832, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.008408048908629161;  // std dev = 0.543, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.15066685958653236;  // std dev = 0.930, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.25437335915663933;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07895997417669394;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08014043275733233;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then return -0.057618794276942074;  // std dev = 0.105, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return -0.09382119042810366;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2542991401911694;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.25157797150468;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.40964250479966463;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12159961916341716;  // std dev = 0.036, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(C, D) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.22132861951944963;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2091932357854579;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(C, D), recursion_accounttype(C, B) )
%   | | | then return 0.26848843138762973;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3043100602771346;  // std dev = 0.118, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.09120781430529419;  // std dev = 0.013, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.20914077744292342;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.08192133034328739;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.02098797982855459;  // std dev = 0.256, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.07893165071784859;  // std dev = 0.693, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.18985224828154715;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.17664387045807994;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2484442698093515;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22547596191099753;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.07668126226811876;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.09287311104206979;  // std dev = 0.051, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.020640414150390158;  // std dev = 0.142, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0.16300779936845905;  // std dev = 0.607, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16242834635780828;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.19151086494416567;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2587953096531241;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1557121863856969;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07298528194800817;  // std dev = 0.006, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.18564617007384698;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.32330426522999206;  // std dev = 0.233, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.09221244104585068;  // std dev = 0.071, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.2017937528231842;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.1484647023443819;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.002625858519991864;  // std dev = 0.847, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.17845958926495945;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.05678296325913441;  // std dev = 0.060, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then return -0.002124926869167182;  // std dev = 0.100, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.1063153419003357;  // std dev = 0.353, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1712541467719526;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.034528557209240786;  // std dev = 0.353, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.052314282614466;  // std dev = 0.535, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.834', 'seconds']
Refined model CLL: -0.100333


******************************************
Best model found
******************************************
Results 

CLL : -0.099436 

AUC ROC : 0.993173 

AUC PR : 0.420355 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 4.669 

Total Inference Time : 4.257396459579468 

Total revision time: 12.812478036880492
Best scored revision CLL: -0.100333


Results 

CLL : -0.099436 

AUC ROC : 0.993173 

AUC PR : 0.420355 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 40.460195274353026 

Total Inference Time : 4.257396459579468 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.735
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8146706742299468;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.10851773156715441;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.16117923812981538;  // std dev = 0.460, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7281643902400932;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.025567265713470917;  // std dev = 0.278, 84.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0656428867278323;  // std dev = 1.283, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.816046999487969;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06961305438825531;  // std dev = 3.143, 60.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5910202563468496;  // std dev = 0.310, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5639392428942599;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6637005086387665;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5639392428942599;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5639392428942599;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.004983673017989038;  // std dev = 2.929, 95.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=13 */
%   | | | else return 0.0901831678079647;  // std dev = 2.515, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5172402944421745;  // std dev = 2.075, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12193655679255849;  // std dev = 0.003, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.13263639967443655;  // std dev = 0.000738, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16625820383012607;  // std dev = 0.184, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33207932410428387;  // std dev = 0.345, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3049121365029212;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.670413647372247;  // std dev = 0.177, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08682465338603992;  // std dev = 1.641, 108.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=4 */
%   | | else return -0.020257578366082864;  // std dev = 0.261, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02702998845457012;  // std dev = 1.993, 95.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=32 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24390636207446442;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5675943144038778;  // std dev = 0.608, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1280314641944129;  // std dev = 0.119, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.12078645808155218;  // std dev = 0.088, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28865138066936263;  // std dev = 0.917, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.08289223347935686;  // std dev = 1.418, 118.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06065915745923843;  // std dev = 1.209, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15460178312747924;  // std dev = 0.988, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04715402531908289;  // std dev = 0.177, 73.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.0031513952540960163;  // std dev = 1.443, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return 0.08656837185517383;  // std dev = 1.369, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18241644995368528;  // std dev = 0.060, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28244816394940164;  // std dev = 0.676, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09425463531618561;  // std dev = 0.038, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3415610853292119;  // std dev = 1.160, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11150129183939846;  // std dev = 0.171, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16303474153854022;  // std dev = 0.973, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.15710203791833535;  // std dev = 0.224, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.09006806336932319;  // std dev = 0.287, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09454632472596584;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.009004490280137592;  // std dev = 0.725, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.02388398535043539;  // std dev = 1.193, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13997749694264128;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.002080582520032958;  // std dev = 1.136, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.752', 'seconds']
Parameter learned model CLL:-0.111397 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.383, 2, 44], 'true,false,true': [6.83e-08, 68, 0], 'true,false,false': [0.18, 29, 1], 'false,true,true,true': [1.195, 2, 5], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.46, 23, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.278, 74, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.283, 25, 2], 'false,false,false,true': [0.052, 0, 3], 'false,false,false,false': [3.143, 46, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.31, 0, 25], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.076, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [2.11e-08, 0, 9], 'false,false,false,true': [2.929, 82, 13], 'false,false,false,false': [2.515, 28, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.075, 3, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.003, 63, 0], 'false,true,false,false': [0.000738, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.184, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.345, 0, 29], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 14], 'false,false,true,false': [1.641, 104, 4], 'false,false,false': [0.261, 25, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.993, 63, 32], 'false,true': [0.005, 0, 11], 'false,false,true': [0.608, 0, 19], 'false,false,false,true': [0.119, 28, 0], 'false,false,false,false': [0.088, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.917, 1, 45], 'true,false': [1.418, 114, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.209, 18, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.988, 1, 33], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.177, 63, 10], 'false,false,false,true': [1.443, 40, 8], 'false,false,false,false': [1.369, 15, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.06, 0, 29], 'false,true,true,true': [0.676, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.038, 82, 0], 'false,false,true': [1.16, 1, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.171, 44, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.973, 1, 34], 'true,true,false': [0.224, 0, 10], 'true,false,true': [0.287, 63, 0], 'true,false,false,true': [0.021, 19, 0], 'true,false,false,false': [0.725, 7, 1], 'false,true': [1.193, 32, 7], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.136, 20, 8]}]
{'': [0.214843750000001, 0.19901144640998908], 'true': [0.04158790170132436, 0.01009995835068722], 'false': [0.18311533888228312, 0.21120293847566585], 'false,true': [0.17283950617283939, 2.7755575615628915e-18], 'false,true,true': [0.20408163265306106, 0.0], 'true,false': [6.857259857978908e-17, 0.03222222222222228]}
{'': [0.0, 0.11732015859505959], 'false': [0.07702348726159976, 0.15188040665275024], 'false,false': [0.060979891354018705, 0.18208593585449176], 'false,false,false': [0.0009097172550400767, 0.16461314514650632], 'false,true': [nan, 0.07702348726159976], 'false,false,true': [nan, 0.060979891354018705]}
{'': [0.004047994217946197, 0.12676588510082545], 'false': [nan, 0.1267658851008265], 'false,false': [8.074349270001139e-17, 0.11471184719429907], 'false,false,false': [0.09027893967187531, 0.1709268887263478], 'true': [0.003850251770501245, 0.0033191418631717817], 'true,true': [0.003850251770501245, nan], 'true,false': [0.0, 0.0019374449484924987], 'false,false,true': [0.0, 4.9343245538895844e-17]}
{'': [0.06622961748185902, 0.0007185927336734838], 'false': [1.4583106663054209e-05, 0.0006480695722072976], 'false,false': [nan, 0.0006480695722072976], 'false,false,false': [nan, 0.0006480695722072976], 'false,true': [nan, 1.4583106663054209e-05], 'false,true,false': [1.0243275148197604e-07, 4.952171445390699e-08]}
{'': [0.00409456939906865, 0.07895303595822846], 'false': [-2.0185873175002847e-17, 0.07823200584901686], 'false,false': [0.08058538111097177, 0.06799769667631354], 'false,false,true': [0.0022350715526021476, 0.02494077306551941], 'true': [0.00409456939906865, nan], 'false,true': [-2.0185873175002847e-17, nan]}
{'': [0.041810301291256825, 0.09293007696339917], 'false': [2.050820486351493e-06, 0.10430909796151476], 'false,false': [0.019459676130990318, 0.0004773200343702475], 'true': [nan, 0.04181030129125682], 'true,false': [nan, 0.041810301291256825], 'false,false,false': [0.0005048066198238653, 0.00040554278142613284]}
{'': [0.04524374580486982, 0.047170269804710986], 'false': [nan, 0.047170269804711], 'false,false': [nan, 0.047170269804710986], 'false,false,false': [nan, 0.047170269804710986], 'true': [0.018269328582813514, 0.01703935370905745]}
{'': [0.028692810310186785, 0.044798508698873314], 'false': [nan, 0.044798508698873536], 'false,false': [0.03129659969859447, 0.055285288734295945], 'false,false,false': [0.04335376982109108, 0.07209132235708549], 'true': [0.028692810310186785, nan]}
{'': [0.003654943296990465, 0.039660706916061404], 'false': [0.026208196255128657, 0.06222688039133632], 'false,false': [0.08972161037238055, 0.0006675284448926258], 'false,true': [0.024033008323402265, 1.7203407829222478e-05], 'false,true,true': [0.024033008323402265, nan], 'false,false,false': [nan, 0.0006675284448926258]}
{'': [0.025668316840333213, 0.04013840289482249], 'false': [0.03648729988825063, 0.04418619218657984], 'false,false': [0.0, 0.04607464483751713], 'false,false,false': [nan, 0.04607464483751713], 'true': [0.02217821378651394, 0.007580495321615161], 'true,true': [0.027072044061266138, 0.005022432402023843], 'true,false': [0.0013037890668284886, 0.0217455082692766], 'true,false,false': [2.337605427498548e-05, 0.06578991841027076]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.056
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.08921948595311938;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.6361400788776211;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.042337945013045906;  // std dev = 1.965, 61.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=6 */
%   | | | else return -0.1254446385283914;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.06866651123348703;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.07461302870134845;  // std dev = 0.822, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.09204273612050926;  // std dev = 2.806, 55.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.40405206104801905;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.24250468440316533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5758380177364987;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10426629808787326;  // std dev = 0.841, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | | | else return 0.014497809562475324;  // std dev = 2.120, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10920313540611382;  // std dev = 2.380, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return 0.015382730837874023;  // std dev = 1.410, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then return 0.4309086127034121;  // std dev = 0.160, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.04976935106380036;  // std dev = 1.014, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4479523469544089;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6993147071362087;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7499366556020551;  // std dev = 0.203, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.11627505952900404;  // std dev = 0.073, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.10965107356597667;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.14944238989822076;  // std dev = 0.056, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.31780069791618093;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.4013653165433361;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3418463594372312;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5367551212087954;  // std dev = 0.117, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0872179008475847;  // std dev = 1.439, 107.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=4 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.10290437783324104;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.1889679347315471;  // std dev = 1.056, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2629784325640074;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.0031848025374687783;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.42258399132301744;  // std dev = 0.108, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09547269155191891;  // std dev = 0.034, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.09375048447772714;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26318550606500835;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.47797687807133055;  // std dev = 0.359, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.37211117433818985;  // std dev = 1.027, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.11879581704258654;  // std dev = 0.019, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.20905205979818983;  // std dev = 0.006, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.07462596020072454;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.23054385032745858;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.2540880373180623;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23310561224614745;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.38954006351405734;  // std dev = 0.301, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08845206842903111;  // std dev = 0.073, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.01699537503315322;  // std dev = 1.310, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return -0.058007229186171114;  // std dev = 1.016, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.17454839659810434;  // std dev = 1.83e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.1806608319905771;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2203399474027277;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.20899155369939537;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19405594643809643;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2743512842395953;  // std dev = 0.064, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08873409910471922;  // std dev = 0.155, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.49569214394627015;  // std dev = 0.200, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.003866046961101323;  // std dev = 0.992, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1562405898177381;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(E, A) )
%   | | then return 0.027307804632234766;  // std dev = 0.667, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16550100259502878;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16247947190081052;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.25384032841884563;  // std dev = 0.235, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07891713359159439;  // std dev = 0.014, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.23418503410961083;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4103075582044438;  // std dev = 0.270, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11052429263358295;  // std dev = 0.015, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.07443796682646654;  // std dev = 0.972, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.1431550045674307;  // std dev = 0.102, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.18082228790634458;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.0668377555017319;  // std dev = 0.051, 84.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.057512547921023456;  // std dev = 0.090, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | else return 0.01927347510377913;  // std dev = 0.183, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.14818634894107519;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.03804339330636388;  // std dev = 0.977, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return -0.02658915174099012;  // std dev = 0.752, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.193', 'seconds']
Refined model CLL: -0.101906


******************************************
Best model found
******************************************
Results 

CLL : -0.10673 

AUC ROC : 0.993457 

AUC PR : 0.40257 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 5.056 

Total Inference Time : 7.105626106262207 

Total revision time: 18.317852369308472
Best scored revision CLL: -0.101906


Results 

CLL : -0.10673 

AUC ROC : 0.993457 

AUC PR : 0.40257 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 45.965569606781 

Total Inference Time : 7.105626106262207 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.998
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8278459047964823;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.03470820775763064;  // std dev = 0.309, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.2152917922423695;  // std dev = 0.479, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7107230548414842;  // std dev = 1.013, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.004887256499211043;  // std dev = 0.297, 120.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08864605711152783;  // std dev = 1.286, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.441338513706119;  // std dev = 1.163, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.11593142239847505;  // std dev = 3.744, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5874231407534063;  // std dev = 0.335, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.2734792384533238;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.659857606794691;  // std dev = 0.134, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6904387783205714;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6124228237100755;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5649880406254599;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018172102684513865;  // std dev = 3.666, 161.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=21 */
%   | | | else return 0.11175860732796868;  // std dev = 3.155, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5052093931696018;  // std dev = 2.891, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12393091073878222;  // std dev = 0.038, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return -0.13782106996254895;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16718946798064901;  // std dev = 0.282, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3093366683294122;  // std dev = 1.099, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return 0.48973098246461877;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3060063336110899;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5015882286674054;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6374962406418164;  // std dev = 0.229, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.10142161725214506;  // std dev = 1.595, 156.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=4 */
%   | | else return -0.028887459864715512;  // std dev = 0.282, 52.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021891618458947087;  // std dev = 2.564, 159.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=49 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2607187880699711;  // std dev = 0.173, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4850128891637844;  // std dev = 1.559, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1261046151755786;  // std dev = 0.180, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.1328698922624207;  // std dev = 0.206, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28707067566053807;  // std dev = 1.609, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | else return -0.08318148065841201;  // std dev = 1.409, 140.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04680820329784522;  // std dev = 1.759, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16838300083273236;  // std dev = 0.991, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else if ( follows(A, E) )
%   | | then return 0.2571686988660271;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.025785158579490798;  // std dev = 0.168, 111.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.029153484203623157;  // std dev = 1.868, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.052736429750692655;  // std dev = 2.052, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12287115005946633;  // std dev = 0.249, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22733005655007493;  // std dev = 1.593, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09594123836653472;  // std dev = 0.067, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4167563847964416;  // std dev = 0.592, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11533292872033622;  // std dev = 0.239, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1905019614788648;  // std dev = 1.058, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else return 0.08871230930503729;  // std dev = 1.020, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08684705955215975;  // std dev = 0.036, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09078457738229043;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.015620793351459435;  // std dev = 0.812, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.018844285997536504;  // std dev = 1.389, 49.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21260294999294393;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0033188632613679516;  // std dev = 1.588, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.331', 'seconds']
Parameter learned model CLL:-0.11269 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.393, 2, 64], 'true,false,true': [8.16e-08, 109, 0], 'true,false,false': [0.309, 25, 3], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.816, 1, 2], 'false,true,false': [2.79e-08, 31, 0], 'false,false': [0.479, 27, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.013, 1, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.297, 103, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.286, 36, 2], 'false,false,false,true': [1.163, 2, 4], 'false,false,false,false': [3.744, 56, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.335, 0, 36], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.134, 0, 2], 'true,false,false': [0.136, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.164, 0, 4], 'false,false,true,false': [2.11e-08, 0, 11], 'false,false,false,true': [3.666, 140, 21], 'false,false,false,false': [3.155, 39, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.891, 6, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.038, 105, 0], 'false,true,false,false': [0.003, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.282, 69, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.099, 1, 41], 'true,false': [0.0, 0, 1], 'false,true,true': [0.015, 0, 14], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.229, 0, 25], 'false,false,true,false': [1.595, 152, 4], 'false,false,false': [0.282, 45, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.564, 110, 49], 'false,true': [0.173, 0, 16], 'false,false,true': [1.559, 2, 28], 'false,false,false,true': [0.18, 50, 0], 'false,false,false,false': [0.206, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.609, 2, 70], 'true,false': [1.409, 135, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.759, 33, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.991, 1, 46], 'true,false,true': [0.005, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 94, 17], 'false,false,false,true': [1.868, 54, 12], 'false,false,false,false': [2.052, 27, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.249, 3, 42], 'false,true,true,true': [1.593, 2, 29], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.067, 127, 0], 'false,false,true': [0.592, 0, 22], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.239, 55, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.058, 1, 51], 'true,true,false': [1.02, 1, 13], 'true,false,true': [0.036, 100, 0], 'true,false,false,true': [0.023, 20, 0], 'true,false,false,false': [0.812, 10, 3], 'false,true': [1.389, 38, 11], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.588, 29, 13]}]
{'': [0.2211167463418187, 0.2123183391003472], 'true': [0.02938475665748315, 0.021418296126591647], 'false': [0.19037317468902057, 0.22959183673469336], 'false,true': [0.07638888888888877, 2.5069552168955147e-17], 'false,true,true': [-2.9605947323337506e-16, 0.22222222222222224], 'true,false': [6.111319401606367e-17, 0.0956632653061223]}
{'': [0.02095191022336322, 0.12340665238657954], 'false': [0.08805944019165599, 0.15552457284977214], 'false,false': [0.043521119898701104, 0.19002650000650514], 'false,false,false': [0.22526908942973814, 0.17975197622695355], 'false,true': [nan, 0.08805944019165599], 'false,false,true': [nan, 0.043521119898701104]}
{'': [0.021876986768396493, 0.12418046093943828], 'false': [nan, 0.12418046093943842], 'false,false': [0.0022400583856344507, 0.11200313808235329], 'false,false,false': [0.08349307335853787, 0.18436350625922457], 'true': [0.02252610358621811, 0.0062777984211057625], 'true,true': [0.0031206690500567014, 0.0], 'true,false': [0.0090002345851381, 0.004604844321791202], 'false,false,true': [0.006750175938853575, 4.0371746350005693e-17]}
{'': [0.08443189824558, 0.0008360396415607292], 'false': [3.425111937645346e-05, 0.0011494006489930052], 'false,false': [nan, 0.0011494006489930052], 'false,false,false': [nan, 0.0011494006489930052], 'false,true': [nan, 3.4251119376455296e-05], 'false,true,false': [1.3888106466945836e-05, 4.5913587218282537e-07]}
{'': [0.028844961291003165, 0.08081996041481378], 'false': [0.0023959182750131684, 0.07948027351145946], 'false,false': [0.07934205035924287, 0.07928415842795465], 'false,false,true': [0.002089294366199965, 0.016307990226135643], 'true': [0.028774952861034226, 0.0], 'false,true': [1.6903449735673958e-05, 0.0]}
{'': [0.04134995216854746, 0.08418894697766362], 'false': [0.0018752028721464031, 0.08784481868566431], 'false,false': [0.08103022575486651, 0.0007834811134963263], 'true': [nan, 0.04134995216854733], 'true,false': [nan, 0.04134995216854746], 'false,false,false': [0.0006485838115602927, 0.0009033966268423329]}
{'': [0.05231808260689667, 0.06063410930591861], 'false': [nan, 0.06063410930591867], 'false,false': [nan, 0.06063410930591861], 'false,false,false': [nan, 0.06063410930591861], 'true': [0.03596378184164888, 0.014171132524407706]}
{'': [0.020342450837629384, 0.05017354150657576], 'false': [nan, 0.050173541506575665], 'false,false': [0.02809240349759393, 0.07223736069257233], 'false,false,false': [0.05288294647767119, 0.09788364766438144], 'true': [0.020885844654117528, 1.1547002459935674e-05], 'true,false': [1.1547002459935674e-05, nan]}
{'': [0.06197338535182559, 0.043616825474888855], 'false': [0.0325632569600256, 0.06307790933019959], 'false,false': [0.015948359441463677, 0.001038575697478048], 'false,true': [0.08182208928052312, 3.54333590752532e-05], 'false,true,true': [0.08182208928052312, nan], 'false,false,false': [nan, 0.001038575697478048]}
{'': [0.028823026922528933, 0.04898690227772145], 'false': [0.03935939940607734, 0.05917978071504399], 'false,false': [0.0, 0.06000696419467703], 'false,false,false': [nan, 0.06000696419467712], 'true': [0.034436680973487885, 0.005912177104887311], 'true,true': [0.02150815300289275, 0.07429361058409807], 'true,false': [1.2717612589709936e-05, 0.022704769663004637], 'true,false,false': [2.7454952357536255e-05, 0.050731065582749486]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.484
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.026466449515872396;  // std dev = 0.319, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.7273549027591195;  // std dev = 0.195, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(C, D), follows(C, A) )
%   | | | then return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(C, F) )
%   | | then return -0.12653454528250987;  // std dev = 0.036, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return 0.32587353461117996;  // std dev = 0.934, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.5372715408053741;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.10087330148630377;  // std dev = 2.964, 61.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return -0.024795203973699123;  // std dev = 2.295, 54.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5221693848076367;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.438234502337725;  // std dev = 0.733, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6316353516914018;  // std dev = 0.143, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.574351088118277;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1084936486672438;  // std dev = 0.754, 81.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=1 */
%   | | | else return 0.012596387462069763;  // std dev = 2.316, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.05036523281020348;  // std dev = 2.002, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.13726673188272012;  // std dev = 2.876, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4301823356364654;  // std dev = 0.294, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4643480444872519;  // std dev = 0.075, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.561249694090086;  // std dev = 0.103, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.721986449905927;  // std dev = 0.234, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.11071487544927858;  // std dev = 0.114, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.11204722091575185;  // std dev = 0.058, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.1515031542783265;  // std dev = 0.109, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32273955756693135;  // std dev = 0.023, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.19552413740438626;  // std dev = 0.859, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.35440613269030646;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5093223843930941;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3336282161602023;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.47637442692816584;  // std dev = 0.284, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.08770194183633573;  // std dev = 1.358, 143.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=4 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.11200026794379273;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.05045201327156596;  // std dev = 1.756, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2655152978375757;  // std dev = 0.022, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.0905290770412876;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.30783840176936;  // std dev = 0.118, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08799855349321975;  // std dev = 0.040, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.06283877059661332;  // std dev = 0.102, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2717800294275213;  // std dev = 0.058, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3331086505419813;  // std dev = 1.242, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.4682336335149925;  // std dev = 0.530, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.12067252712871679;  // std dev = 0.020, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.20980347623026316;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.19019652376973692;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.22885368142019835;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23149937160548464;  // std dev = 0.039, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A), follows(A, G) )
%   | then return -0.04337934086792977;  // std dev = 0.109, 110.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return -0.021633662443265107;  // std dev = 1.223, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0.02787229439683894;  // std dev = 1.457, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else if ( follows(J, A), tweets(J, K) )
%   | | | then return 0.08155012859561363;  // std dev = 0.512, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.05058475898067417;  // std dev = 1.557, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.1413818165163744;  // std dev = 0.986, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.22537608285706098;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20642750845166588;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.3269533322563722;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.19451737350507983;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.301024605346598;  // std dev = 0.376, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08273221700277807;  // std dev = 0.108, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.009930372558850523;  // std dev = 1.710, 64.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=16 */
%   | | | else return 0.1393278194457497;  // std dev = 1.191, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.16081595108974633;  // std dev = 0.013, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.06013485470412307;  // std dev = 0.304, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.06500752479026212;  // std dev = 0.305, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.12292780777276233;  // std dev = 0.931, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.24434735318013331;  // std dev = 0.351, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.07704275052741612;  // std dev = 0.011, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.28237770430643616;  // std dev = 0.894, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.4695054159064997;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11967116841372966;  // std dev = 0.023, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.09935774406079595;  // std dev = 0.216, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.16889722406139462;  // std dev = 0.031, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.06364725846078598;  // std dev = 0.059, 144.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.18717687062543373;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.01686216930219176;  // std dev = 0.748, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.09066740599615825;  // std dev = 0.698, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1276682635229056;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.011232495431076036;  // std dev = 0.861, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.08018866321783653;  // std dev = 1.136, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '28.748', 'seconds']
Refined model CLL: -0.105477


******************************************
Best model found
******************************************
Results 

CLL : -0.101264 

AUC ROC : 0.992969 

AUC PR : 0.342537 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 10.484 

Total Inference Time : 19.228614330291748 

Total revision time: 38.03933513832092
Best scored revision CLL: -0.105477


Results 

CLL : -0.101264 

AUC ROC : 0.992969 

AUC PR : 0.342537 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 65.68705237579346 

Total Inference Time : 19.228614330291748 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.294
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8228548174524533;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.05094197399139684;  // std dev = 0.287, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.21000078695136415;  // std dev = 0.478, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7308443995574856;  // std dev = 0.192, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.019221323353752665;  // std dev = 0.283, 151.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08071803395361352;  // std dev = 1.608, 52.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5026005053612972;  // std dev = 1.130, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.12399541519858713;  // std dev = 4.501, 113.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5788780600896309;  // std dev = 0.358, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7295685493181328;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5187144312325379;  // std dev = 0.855, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.599813994268032;  // std dev = 0.172, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.561265789071043;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010188641461982294;  // std dev = 4.327, 214.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=30 */
%   | | | else return 0.08485827228027867;  // std dev = 3.631, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.541054191071519;  // std dev = 2.622, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1231189635780103;  // std dev = 0.031, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | | else return -0.13368046197055894;  // std dev = 0.007, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15952590382054332;  // std dev = 0.259, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2793815668745155;  // std dev = 1.692, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | else return 0.46243960149058105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2963931545659528;  // std dev = 0.014, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.4948075339493111;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6302203202406245;  // std dev = 0.266, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10059235847184672;  // std dev = 1.787, 202.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=5 */
%   | | else return -0.0015423652314985512;  // std dev = 0.295, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019413973659362888;  // std dev = 3.089, 189.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24993780899270607;  // std dev = 0.171, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4780668970468316;  // std dev = 1.669, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12741008579583799;  // std dev = 0.189, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.1316118208673666;  // std dev = 0.224, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28758845686916895;  // std dev = 1.652, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return -0.0854977755677775;  // std dev = 1.685, 207.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06230069466205682;  // std dev = 1.899, 61.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17059116288234638;  // std dev = 0.993, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else if ( follows(A, E) )
%   | | then return 0.24951440986213602;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.035528515692741784;  // std dev = 0.170, 137.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.008314069929471264;  // std dev = 1.868, 87.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=21 */
%   | | | else return 0.09476061284126552;  // std dev = 2.147, 48.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17318042245777315;  // std dev = 0.129, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2791345812132364;  // std dev = 0.830, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09499091109605483;  // std dev = 0.097, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3866029710107991;  // std dev = 0.680, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1277868803272975;  // std dev = 0.290, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.192068018438362;  // std dev = 0.667, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.14258130515471967;  // std dev = 0.249, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.08503000942571166;  // std dev = 0.030, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09758614047437338;  // std dev = 0.025, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.02602720912892647;  // std dev = 0.912, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.0038658120303684635;  // std dev = 1.268, 70.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.10536652695907818;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005243730123425557;  // std dev = 1.835, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.469', 'seconds']
Parameter learned model CLL:-0.115075 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.701, 3, 82], 'true,false,true': [0.0, 127, 0], 'true,false,false': [0.287, 40, 4], 'false,true,true,true': [0.968, 1, 15], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.478, 35, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.192, 0, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.283, 132, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.608, 49, 3], 'false,false,false,true': [1.13, 2, 5], 'false,false,false,false': [4.501, 80, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.358, 0, 48], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [0.855, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.172, 0, 5], 'false,false,true,false': [2.98e-08, 0, 14], 'false,false,false,true': [4.327, 184, 30], 'false,false,false,false': [3.631, 57, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.622, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 146, 0], 'false,true,false,false': [0.007, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.259, 77, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.692, 3, 55], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 18], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.266, 0, 34], 'false,false,true,false': [1.787, 197, 5], 'false,false,false': [0.295, 48, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.089, 126, 63], 'false,true': [0.171, 0, 20], 'false,false,true': [1.669, 3, 41], 'false,false,false,true': [0.189, 55, 0], 'false,false,false,false': [0.224, 66, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.652, 2, 93], 'true,false': [1.685, 200, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.899, 37, 24]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 62], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 118, 19], 'false,false,false,true': [1.868, 66, 21], 'false,false,false,false': [2.147, 28, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.129, 1, 56], 'false,true,true,true': [0.83, 0, 35], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.097, 178, 0], 'false,false,true': [0.68, 0, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.29, 80, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.667, 0, 65], 'true,true,false': [0.249, 0, 17], 'true,false,true': [0.03, 133, 0], 'true,false,false,true': [0.025, 22, 0], 'true,false,false,false': [0.912, 12, 4], 'false,true': [1.268, 51, 19], 'false,false,true': [0.789, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.835, 41, 17]}]
{'': [0.2230834960937508, 0.2183280666475165], 'true': [0.03404844290657402, 0.022844635956362543], 'false': [0.2087402343749995, 0.22805212620027385], 'false,true': [0.047499999999999785, 4.794144879063176e-17], 'false,true,true': [0.05859374999999978, 0.0], 'true,false': [-2.4477358023231797e-17, 0.0826446280991734]}
{'': [0.0005739923513139455, 0.12320470264870442], 'false': [0.08019761282629957, 0.15658629559398804], 'false,false': [0.049731042428561176, 0.18733931477430948], 'false,false,false': [0.18229537314597452, 0.17929016550135798], 'false,true': [nan, 0.08019761282629957], 'false,false,true': [nan, 0.049731042428561176]}
{'': [0.0175284274163229, 0.12289353541751936], 'false': [nan, 0.12289353541752109], 'false,false': [0.001852309849748093, 0.11176826220459815], 'false,false,false': [0.08747671538577725, 0.17350173719601414], 'true': [0.0026676519777158645, 0.09669963435644835], 'true,false': [0.01654001357315349, 0.12195962504354436], 'true,true': [0.0026676519777158645, nan], 'false,false,true': [0.0059438564956365795, 6.344131569286608e-17]}
{'': [0.05415113845057375, 0.0005460439060983272], 'false': [1.9472673001169942e-05, 0.0008695330271814724], 'false,false': [nan, 0.0008695330271814724], 'false,false,false': [nan, 0.0008695330271814724], 'false,true': [nan, 1.9472673001169942e-05], 'false,true,false': [6.564638148254558e-06, 2.1988678588005794e-06]}
{'': [0.04910480533912593, 0.08157772478878247], 'false': [0.001973449447714931, 0.08113545025313243], 'false,false': [0.0796823028179724, 0.08701703528649114], 'false,false,true': [0.002073564425462033, 0.015800397798540436], 'true': [0.04938346967601478, 0.0], 'false,true': [1.1071530981269598e-05, 0.0]}
{'': [0.05049480210873765, 0.08467402215483152], 'false': [0.0014600043603275493, 0.0896431794140828], 'false,false': [0.06331442299803382, 0.0007151497622631482], 'true': [nan, 0.05049480210873749], 'true,false': [nan, 0.05049480210873765], 'false,false,false': [0.0006522209860949121, 0.0007595656010647762]}
{'': [0.04845439186959876, 0.059143501545704656], 'false': [nan, 0.05914350154570464], 'false,false': [nan, 0.059143501545704656], 'false,false,false': [nan, 0.059143501545704656], 'true': [0.02873930844087169, 0.013716393576890806]}
{'': [0.015352696093831771, 0.046517282881945544], 'false': [nan, 0.04651728288194584], 'false,false': [0.02878238239766721, 0.06171345029951012], 'false,false,false': [0.040097040072175995, 0.09607725742187295], 'true': [0.01564578789330765, 8.30833092417757e-05], 'true,false': [8.30833092417757e-05, nan]}
{'': [0.016766931713018046, 0.03604479252863885], 'false': [0.022497945627160457, 0.05953481731644665], 'false,false': [0.013992154415670989, 0.001049499105779797], 'false,true': [0.019676897481901434, 5.2899908689421597e-05], 'false,true,true': [0.019676897481901434, nan], 'false,false,false': [nan, 0.001049499105779797]}
{'': [0.020756206347891694, 0.04298736283093154], 'false': [0.022973312577887022, 0.06584906938710774], 'false,false': [0.20737804622212352, 0.05803559321004569], 'false,false,false': [nan, 0.058035593210045706], 'true': [0.006578991727329482, 0.00597005049250655], 'true,true': [0.006841082234817467, 0.0036356521651715094], 'true,false': [6.678599484932601e-06, 0.025628840719765667], 'true,false,false': [2.9487158355965724e-05, 0.051981485435039575]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 20.663
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.8236661764788228;  // std dev = 1.390, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.11700634440359356;  // std dev = 0.156, 161.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7311959456438105;  // std dev = 0.205, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7389726450076726;  // std dev = 0.197, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.12819576986553;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5594350228111021;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.1434647282103961;  // std dev = 3.451, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
%   | | | else return 0.2668095060611762;  // std dev = 2.078, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.559198345886865;  // std dev = 0.023, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.3923965844190043;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6369717134712546;  // std dev = 0.075, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.42706307350648237;  // std dev = 0.967, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5686983834665161;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10780206608212221;  // std dev = 0.670, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | | else return 0.01489202853974705;  // std dev = 2.433, 77.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1257137961137081;  // std dev = 2.716, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return 0.05721891804862416;  // std dev = 3.223, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.35223579758209256;  // std dev = 1.632, 39.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=36 */
%   | | | else return 0.49528835352737144;  // std dev = 0.471, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.41373572934871344;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1468094447793071;  // std dev = 1.501, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4750507582713203;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6862907776347713;  // std dev = 0.239, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10776705682971348;  // std dev = 0.062, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else return -0.11091155871389748;  // std dev = 0.031, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.16381160745221296;  // std dev = 0.204, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3233203153239585;  // std dev = 0.136, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.5184386165163599;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.25667989023277615;  // std dev = 0.973, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.38766094516451766;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5181062162015653;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4832015562564982;  // std dev = 0.237, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.0930000529553798;  // std dev = 1.464, 218.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=5 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.09442440103577665;  // std dev = 7.45e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.05479941669727433;  // std dev = 1.918, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.15225017280981212;  // std dev = 1.327, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.26659205418438775;  // std dev = 0.079, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.1368533444962336;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04402998496715834;  // std dev = 0.130, 124.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=14 */
%   | | else return -0.09323325228237347;  // std dev = 0.137, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2813282403904115;  // std dev = 0.040, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.14414458540103323;  // std dev = 0.969, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.43393511253104133;  // std dev = 1.095, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return -0.12376041497526732;  // std dev = 0.035, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.20575051335740224;  // std dev = 0.139, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return -0.2180539353573782;  // std dev = 0.493, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.24463487499755995;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, G) )
%   | | | then return 0.2502334797261894;  // std dev = 1.437, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.31301467939253813;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09926620600685097;  // std dev = 0.077, 193.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.044119853280469794;  // std dev = 0.141, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.14927687725265265;  // std dev = 0.526, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.06402152428719908;  // std dev = 1.599, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19444946674104693;  // std dev = 0.021, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else return 0.27465866583917553;  // std dev = 0.000141, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.0283452771214739;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3105147277155844;  // std dev = 0.352, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07847425727482073;  // std dev = 0.005, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.17828750410800392;  // std dev = 1.042, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.10706929836091764;  // std dev = 0.054, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0909883922983491;  // std dev = 0.688, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.03336347137458154;  // std dev = 1.773, 52.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then return 0.16796631536253623;  // std dev = 0.019, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.23459699220504757;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.003976858199026508;  // std dev = 0.948, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2299691969746452;  // std dev = 0.313, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.12740064373112192;  // std dev = 0.624, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07336727497163635;  // std dev = 0.004, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17918149878556866;  // std dev = 1.005, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.4017056000019397;  // std dev = 0.282, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12864901300665818;  // std dev = 0.044, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1283712018646226;  // std dev = 0.128, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.11761103162786521;  // std dev = 1.237, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1319758884171637;  // std dev = 0.970, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.06089467798804074;  // std dev = 0.052, 193.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=4 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.20700713815700997;  // std dev = 0.042, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.09026942512905377;  // std dev = 0.007, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2346185989204519;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1473247451268527;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.023292108282907516;  // std dev = 0.257, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.678', 'seconds']
Refined model CLL: -0.100354


******************************************
Best model found
******************************************
Results 

CLL : -0.097743 

AUC ROC : 0.993082 

AUC PR : 0.349173 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 20.663 

Total Inference Time : 14.544535875320435 

Total revision time: 45.563611251831055
Best scored revision CLL: -0.100354


Results 

CLL : -0.097743 

AUC ROC : 0.993082 

AUC PR : 0.349173 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 73.21132848930358 

Total Inference Time : 14.544535875320435 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.666
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7950858720364479;  // std dev = 2.561, 111.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.0812450042944271;  // std dev = 0.239, 66.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.2291166770349954;  // std dev = 0.483, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7235522712196251;  // std dev = 1.015, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0323480807186879;  // std dev = 0.267, 175.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07610829808304781;  // std dev = 1.820, 64.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6324592087153563;  // std dev = 0.977, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1442503900743705;  // std dev = 4.839, 128.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5438670599831709;  // std dev = 1.574, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7356798409117933;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5129738396672185;  // std dev = 0.860, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6017189279377698;  // std dev = 0.174, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5698800695928752;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02553787186457177;  // std dev = 4.615, 282.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=34 */
%   | | | else return 0.020159509719887635;  // std dev = 4.183, 119.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.549070965972494;  // std dev = 2.436, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1204463842207358;  // std dev = 0.060, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.12450565682020946;  // std dev = 0.005, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.167924292150199;  // std dev = 0.294, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3284273607938775;  // std dev = 0.553, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.46827814588732797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30037541258459866;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5017257029387779;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6297271530728565;  // std dev = 0.336, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10255469445784902;  // std dev = 1.785, 252.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=5 */
%   | | else return 0.018388586471086214;  // std dev = 0.309, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016533885828770214;  // std dev = 3.325, 258.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2514092975488255;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4939790677631488;  // std dev = 1.504, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12432465285819759;  // std dev = 0.191, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return -0.12339938056836812;  // std dev = 0.191, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2874261955023428;  // std dev = 1.351, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09109525195650725;  // std dev = 1.764, 265.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03937955138636679;  // std dev = 2.220, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17758486784747365;  // std dev = 0.997, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25288375918916794;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.044702522773398416;  // std dev = 0.146, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0047076062768398805;  // std dev = 2.060, 105.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=28 */
%   | | | else return 0.01352328365298878;  // std dev = 2.515, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10992969168008387;  // std dev = 0.258, 84.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2866700889815968;  // std dev = 0.908, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09052474015941128;  // std dev = 0.085, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34786465016175117;  // std dev = 1.391, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11728582839988531;  // std dev = 0.273, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15606949066655817;  // std dev = 1.827, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.11967146980393843;  // std dev = 0.891, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08125720465979933;  // std dev = 0.014, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09391975090526689;  // std dev = 0.027, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.01124594459115933;  // std dev = 0.934, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.002421494159187191;  // std dev = 1.552, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20474357117772102;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024961830085957204;  // std dev = 2.002, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.077', 'seconds']
Parameter learned model CLL:-0.110432 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.561, 7, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.239, 62, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.77e-08, 55, 0], 'false,false': [0.483, 39, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.015, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 156, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.82, 60, 4], 'false,false,false,true': [0.977, 1, 8], 'false,false,false,false': [4.839, 88, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.574, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.86, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.174, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.615, 248, 34], 'false,false,false,false': [4.183, 96, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.436, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.06, 175, 0], 'false,true,false,false': [0.005, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.294, 104, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.553, 0, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.336, 0, 39], 'false,false,true,false': [1.785, 247, 5], 'false,false,false': [0.309, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.325, 176, 82], 'false,true': [0.176, 0, 22], 'false,false,true': [1.504, 1, 52], 'false,false,false,true': [0.191, 69, 0], 'false,false,false,false': [0.191, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.351, 1, 121], 'true,false': [1.764, 258, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.22, 57, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.997, 1, 83], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 164, 19], 'false,false,false,true': [2.06, 77, 28], 'false,false,false,false': [2.515, 70, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.258, 6, 78], 'false,true,true,true': [0.908, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 204, 0], 'false,false,true': [1.391, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.273, 90, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.827, 3, 85], 'true,true,false': [0.891, 1, 19], 'true,false,true': [0.014, 142, 0], 'true,false,false,true': [0.027, 34, 0], 'true,false,false,false': [0.934, 15, 4], 'false,true': [1.552, 51, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.002, 48, 21]}]
{'': [0.21640680764699516, 0.22376512596707077], 'false': [0.2148437500000011, 0.23335067637877316], 'true': [0.05908611314016963, 0.01708884688090727], 'false,true': [7.105427357601002e-16, 6.055761952500853e-17], 'true,false': [-1.5705594006892458e-16, 0.05693296602387503], 'false,true,true': [0.0, 0.0]}
{'': [0.011984578495241122, 0.12355030964455374], 'false': [0.07116037767675754, 0.16150276010163175], 'false,false': [0.05172898132068265, 0.1924945694241613], 'false,false,false': [0.10615261380597538, 0.18290760018302157], 'false,true': [nan, 0.07116037767675754], 'false,false,true': [nan, 0.05172898132068265]}
{'': [0.04125727782744973, 0.10895018967875346], 'false': [nan, 0.10895018967875418], 'false,false': [0.0016550414705410162, 0.09719057945559313], 'false,false,false': [0.0755370804390494, 0.14703536789093558], 'true': [0.03539249543822608, 0.07494418199573905], 'true,false': [0.01596173276409396, 0.08220550765870024], 'true,true': [0.03539249543822608, nan], 'false,false,true': [0.005068564503531252, 2.3684757858670006e-16]}
{'': [0.03754239970956343, 0.0007509309488345212], 'false': [1.9034764963187745e-05, 0.0008332802427136016], 'false,false': [nan, 0.0008332802427136016], 'false,false,false': [nan, 0.0008332802427136016], 'false,true': [nan, 1.9034764963183744e-05], 'false,true,false': [2.050565267354492e-05, 5.688821759857707e-07]}
{'': [0.004173623846372771, 0.07864734119306406], 'false': [0.0018465798309110454, 0.07782708004724431], 'false,false': [0.07357497738658614, 0.09560211445242356], 'false,false,true': [0.0028898388549052356, 0.012647569271336917], 'true': [0.003977080059990892, 0.0], 'false,true': [8.340278375074118e-06, 0.0]}
{'': [0.04286393992171069, 0.08512937142984849], 'false': [0.0014012333297651512, 0.09098205720680003], 'false,false': [0.04268911045668723, 0.0005574785596784313], 'true': [nan, 0.042863939921711045], 'true,false': [nan, 0.04286393992171069], 'false,false,false': [0.0005307364639235616, 0.0005867889862332289]}
{'': [0.04368767615886716, 0.057989317871695485], 'false': [nan, 0.05798931787169548], 'false,false': [nan, 0.057989317871695485], 'false,false,false': [nan, 0.057989317871695485], 'true': [0.014954776973398151, 0.01174775751753571]}
{'': [0.011677547448526485, 0.038645881407665755], 'false': [nan, 0.03864588140766557], 'false,false': [0.02140143201830716, 0.05312884766928503], 'false,false,false': [0.040409423798653386, 0.06729570874073988], 'true': [0.011821580555798274, 9.009258110867502e-05], 'true,false': [9.009258110867502e-05, nan]}
{'': [0.06681970777418511, 0.03722698667991139], 'false': [0.022271426170339326, 0.06215722541538288], 'false,false': [0.046058590713057554, 0.0008265227942178013], 'false,true': [0.021710437313971914, 3.507414841942802e-05], 'false,true,true': [0.021710437313971914, nan], 'false,false,false': [nan, 0.0008265227942178013]}
{'': [0.028601718927743772, 0.04425814904462746], 'false': [0.03169058401857525, 0.05731678717522324], 'false,false': [0.0, 0.058067679256779435], 'false,false,false': [nan, 0.05806767925677939], 'true': [0.03846546830450175, 0.0052891543819181], 'true,true': [0.03794485547916576, 0.03967668509524875], 'true,false': [1.3886183497834029e-06, 0.01899984976135486], 'true,false,false': [2.1937707023548835e-05, 0.04586534284470284]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 40.131
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7907332047624333;  // std dev = 0.251, 89.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=83 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.12490191235811554;  // std dev = 0.129, 236.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1914822684328457;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.7065608458995427;  // std dev = 0.160, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.5662099687065599;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7328766353732266;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7400462471048441;  // std dev = 0.193, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.7327960775960684;  // std dev = 0.207, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12731593586023485;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14401910748494642;  // std dev = 3.050, 59.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=19 */
%   | | | else return 0.12053292395431457;  // std dev = 3.527, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.5751772666489173;  // std dev = 0.094, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.45761317051984535;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5669015406705588;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6146093448351525;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5763738359642921;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5204123693092751;  // std dev = 0.803, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11382847181060649;  // std dev = 1.15e-07, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0853761061082215;  // std dev = 3.879, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.195108817793338;  // std dev = 2.460, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.42105919711238354;  // std dev = 1.001, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.34002364874979735;  // std dev = 1.363, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.5753943789419574;  // std dev = 0.186, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.43017907212797807;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6711842699654331;  // std dev = 0.044, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6545005754730954;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7824609812415373;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.1028412470532263;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.16373462021734686;  // std dev = 0.241, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.3392364661610861;  // std dev = 0.023, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.12931172797636203;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.47478691587421307;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32394025830819956;  // std dev = 0.032, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.48432952365975557;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09454791003786708;  // std dev = 0.713, 156.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=1 */
%   | | | else return -0.007419959381546764;  // std dev = 1.619, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.04261883881161965;  // std dev = 2.171, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | | else return 0.10223649283760348;  // std dev = 2.862, 67.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2663455818413985;  // std dev = 0.079, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.047541430316984934;  // std dev = 0.140, 164.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=18 */
%   | | else return -0.07449877784409784;  // std dev = 0.078, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.2919303809413452;  // std dev = 0.124, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2570313751326668;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4189462681668287;  // std dev = 1.092, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5248313193820614;  // std dev = 0.361, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.12835019397226063;  // std dev = 0.182, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.13376611539356956;  // std dev = 0.407, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21770482849549253;  // std dev = 0.141, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.08246401465275142;  // std dev = 0.794, 109.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=1 */
%   | | | else return -0.0543182915463084;  // std dev = 0.337, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.23606138093075382;  // std dev = 1.446, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.08691018798927978;  // std dev = 0.025, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3430722076676259;  // std dev = 0.359, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.1261419169789384;  // std dev = 0.052, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03696451912535983;  // std dev = 1.692, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | | else return 0.08553402647835844;  // std dev = 1.329, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1812046604183121;  // std dev = 0.070, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.25521994509754736;  // std dev = 0.004, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.29215371250191385;  // std dev = 0.182, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11226910073785816;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07724176956212275;  // std dev = 0.053, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.27447034124238145;  // std dev = 1.164, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.11997575499103653;  // std dev = 0.074, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.04818428835765018;  // std dev = 1.095, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return -0.0036982232118759747;  // std dev = 1.624, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1585872275104043;  // std dev = 0.017, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15930962615416328;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.15735062350055803;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.22591621058242634;  // std dev = 0.224, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.11243011151161392;  // std dev = 0.848, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07190766255242476;  // std dev = 0.053, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2692161207341;  // std dev = 0.064, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.33202584640113464;  // std dev = 0.951, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.12462178179875234;  // std dev = 0.035, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1501804209052955;  // std dev = 0.029, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else return 0.09543980378766259;  // std dev = 0.210, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.0641729639423363;  // std dev = 0.045, 225.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11550659538385244;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0013728047658959556;  // std dev = 0.917, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.062396702083166854;  // std dev = 0.596, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.19566027071373948;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.004275651976984478;  // std dev = 1.041, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0.03645364596989122;  // std dev = 1.282, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.581', 'seconds']
Refined model CLL: -0.104632


******************************************
Best model found
******************************************
Results 

CLL : -0.104591 

AUC ROC : 0.992958 

AUC PR : 0.350818 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 40.131 

Total Inference Time : 14.34286618232727 

Total revision time: 67.04718429756164
Best scored revision CLL: -0.104632


Results 

CLL : -0.104591 

AUC ROC : 0.992958 

AUC PR : 0.350818 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 94.69490153503418 

Total Inference Time : 14.34286618232727 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.171
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6746835346759078;  // std dev = 0.985, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02102871326725382;  // std dev = 0.322, 35.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13981214937855654;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18049215166317392;  // std dev = 1.351, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.6171879912916239;  // std dev = 0.251, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7580773778577011;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5780531784440693;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5780531784440693;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016393912413391904;  // std dev = 1.892, 42.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=6 */
%   | | | else return -0.13091161411003335;  // std dev = 0.024, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4952515240269053;  // std dev = 0.951, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1257106792883528;  // std dev = 0.005, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.1138772909077448;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13914282268968622;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3514704009113119;  // std dev = 0.263, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.47223823852736135;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31896808382061326;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5950838614138195;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0863191898102287;  // std dev = 0.948, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return -0.109216641628142;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008307459859702689;  // std dev = 1.622, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2800241970878701;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5068292138370397;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11313005409965432;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1050840518353422;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25317962439145403;  // std dev = 0.968, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.07807017758365045;  // std dev = 0.787, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008184140606108392;  // std dev = 0.340, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.195045804996687;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E) )
%   | | then return 0.24664185548252415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04315428828541392;  // std dev = 0.146, 50.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1359567613622303;  // std dev = 0.701, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.09088362181256956;  // std dev = 0.000813, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15328721336734896;  // std dev = 0.236, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.265543803881798;  // std dev = 0.283, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09367989606174369;  // std dev = 0.033, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3405701135493321;  // std dev = 0.221, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10742135673550104;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.2013926308210636;  // std dev = 0.353, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08725828830534048;  // std dev = 0.553, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08546314927296787;  // std dev = 0.018, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09426750252396875;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.008714602497334975;  // std dev = 0.232, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.004064436140121656;  // std dev = 0.663, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07591486093126354;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.774', 'seconds']
Parameter learned model CLL:-0.10913 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.976, 1, 20], 'true,false,true': [2.58e-08, 28, 0], 'true,false,false': [0.331, 7, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.985, 1, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.322, 29, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.351, 7, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.251, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.892, 36, 6], 'false,false,false,false': [0.024, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.951, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.005, 32, 0], 'false,true,false,false': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.015, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.263, 0, 15], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.05, 0, 4], 'false,false,true,false': [0.948, 50, 2], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.622, 39, 17], 'false,true': [0.09, 0, 4], 'false,false,true': [0.169, 0, 4], 'false,false,false,true': [0.033, 8, 0], 'false,false,false,false': [0.024, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.968, 1, 21], 'true,false': [0.787, 43, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.34, 4, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.031, 0, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 44, 6], 'false,false,false,true': [0.701, 4, 4], 'false,false,false,false': [0.000813, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.236, 1, 16], 'false,true,true,true': [0.283, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 38, 0], 'false,false,true': [0.221, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.038, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.353, 0, 18], 'true,true,false': [0.553, 1, 2], 'true,false,true': [0.018, 41, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.232, 2, 1], 'false,true': [0.663, 10, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 4, 0]}]
{'': [0.23268698060941828, 0.1955555555555554], 'true': [0.04535147392290242, 0.027006172839506203], 'false': [0.2469135802469134, -6.938893903907228e-18], 'false,true': [0.0, -2.7755575615628915e-18], 'true,false': [2.3790493384824782e-17, 0.10937500000000004], 'false,true,true': [0.0, nan]}
{'': [0.060627456748961805, 0.1146456824553281], 'false': [0.10369647346687919, 0.13617823376938334], 'false,false': [-5.551115123125783e-18, 0.16601654179171252], 'false,false,false': [nan, 0.16601654179171252], 'false,true': [nan, 0.10369647346687919], 'false,false,true': [nan, -5.551115123125783e-18]}
{'': [0.0051115603487078, 0.0840937701003624], 'false': [nan, 0.08409377010036223], 'false,false': [0.0, 0.06854088871694702], 'false,false,false': [0.08519560939930465, 4.9352105009977755e-05], 'true': [0.004211717335686238, 0.0], 'true,true': [0.004211717335686238, nan], 'false,false,true': [0.0, 0.0], 'true,false': [0.0, nan]}
{'': [0.03477376446241663, 5.4373654274802084e-05], 'false': [2.731866185230779e-05, 4.435799045623967e-05], 'false,false': [nan, 4.435799045623967e-05], 'false,false,false': [nan, 4.435799045623967e-05], 'false,true': [nan, 2.731866185230779e-05], 'false,true,false': [8.880591610312127e-07, -2.523234146875356e-18]}
{'': [0.005176283925556607, 0.0466387721377978], 'false': [0.0, 0.0427956771485667], 'false,false': [0.046885237706821445, -2.3129646346357427e-18], 'false,false,true': [0.0006212315493298592, 0.017278998967140677], 'true': [0.004609815107940177, 0.0], 'false,true': [0.0, nan]}
{'': [0.04695481363627389, 0.059138795246734634], 'false': [0.00203458448190319, 0.05773590688135252], 'false,false': [0.007114032302338258, 0.00010756918031263391], 'true': [nan, 0.046954813636273865], 'true,false': [nan, 0.04695481363627389], 'false,false,false': [0.0001349934363209012, 5.6857263311656246e-05]}
{'': [0.0474276121618183, 0.019298478753936074], 'true': [0.042574859567674546, 0.01377049452609929], 'false': [nan, 0.019298478753936074], 'false,false': [nan, 0.019298478753936074], 'false,false,false': [nan, 0.019298478753936074]}
{'': [0.0002299912242052319, 0.027433095447849297], 'false': [nan, 0.027433095447849335], 'false,false': [0.02122697800953455, 0.043558054235998664], 'false,false,false': [0.061387746160251555, 8.259230072776846e-08], 'true': [6.89423404088523e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.055726619852130656, 0.02334215499980026], 'false': [0.015144659257228287, 0.04455647809901537], 'false,false': [0.012235031206956598, 0.00014324044213415987], 'false,true': [0.015991223820197853, 2.842422953385157e-05], 'false,true,true': [0.015991223820197853, nan], 'false,false,false': [nan, 0.00014324044213415987]}
{'': [0.022301750796951982, 0.025545344262282464], 'false': [0.03142252783816538, 0.0], 'true': [0.030722405219054946, 0.0014330860579587512], 'true,true': [0.006923773985909962, 0.10209760423576669], 'true,false': [7.571783569345164e-06, 0.007608432532374436], 'true,false,false': [1.1564823173178713e-18, 0.01794576512847851], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
2;false,false;tweets(A, I).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(F, A), follows(A, F).;true;true
7;false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true


Refining candidate
***************************
Model training time 5.527
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6361400788776209;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.7523355672866044;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7473839334745777;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.14120019116709434;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.35736567617980625;  // std dev = 1.106, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5778919893014021;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.7289922134350973;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5472375764093829;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5472375764093829;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.08528359814315636;  // std dev = 0.971, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | | else return 0.1908432736692865;  // std dev = 1.211, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.43237174045990845;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2050397147163954;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4401464510373674;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5994751447244248;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.09208485965902084;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return -0.10409044300085088;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.10761467868225412;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.15021163996017886;  // std dev = 0.119, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33799666495215236;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3361019267751494;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5138673350838131;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3717413397978267;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4523103716523262;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08117503968823032;  // std dev = 0.780, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | else return -0.09313449410778048;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.17111011089534908;  // std dev = 0.950, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.07101172744122013;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2858724071885883;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.0501468979057448;  // std dev = 0.589, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return -0.08803679560345384;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08608648996982826;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3142071130037486;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.18097384464760688;  // std dev = 1.010, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.12573978212410727;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.13939305153395792;  // std dev = 0.950, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.26769939839672513;  // std dev = 0.165, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3535446026762701;  // std dev = 0.129, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.08460084087449597;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.07622184783767272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.14795028425260912;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, I), follows(I, H) )
%   | | then return -0.03569662001409746;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.0011122484912013883;  // std dev = 0.279, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07332246913212882;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.20360673327797532;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2203180759787346;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.24487498907040728;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.205112265855119;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04482297962813243;  // std dev = 0.511, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return -0.07760066685742578;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, J) )
%   | | then return 5.644860328097578E-4;  // std dev = 0.185, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.06849371088090975;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07960540922776099;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1786574295612084;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12846719498919487;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.025469417632352487;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2246783186517952;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.07425005578064901;  // std dev = 0.005, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.0717342752453536;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2867401084835059;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.1303175053161818;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06408450597253104;  // std dev = 0.000576, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.16617170860293318;  // std dev = 0.029, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.18893096110152732;  // std dev = 0.142, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.06887541599644213;  // std dev = 0.001, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06647043035214384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.04752307459151459;  // std dev = 0.180, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.11624581793017869;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03459333498893999;  // std dev = 0.302, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.08167362366232692;  // std dev = 0.396, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.05987516108457933;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.147', 'seconds']
Refined model CLL: -0.097563


******************************************
Best model found
******************************************
Results 

CLL : -0.095254 

AUC ROC : 0.993797 

AUC PR : 0.387926 

Precision : 0.343008 

Recall : 0.833333 

F1 : 0.485981 

Total Learning Time : 5.527 

Total Inference Time : 4.353221893310547 

Total revision time: 13.36084966468811
Best scored revision CLL: -0.097563


Results 

CLL : -0.095254 

AUC ROC : 0.993797 

AUC PR : 0.387926 

Precision : 0.343008 

Recall : 0.833333 

F1 : 0.485981 

Total Learning Time : 41.008566902160645 

Total Inference Time : 4.353221893310547 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.457
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6969855618916321;  // std dev = 0.997, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.010489403058119974;  // std dev = 0.311, 75.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.053989691565170014;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12213367866885937;  // std dev = 1.858, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5934266688586215;  // std dev = 0.316, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8039081432770206;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5666316330126813;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5666316330126813;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04328072688145721;  // std dev = 2.521, 96.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=10 */
%   | | | else return -0.04609367033597356;  // std dev = 1.540, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5134831207024688;  // std dev = 1.285, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12336469500654322;  // std dev = 0.040, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.12285069713041485;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1543545118474172;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3109737582831279;  // std dev = 0.967, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0.4404853738333234;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30746586916449603;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6116880514245024;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08228694800806173;  // std dev = 1.546, 99.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=4 */
%   | | else return -0.11964254568328422;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02578535569522856;  // std dev = 2.099, 115.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2590003944154079;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.486259660236989;  // std dev = 0.879, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11498351097947189;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.11659101503790074;  // std dev = 0.056, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2760634860497487;  // std dev = 1.134, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return -0.08056657123220777;  // std dev = 1.510, 85.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.035609100872558974;  // std dev = 0.444, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18858197869695476;  // std dev = 0.043, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, E) )
%   | | then return 0.22886314046388423;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.02217098095292356;  // std dev = 0.170, 74.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.007989426617949089;  // std dev = 0.974, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.020857084519451983;  // std dev = 1.030, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16328477013767653;  // std dev = 0.191, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2244026923173537;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09509845902215655;  // std dev = 0.015, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4826885475906719;  // std dev = 0.420, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10338594745359111;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14945156405462584;  // std dev = 1.426, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return -0.06141033722494886;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08683576293804754;  // std dev = 0.000692, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09249428507337232;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0034031359262408807;  // std dev = 0.422, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.013971417907346951;  // std dev = 0.661, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1636966661984789;  // std dev = 0.739, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.699', 'seconds']
Parameter learned model CLL:-0.11353 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 42], 'true,false,true': [7.45e-08, 77, 0], 'true,false,false': [0.373, 10, 2], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.433, 6, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.997, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.311, 63, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.953, 10, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.858, 15, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.316, 0, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.521, 86, 10], 'false,false,false,false': [1.54, 26, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.285, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.04, 61, 0], 'false,true,false,false': [0.011, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.05, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.967, 1, 30], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.04, 0, 9], 'false,false,true,false': [1.546, 95, 4], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.099, 79, 36], 'false,true': [0.084, 0, 7], 'false,false,true': [0.879, 1, 7], 'false,false,false,true': [0.03, 11, 0], 'false,false,false,false': [0.056, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.134, 1, 42], 'true,false': [1.51, 81, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.444, 5, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.043, 0, 30], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 62, 12], 'false,false,false,true': [0.974, 18, 5], 'false,false,false,false': [1.03, 10, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.191, 1, 31], 'false,true,true,true': [0.961, 1, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.015, 77, 0], 'false,false,true': [0.42, 0, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.047, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.426, 2, 38], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.000692, 79, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.422, 6, 2], 'false,true': [0.661, 11, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.739, 3, 2]}]
{'': [0.22222222222222326, 0.18750000000000014], 'true': [0.022714981070850387, 0.0219669233682616], 'false': [0.18749999999999983, 0.18750000000000003], 'false,true': [0.0, -1.1564823173178714e-17], 'true,false': [7.209240419643874e-17, 0.13888888888888892], 'false,true,true': [0.0, nan]}
{'': [0.031048405179245064, 0.1114089169545773], 'false': [0.09700983422572826, 0.1433263459645445], 'false,false': [0.08264462809917353, 0.16444907467328204], 'false,false,false': [nan, 0.16444907467328204], 'false,true': [nan, 0.09700983422572826], 'false,false,true': [nan, 0.08264462809917353]}
{'': [0.006112959620569168, 0.08292136433491641], 'false': [nan, 0.0829213643349164], 'false,false': [-3.700743415417188e-17, 0.06982725819997783], 'false,false,false': [0.06620366982879063, 0.08181650830596444], 'true': [0.0034462749407289184, 0.0033356590548003773], 'true,true': [0.0034462749407289184, nan], 'true,false': [0.0033356590548003773, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.032361344797363266, 0.0001654986925728179], 'false': [2.4608071761706666e-05, 0.0002285835845504125], 'false,false': [nan, 0.0002285835845504125], 'false,false,false': [nan, 0.0002285835845504125], 'false,true': [nan, 2.4608071761706666e-05], 'false,true,false': [2.6329918959717775e-05, 1.2707548046149277e-05]}
{'': [0.029744615827670406, 0.05965085454255286], 'false': [0.0, 0.0571291357770859], 'false,false': [0.05892143912470775, 0.0], 'false,false,true': [0.00018131044822005608, 0.024128009169451403], 'true': [0.030179955233971163, 0.0], 'false,true': [0.0, nan]}
{'': [0.03831916761061834, 0.07532840188832866], 'false': [0.0009967275944709872, 0.0790464534634849], 'false,false': [0.09651170927348576, 0.00013077285537754243], 'true': [nan, 0.03831916761061853], 'true,false': [nan, 0.03831916761061834], 'false,false,false': [8.361590590150938e-05, 0.00015579224977398386]}
{'': [0.05622543090764733, 0.02195124669740343], 'true': [0.029889744150926777, 0.026821979906489875], 'false': [nan, 0.02195124669740343], 'false,false': [nan, 0.02195124669740343], 'false,false,false': [nan, 0.02195124669740343]}
{'': [0.00010894074026223863, 0.03828876432159584], 'false': [nan, 0.038288764321595864], 'false,false': [0.028856734662521068, 0.057419325701906866], 'false,false,false': [0.04121473916214477, 0.08836930907672667], 'true': [6.0231066229254895e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.03650729614325238, 0.035628225363421646], 'false': [0.023441775991856557, 0.07860343109140167], 'false,false': [0.02940531144929744, 0.00014458930784678377], 'false,true': [0.06598000789631607, 2.7849773394325917e-06], 'false,true,true': [0.06598000789631607, nan], 'false,false,false': [nan, 0.00014458930784678377]}
{'': [0.03353991887888931, 0.05336322373461212], 'false': [0.02914772551242829, 0.10919648091928291], 'false,false': [nan, 0.10919648091928291], 'false,false,false': [nan, 0.10919648091928291], 'true': [0.06733922185038611, 0.002545618034982031], 'true,true': [0.05081631998043579, 0.16], 'true,false': [6.064216563505243e-09, 0.017758192684505427], 'true,false,false': [0.0, 0.02225281507127957]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 18.953
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7323521948250824;  // std dev = 0.135, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1290775652660176;  // std dev = 0.124, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.19761509727684545;  // std dev = 1.485, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5065940682442082;  // std dev = 0.971, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5615267719996473;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.27293112035770534;  // std dev = 0.874, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5754871135437688;  // std dev = 0.128, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11629114531693903;  // std dev = 0.125, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07006461730554917;  // std dev = 1.284, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.019387188168132848;  // std dev = 1.297, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.38595257034940156;  // std dev = 0.986, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.42744146263086785;  // std dev = 0.156, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2522240233552441;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.569007751820179;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7470145733581559;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10275137176970939;  // std dev = 0.072, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.10090404253239896;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.13720918660377857;  // std dev = 0.082, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.25702661888537387;  // std dev = 1.368, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.18862701501827042;  // std dev = 0.956, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.05585999567803888;  // std dev = 1.145, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.49189071061532286;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3250830537146996;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3404074528113552;  // std dev = 0.098, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.06741663770824655;  // std dev = 1.372, 90.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=4 */
%   | | else return -0.0922607617201658;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.23941737638167454;  // std dev = 0.987, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.27593593888324747;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3747985258030056;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.05089757425967156;  // std dev = 0.104, 67.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3037478400590455;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.05246409435252926;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.348060810292606;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.42815949511086737;  // std dev = 0.827, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.11153087073647917;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.24062124470261315;  // std dev = 0.012, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.2817160054360044;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.08673572155966185;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.251180552910483;  // std dev = 0.110, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08447141012917936;  // std dev = 0.008, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.023109193086203333;  // std dev = 0.391, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.09623242623714752;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.08517483712509491;  // std dev = 0.563, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.37040131990863445;  // std dev = 0.611, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.19945296149693054;  // std dev = 0.011, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.02505072448868124;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.24790919124386146;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), tweets(A, G) )
%   | then if ( follows(H, A), follows(H, F) )
%   | | then if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.21583681634542148;  // std dev = 0.129, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07895825109176584;  // std dev = 0.065, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( tweets(J, G), recursion_accounttype(J, B) )
%   | | | then return 0.27719953118593765;  // std dev = 0.169, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09587288919468649;  // std dev = 0.069, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(K, A) )
%   | | then return -0.06685414785853772;  // std dev = 0.056, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else return -0.01929562852836211;  // std dev = 0.293, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return -0.0026855269146475085;  // std dev = 1.821, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return 0.17671053586047256;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16468668661689387;  // std dev = 0.074, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.014044431651792172;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.2042610666393827;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.16699101351414317;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07281318879887597;  // std dev = 0.007, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.34743604470021405;  // std dev = 0.343, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10373586845721713;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09069833752057559;  // std dev = 1.357, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.15514906031922757;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.21642096293201027;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.06653204376146189;  // std dev = 0.004, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06213663043947345;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.027403430330602586;  // std dev = 0.299, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.19468906389003204;  // std dev = 0.094, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09570637980455297;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.09978927746166819;  // std dev = 0.639, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.249', 'seconds']
Refined model CLL: -0.102533


******************************************
Best model found
******************************************
Results 

CLL : -0.098305 

AUC ROC : 0.994337 

AUC PR : 0.354338 

Precision : 0.334773 

Recall : 0.99359 

F1 : 0.500808 

Total Learning Time : 18.953 

Total Inference Time : 11.700294733047485 

Total revision time: 35.78286496162414
Best scored revision CLL: -0.102533


Results 

CLL : -0.098305 

AUC ROC : 0.994337 

AUC PR : 0.354338 

Precision : 0.334773 

Recall : 0.99359 

F1 : 0.500808 

Total Learning Time : 63.430582199096676 

Total Inference Time : 11.700294733047485 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.743
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8273797043302819;  // std dev = 1.392, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.07243464938522651;  // std dev = 0.410, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6898246626456093;  // std dev = 1.397, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.038927788312215654;  // std dev = 0.259, 136.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07800898802831027;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12319030816397672;  // std dev = 2.186, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5480260237494996;  // std dev = 1.346, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return -0.26667699754355423;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8160018399414861;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5702314769434573;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5702314769434573;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05262494596028954;  // std dev = 2.791, 139.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=12 */
%   | | | else return 0.034380109842117604;  // std dev = 1.885, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48849872248553394;  // std dev = 1.879, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11719644689145961;  // std dev = 0.038, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return -0.12494656978746672;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14795205911186632;  // std dev = 0.092, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32322186380128426;  // std dev = 1.135, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return 0.46195513816392697;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31519674078454024;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6346537194181402;  // std dev = 0.134, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09036740877452938;  // std dev = 1.560, 147.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=4 */
%   | | else return -0.11010378272784935;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037176785964006503;  // std dev = 2.685, 156.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2624768804778899;  // std dev = 0.094, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.35578353959061815;  // std dev = 1.539, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11402331655702488;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.11796738296889445;  // std dev = 0.085, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27031685078621875;  // std dev = 1.559, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else return -0.07930748768444434;  // std dev = 1.416, 123.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015673967168108656;  // std dev = 0.529, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.157808563478614;  // std dev = 1.432, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.24099667350648746;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03823060358461288;  // std dev = 0.153, 120.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.023352274028298887;  // std dev = 1.114, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.022414752457566838;  // std dev = 1.177, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15745499770340327;  // std dev = 0.209, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2841406164933459;  // std dev = 0.540, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09178727824945795;  // std dev = 0.081, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47665810730556074;  // std dev = 0.469, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10347815325749725;  // std dev = 0.063, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1495721076748703;  // std dev = 1.696, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | | else return 0.14048937362812797;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08334038837635864;  // std dev = 0.024, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08544899055837567;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.0047158080908919825;  // std dev = 0.470, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.02480153219504641;  // std dev = 0.775, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07578796992499004;  // std dev = 0.925, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.248', 'seconds']
Parameter learned model CLL:-0.110542 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 63], 'true,false,true': [7.3e-08, 114, 0], 'true,false,false': [0.3, 18, 2], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.41, 11, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.397, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 122, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.97, 16, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.186, 19, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.346, 2, 44], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.791, 127, 12], 'false,false,false,false': [1.885, 22, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.879, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.038, 108, 0], 'false,true,false,false': [1.49e-08, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.092, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.135, 1, 47], 'true,false': [0.0, 0, 1], 'false,true,true': [1.49e-08, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.134, 0, 13], 'false,false,true,false': [1.56, 143, 4], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.685, 101, 55], 'false,true': [0.094, 0, 9], 'false,false,true': [1.539, 2, 11], 'false,false,false,true': [0.045, 15, 0], 'false,false,false,false': [0.085, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.559, 2, 66], 'true,false': [1.416, 119, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.529, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.432, 2, 49], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 106, 14], 'false,false,false,true': [1.114, 22, 8], 'false,false,false,false': [1.177, 13, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.209, 2, 48], 'false,true,true,true': [0.54, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 113, 0], 'false,false,true': [0.469, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.063, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.696, 3, 58], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.024, 101, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.47, 7, 2], 'false,true': [0.775, 14, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.925, 7, 3]}]
{'': [0.21994394080957572, 0.19722425127830545], 'true': [0.02982248520709983, 0.014702606371129355], 'false': [0.21172022684310027, 0.1683673469387754], 'false,true': [-2.5376526277146434e-16, -6.938893903907228e-18], 'true,false': [4.674623261579606e-17, 0.09000000000000004], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.03754241407512186, 0.09122308923660338], 'false': [0.06724307909341964, 0.15246243575898463], 'false,false': [0.05536332179930793, 0.18768170614250748], 'false,false,false': [0.0, 0.17706312094069768], 'false,true': [nan, 0.06724307909341964], 'false,false,true': [nan, 0.05536332179930793]}
{'': [0.05143393937303226, 0.08527918098696292], 'false': [nan, 0.08527918098696284], 'false,false': [8.881784197001253e-17, 0.0693641074787593], 'false,false,false': [0.056043136391387936, 0.1316038058776604], 'true': [0.05234781080555249, 0.018557485941217255], 'true,true': [0.0393636574819056, 0.0], 'true,false': [0.0031495651830718563, 0.0], 'false,false,true': [-4.4408920985006264e-17, -4.4408920985006264e-17]}
{'': [0.04526213932131885, 0.00018814436857029246], 'false': [1.935802597555908e-05, 0.0003532757370714919], 'false,false': [nan, 0.0003532757370714919], 'false,false,false': [nan, 0.0003532757370714919], 'false,true': [nan, 1.935802597555908e-05], 'false,true,false': [1.3557782334519643e-05, 1.1102230246251566e-17]}
{'': [0.026681613578353722, 0.05503933622653518], 'false': [2.2204460492503132e-17, 0.05142355977002014], 'false,false': [0.05456106836137091, -2.523234146875356e-18], 'false,false,true': [0.0013880682977359244, 0.01655392206518923], 'true': [0.026844686213303215, 0.0], 'false,true': [2.2204460492503132e-17, nan]}
{'': [0.04621159345626015, 0.08731958701474968], 'false': [0.0009806381374474328, 0.09356820548245127], 'false,false': [0.1822780573127285, 0.0002660020740322138], 'true': [nan, 0.04621159345626018], 'true,false': [nan, 0.04621159345626015], 'false,false,false': [0.00013461113981484972, 0.00035787856332609725]}
{'': [0.05125752878203758, 0.019972703371343936], 'true': [0.03575167176911651, 0.016310877169422817], 'false': [nan, 0.019972703371343936], 'false,false': [nan, 0.019972703371343936], 'false,false,false': [nan, 0.019972703371343936]}
{'': [0.0395853367626739, 0.03353629567305981], 'true': [0.04022843788164396, 0.0], 'false': [nan, 0.03353629567305981], 'false,false': [0.02346863700019146, 0.0570871794788667], 'false,false,false': [0.04136363500207708, 0.08656825214674131], 'true,false': [0.0, nan]}
{'': [0.04384577250565461, 0.03094143747002317], 'false': [0.019671475972534797, 0.07495836740170692], 'false,false': [0.027511708829849546, 0.00018967645079745333], 'false,true': [0.01533549292688619, 5.876341060446196e-05], 'false,true,true': [0.01533549292688619, nan], 'false,false,false': [nan, 0.00018967645079745333]}
{'': [0.028022280987777693, 0.04754927127055924], 'false': [0.028577945299085174, 0.08562802505322964], 'false,false': [nan, 0.08562802505322964], 'false,false,false': [nan, 0.08562802505322964], 'true': [0.04359218475914555, 0.002172849904224262], 'true,true': [0.04715906495609042, 0.0], 'true,false': [5.831562043858245e-06, 0.010345178253476943], 'true,false,false': [-8.673617379884035e-19, 0.02456518433880824]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.551
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.1258510649004877;  // std dev = 0.125, 125.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7260389176860581;  // std dev = 0.159, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.034255742441562015;  // std dev = 2.700, 102.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=11 */
%   | | | else return -0.004075621137547729;  // std dev = 0.798, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.05358582664324106;  // std dev = 0.239, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.20612281727540702;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.12721051605792638;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10304133703688921;  // std dev = 2.205, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5394793397222992;  // std dev = 0.200, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8082925967286577;  // std dev = 0.056, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.055366436746284484;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.553744602831059;  // std dev = 1.29e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.1058777345976531;  // std dev = 1.210, 104.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=2 */
%   | | | else return 0.01334798667320317;  // std dev = 2.094, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10851569771942128;  // std dev = 1.569, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return 0.0338248135218454;  // std dev = 1.554, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4269899690523393;  // std dev = 0.186, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.6402476714548423;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20832269055920652;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7153912018817091;  // std dev = 0.122, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7898425253608601;  // std dev = 0.115, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11974188414485687;  // std dev = 0.133, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.12146003456924885;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.1556339124853741;  // std dev = 0.047, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.28496383976021705;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.33712548350316207;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.46836802042756426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5155772429181305;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4911333249732356;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.31757850988093;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5006405662996255;  // std dev = 0.974, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.09581642861425982;  // std dev = 1.422, 158.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=4 */
%   | | else return -0.0929040325554187;  // std dev = 8.33e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.26180439005467493;  // std dev = 0.028, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.04337451459796705;  // std dev = 1.752, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else return 0.28762549946705207;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04344941790259009;  // std dev = 0.158, 88.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=9 */
%   | | else return -0.06406140114005875;  // std dev = 0.128, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26617484415705317;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3892467607169863;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.43363813474689983;  // std dev = 0.855, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.11990960021855215;  // std dev = 0.015, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22349444132351778;  // std dev = 0.134, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.18647997356873605;  // std dev = 1.324, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return -0.0928157461341109;  // std dev = 0.073, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(D, H), recursion_accounttype(H, B) )
%   | | | then return 0.4091553886971543;  // std dev = 0.228, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10096075281472869;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.42432743249993154;  // std dev = 0.358, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12547084291726734;  // std dev = 0.278, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.20608695010031788;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07645657892992203;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.18903648213461843;  // std dev = 0.017, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.17169257371202504;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.26575400477257627;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.3538732954067993;  // std dev = 0.237, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.10235010082405971;  // std dev = 0.948, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.08677810376882784;  // std dev = 0.008, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.41108496192666566;  // std dev = 0.179, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10785883823827892;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.0712297116071139;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1600604302426713;  // std dev = 0.014, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.0553056592990128;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.22114146441963048;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.21426932799402865;  // std dev = 0.941, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.14864461735560458;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07833334786106731;  // std dev = 0.007, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.20995406987722692;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3865962058720951;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09610732503776698;  // std dev = 0.007, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10767110818589674;  // std dev = 1.290, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.2257653853463553;  // std dev = 0.255, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.13295272138238146;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.07206315921506101;  // std dev = 0.038, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.04914659466096169;  // std dev = 0.072, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.18753340187257939;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08362667299516781;  // std dev = 0.007, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( tweets(A, I) )
%   | | then return -0.024086494416113585;  // std dev = 0.113, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.004626372461518797;  // std dev = 0.169, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '43.181', 'seconds']
Refined model CLL: -0.100943


******************************************
Best model found
******************************************
Results 

CLL : -0.095327 

AUC ROC : 0.995112 

AUC PR : 0.401204 

Precision : 0.346604 

Recall : 0.948718 

F1 : 0.507719 

Total Learning Time : 10.551 

Total Inference Time : 25.79304027557373 

Total revision time: 43.08653029823303
Best scored revision CLL: -0.100943


Results 

CLL : -0.095327 

AUC ROC : 0.995112 

AUC PR : 0.401204 

Precision : 0.346604 

Recall : 0.948718 

F1 : 0.507719 

Total Learning Time : 70.73424753570556 

Total Inference Time : 25.79304027557373 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.097
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8343394112899883;  // std dev = 1.397, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.31968739663797385;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7109603956464089;  // std dev = 1.003, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.025482344129539397;  // std dev = 0.275, 160.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10277511234151954;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11667806570247351;  // std dev = 2.775, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5808046779914892;  // std dev = 0.385, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8117294767309955;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6159463602843244;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3966663718100161;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5633330384766828;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.036224913942473215;  // std dev = 3.281, 159.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=17 */
%   | | | else return 0.011643477072623311;  // std dev = 2.534, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5037054012608747;  // std dev = 1.946, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12000696171881081;  // std dev = 0.037, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | | else return -0.12393425327877637;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14975552228639505;  // std dev = 0.109, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29498698426358344;  // std dev = 1.515, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.3957044335654391;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3226312639700548;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5905905723893998;  // std dev = 0.806, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.09018684793399187;  // std dev = 1.848, 199.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=6 */
%   | | else return -0.1301316569119081;  // std dev = 0.065, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030128330025157336;  // std dev = 3.016, 216.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26195606101056373;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.520311175468119;  // std dev = 0.599, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13300878034417177;  // std dev = 0.170, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.11517400453944414;  // std dev = 0.161, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2744779716696422;  // std dev = 1.662, 89.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=87 */
%   | else return -0.08998837560252927;  // std dev = 1.746, 213.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005475790350044504;  // std dev = 0.641, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17848254000862684;  // std dev = 0.994, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.24201155381290007;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05017081700630554;  // std dev = 0.161, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.016037189308553003;  // std dev = 1.273, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
%   | | | else return 0.024045801047766262;  // std dev = 1.547, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1398777021966995;  // std dev = 0.223, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29939122330145923;  // std dev = 0.617, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08947194308130432;  // std dev = 0.028, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.42598630179384234;  // std dev = 0.495, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11102001586928295;  // std dev = 0.137, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17034739658707945;  // std dev = 1.510, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.13362001346152974;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08271902750774802;  // std dev = 0.015, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08075382445627503;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.017119319137673616;  // std dev = 0.464, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.05217864205623144;  // std dev = 0.843, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01023931282461875;  // std dev = 1.165, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.770', 'seconds']
Parameter learned model CLL:-0.109976 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.397, 2, 82], 'true,false,true': [0.0, 150, 0], 'true,false,false': [0.331, 14, 2], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.499, 7, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.003, 1, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 141, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 26, 1], 'false,false,false,true': [0.866, 1, 3], 'false,false,false,false': [2.775, 32, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.385, 0, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.085, 0, 2], 'true,false,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.913, 1, 5], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.281, 142, 17], 'false,false,false,false': [2.534, 42, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.946, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.037, 130, 0], 'false,true,false,false': [1.05e-08, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.109, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.515, 2, 60], 'true,false': [0.074, 0, 2], 'false,true,true': [0.062, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.806, 1, 20], 'false,false,true,false': [1.848, 193, 6], 'false,false,false': [0.065, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.016, 144, 72], 'false,true': [0.106, 0, 11], 'false,false,true': [0.599, 0, 17], 'false,false,false,true': [0.17, 32, 0], 'false,false,false,false': [0.161, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.662, 2, 87], 'true,false': [1.746, 207, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.641, 17, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.994, 1, 63], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 160, 19], 'false,false,false,true': [1.273, 49, 11], 'false,false,false,false': [1.547, 14, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.223, 3, 62], 'false,true,true,true': [0.617, 0, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.028, 173, 0], 'false,false,true': [0.495, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.137, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.51, 2, 75], 'true,true,false': [3.73e-09, 0, 7], 'true,false,true': [0.015, 153, 0], 'true,false,false,true': [0.0, 19, 0], 'true,false,false,false': [0.464, 8, 2], 'false,true': [0.843, 14, 10], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.165, 20, 6]}]
{'': [0.22310400000000066, 0.2291358024691353], 'false': [0.21484375000000008, 0.24852071005917165], 'true': [0.023242630385487066, 0.011903033822034961], 'false,true': [-8.881784197001253e-17, 5.046468293750712e-18], 'true,false': [-1.1546319456101628e-16, 0.10937500000000004], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [0.015492181289827793, 0.09931576094714487], 'false': [0.07588472211037836, 0.14400017013812505], 'false,false': [0.03566529492455413, 0.18180022363161114], 'false,false,false': [0.1875, 0.17113320488265396], 'false,true': [nan, 0.07588472211037836], 'false,false,true': [nan, 0.03566529492455413]}
{'': [0.004199242145032813, 0.09594274557370623], 'false': [nan, 0.09594274557370608], 'false,false': [0.07100591715976316, 0.0822635759427697], 'false,false,false': [0.06769377254952919, 0.12595217647514573], 'false,false,true': [0.13888888888888892, 0.0], 'true': [0.0025946945923511883, 0.010657129560791567], 'true,false': [0.0036442066906365866, -7.401486830834377e-17], 'true,true': [0.0025946945923511883, nan]}
{'': [0.03711931498771958, 0.000144912406431964], 'false': [1.1107534640571764e-05, 0.0008488557880097859], 'false,false': [nan, 0.0008488557880097859], 'false,false,false': [nan, 0.0008488557880097859], 'false,true': [nan, 1.1107534640571764e-05], 'false,true,false': [1.0755918511118345e-05, 4.440892098500626e-18]}
{'': [0.03626144589945571, 0.059140590388626055], 'false': [0.00032510988437276883, 0.056042561385631025], 'false,false': [0.058492816065848593, 0.004181091768953203], 'false,false,true': [0.030938295960762856, 0.017161416691906656], 'true': [0.037026606993315885, 0.0027144475394768885], 'false,true': [0.00032510988437276883, nan]}
{'': [0.042116105005387275, 0.06989681478426024], 'false': [0.0010266908053046782, 0.07125618025323054], 'false,false': [0.021079597953551542, 0.0008845460128506478], 'true': [nan, 0.04211610500538721], 'true,false': [nan, 0.042116105005387275], 'false,false,false': [0.0009044715099823519, 0.0007171501172541567]}
{'': [0.046858061829287194, 0.0170990969204837], 'true': [0.03104604231181147, 0.014318011910015319], 'false': [nan, 0.0170990969204837], 'false,false': [nan, 0.0170990969204837], 'false,false,false': [nan, 0.0170990969204837]}
{'': [0.01526276626027516, 0.03398286232839293], 'false': [nan, 0.033982862328392774], 'false,false': [0.026019941144810918, 0.05045248540562406], 'false,false,false': [0.027006872753372577, 0.11958433877544976], 'true': [0.015439155666246679, 0.0], 'true,false': [0.0, nan]}
{'': [0.04957614971695736, 0.02890720691239593], 'false': [0.018607631042130496, 0.07184797671248151], 'false,false': [0.01885751609154692, 0.000748142347698455], 'false,true': [0.015219532924511992, 4.492848059680733e-06], 'false,true,true': [0.015219532924511992, nan], 'false,false,false': [nan, 0.000748142347698455]}
{'': [0.022665485210807548, 0.042314229373461555], 'false': [0.029589667714042128, 0.05218989807361726], 'false,false': [nan, 0.05218989807361726], 'false,false,false': [nan, 0.05218989807361726], 'true': [0.027257965377253095, 0.001405056758053696], 'true,true': [0.02962355384045975, 1.982541115402065e-18], 'true,false': [1.5573607538874355e-06, 0.008329205984586141], 'true,false,false': [-2.1912296538654404e-18, 0.02150167476648195]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.321
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.13098149968309694;  // std dev = 0.104, 184.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.034619523334806335;  // std dev = 0.381, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7273140951930285;  // std dev = 0.153, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.3929620221288607;  // std dev = 1.149, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7522969161942362;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.09760969049458107;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6480448407823828;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.12664198274949606;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.054534874156445215;  // std dev = 1.996, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.18675241404281573;  // std dev = 1.834, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.4640625160927965;  // std dev = 2.121, 51.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=46 */
%   | | | else return 0.5610115046125815;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6364039924996635;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then return 0.7669438788674222;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.2972471529193813;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5534294702274509;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(I, A) )
%   | | then return -0.05752960626841517;  // std dev = 0.187, 160.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06442280731501566;  // std dev = 1.946, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | | else return 0.12504115093807153;  // std dev = 1.874, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.424164863577674;  // std dev = 0.986, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.5100472682896041;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.3124363957124398;  // std dev = 0.274, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.506696563770418;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6767011741163069;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7527000145703214;  // std dev = 0.142, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10763272166079917;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.10763272166079887;  // std dev = 1.29e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.15682222542808522;  // std dev = 0.139, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.29742075499186715;  // std dev = 1.384, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.2155332713156749;  // std dev = 0.929, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.4022265191899982;  // std dev = 0.140, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1872622197636854;  // std dev = 0.368, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.332395432620878;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.46040521945365226;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09772289525229844;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02788397359196341;  // std dev = 1.484, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0.10949850254479121;  // std dev = 1.485, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.258396060720968;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.3017716152552806;  // std dev = 0.026, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2577686101027506;  // std dev = 0.954, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.08943862202301682;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.050666180617886775;  // std dev = 0.125, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2764498484840548;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2936191523482986;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4719685769596495;  // std dev = 0.888, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.1255717193650434;  // std dev = 0.036, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.2175486115459862;  // std dev = 0.138, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( tweets(A, E), follows(C, F) )
%   | | then return 0.23111506102298765;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(C, G), follows(A, G) )
%   | | | then return -0.26611299181907133;  // std dev = 1.009, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.004437958622905219;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.20352525572308028;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.09594391001873477;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(J, A) )
%   | | then return -0.053971262420399596;  // std dev = 0.102, 178.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=13 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.02668719591086792;  // std dev = 1.271, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.0594837839421593;  // std dev = 1.420, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1767289219824584;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.0669386755649844;  // std dev = 0.352, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else return 0.32208390352859306;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return -0.05024282540596439;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.20556026627510637;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2244818342225053;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.04721644324332373;  // std dev = 0.108, 165.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07181760198021696;  // std dev = 1.077, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return -0.02279085758608523;  // std dev = 1.444, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.14154338971335328;  // std dev = 0.984, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.17603325830915273;  // std dev = 0.078, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.21565878284148668;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.0038657659518327447;  // std dev = 0.535, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1667519793884739;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3314055337819536;  // std dev = 0.106, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.0750563945150095;  // std dev = 0.001, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.416888165605916;  // std dev = 0.074, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.1332520253679742;  // std dev = 0.015, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16015707963211365;  // std dev = 0.124, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | else return 0.15451764671785403;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06661868817059739;  // std dev = 0.031, 156.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=2 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return -0.1853840268005794;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.272552498957055;  // std dev = 0.106, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11149035174580922;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.282507334018416;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10667682155185107;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.008991659693638627;  // std dev = 0.253, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.256', 'seconds']
Refined model CLL: -0.103757


******************************************
Best model found
******************************************
Results 

CLL : -0.102603 

AUC ROC : 0.994317 

AUC PR : 0.366866 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 14.321 

Total Inference Time : 11.21533989906311 

Total revision time: 34.22147442626953
Best scored revision CLL: -0.103757


Results 

CLL : -0.102603 

AUC ROC : 0.994317 

AUC PR : 0.366866 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 61.869191663742065 

Total Inference Time : 11.21533989906311 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.456
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.24945328292559932;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7111062725180847;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03229062859636001;  // std dev = 0.265, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10677212579420874;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7572984814735839;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1160192690306234;  // std dev = 3.240, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5742067495177384;  // std dev = 0.394, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7278530663317377;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8194130675605439;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5958813463220666;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5598024073164267;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5598024073164267;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.036694591543494505;  // std dev = 3.669, 202.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=21 */
%   | | | else return 0.007461864878029049;  // std dev = 2.828, 69.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4690693984324308;  // std dev = 2.997, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11853666410837209;  // std dev = 0.043, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | | else return -0.12274370380924084;  // std dev = 6.04e-05, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15975776384316528;  // std dev = 0.173, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3287142393032095;  // std dev = 0.533, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.4139440154049879;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31248834089491156;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6404987967886784;  // std dev = 0.157, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08707524511892253;  // std dev = 2.354, 263.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=9 */
%   | | else return -0.1062358434781902;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03162962961812638;  // std dev = 3.310, 265.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18650236901334155;  // std dev = 0.979, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48873504171191684;  // std dev = 1.408, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11300522544543572;  // std dev = 0.088, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.12196904829376808;  // std dev = 0.193, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2592608022203859;  // std dev = 2.003, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07738563657675436;  // std dev = 2.084, 258.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006708085324668805;  // std dev = 0.712, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16042747480459765;  // std dev = 1.691, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23485915030158772;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05163175188973148;  // std dev = 0.165, 203.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.026829912845589533;  // std dev = 1.780, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
%   | | | else return 0.08055235232629017;  // std dev = 1.673, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1777361928694862;  // std dev = 0.114, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2902541059051275;  // std dev = 0.674, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09009230386555961;  // std dev = 0.032, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46623088569140214;  // std dev = 0.587, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1115699410998855;  // std dev = 0.166, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15877804600705892;  // std dev = 1.845, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14991065129687708;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08342569207027824;  // std dev = 0.015, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07811780795242274;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.021802338479523047;  // std dev = 0.484, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.015892367581772995;  // std dev = 1.077, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.205007767599784;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018967104499500387;  // std dev = 1.395, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.654', 'seconds']
Parameter learned model CLL:-0.110337 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 190, 0], 'true,false,false': [0.262, 25, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.58e-08, 28, 0], 'false,false': [0.488, 14, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 178, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.986, 36, 1], 'false,false,false,true': [0.078, 0, 4], 'false,false,false,false': [3.24, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.394, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.107, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.669, 181, 21], 'false,false,false,false': [2.828, 58, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.997, 6, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.043, 160, 0], 'false,true,false,false': [6.04e-05, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.173, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.533, 0, 73], 'true,false': [0.123, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.157, 0, 23], 'false,false,true,false': [2.354, 254, 9], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.31, 174, 91], 'false,true': [0.979, 1, 13], 'false,false,true': [1.408, 1, 22], 'false,false,false,true': [0.088, 29, 0], 'false,false,false,false': [0.193, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.003, 4, 107], 'true,false': [2.084, 247, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.712, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.691, 3, 80], 'true,false,true': [0.051, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.165, 181, 22], 'false,false,false,true': [1.78, 56, 13], 'false,false,false,false': [1.673, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.114, 1, 77], 'false,true,true,true': [0.674, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.032, 197, 0], 'false,false,true': [0.587, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.166, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.845, 3, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.015, 151, 0], 'true,false,false,true': [0.0, 26, 0], 'true,false,false,false': [0.484, 11, 2], 'false,true': [1.077, 30, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.395, 22, 8]}]
{'': [0.2201065595248514, 0.2204589843750001], 'false': [0.20701963117192096, 0.23818525519848777], 'true': [0.009522928994084868, 0.00913164433307126], 'false,true': [0.07100591715976314, 2.3790493384824782e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-2.220446049250313e-16, 0.0685871056241427]}
{'': [0.01219460904325792, 0.09746211890311453], 'false': [0.07021023558282741, 0.14638093850682476], 'false,false': [0.02629656683710734, 0.19121527876991432], 'false,false,false': [0.0015275015381144286, 0.17796505256085016], 'false,true': [nan, 0.07021023558282741], 'false,false,true': [nan, 0.02629656683710734]}
{'': [0.004052705730319805, 0.09387294375233204], 'false': [nan, 0.09387294375233211], 'false,false': [-2.612289469706251e-16, 0.07954331088492754], 'false,false,false': [0.06662379103747185, 0.11591232236262347], 'true': [0.0025098152648237856, 0.014159097701843907], 'true,false': [0.0034440262657116083, 0.002861156619964722], 'true,true': [0.0022131741253604937, 0.0], 'false,false,true': [-9.868649107779169e-17, 0.0]}
{'': [0.06804445412100198, 0.0003460840431249752], 'false': [1.2181835242815166e-05, 0.0008567564014496749], 'false,false': [nan, 0.0008567564014496749], 'false,false,false': [nan, 0.0008567564014496749], 'false,true': [nan, 1.2181835242824092e-05], 'false,true,false': [1.168245065139295e-05, 9.361069754112496e-11]}
{'': [0.004250857157336962, 0.058685075608558054], 'false': [0.0, 0.05563938876461405], 'false,false': [0.058608145165502626, -6.530723674265627e-18], 'false,false,true': [0.001071821134753068, 0.021068609221862274], 'true': [0.0038980729514969223, 0.003802410789137345], 'false,true': [0.0, nan]}
{'': [0.0413525773333461, 0.08542180311815943], 'false': [0.06843600029904559, 0.08433811495717429], 'false,false': [0.08623659109079475, 0.0005905047191551371], 'true': [nan, 0.04135257733334655], 'true,false': [nan, 0.0413525773333461], 'false,false,false': [0.00026960983300366813, 0.0007471281394314211]}
{'': [0.046479412526562826, 0.01951940207666801], 'true': [0.03613974518491329, 0.01683648774891888], 'false': [nan, 0.01951940207666801], 'false,false': [nan, 0.01951940207666801], 'false,false,false': [nan, 0.01951940207666801]}
{'': [0.03380292993312741, 0.039707129001786745], 'false': [nan, 0.039707129001787224], 'false,false': [0.02714723017202409, 0.06388547370923267], 'false,false,false': [0.04591212653957021, 0.09997450740549817], 'true': [0.03445630179601868, 0.0012782779956686946], 'true,false': [0.0012782779956686946, nan]}
{'': [0.01305296205739313, 0.032429588978744775], 'false': [0.01937671791483498, 0.07806126274956614], 'false,false': [0.02027342180548728, 0.0007225447725441752], 'false,true': [0.014183995195397633, 5.2341416872942e-06], 'false,true,true': [0.014183995195397633, nan], 'false,false,false': [nan, 0.0007225447725441752]}
{'': [0.025300891406029168, 0.04302864045164337], 'false': [0.027616316603432212, 0.06386245976800567], 'false,false': [0.0, 0.06487472041639747], 'false,false,false': [nan, 0.06487472041639747], 'true': [0.03210915970946358, 0.0014714183380248353], 'true,true': [0.03508058268330718, 1.1868715218521508e-05], 'true,false': [1.3996589076960432e-06, 0.006702215028255019], 'true,false,false': [0.0, 0.017992357016796297]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.975
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8299799210150057;  // std dev = 1.394, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13109837672844524;  // std dev = 0.103, 186.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7104342079587511;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.7313116838663201;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(A, G) )
%   | | | then return -0.0359945600753;  // std dev = 3.323, 158.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=17 */
%   | | | else return -0.12662905626929213;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.031110879436092812;  // std dev = 0.270, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.0016290562692921166;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.12662905626929216;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7821375314820682;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09935706314048832;  // std dev = 3.212, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5413331402373129;  // std dev = 0.208, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | else return 0.688631749027794;  // std dev = 0.252, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.39093073026762526;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5524412752570336;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5524412752570336;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10417568764207089;  // std dev = 1.463, 136.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=3 */
%   | | | else return -5.481671425171509E-4;  // std dev = 2.723, 83.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2051398279694145;  // std dev = 1.927, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return 0.08015472482382525;  // std dev = 2.376, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.42864719978762605;  // std dev = 0.046, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.39253745554714664;  // std dev = 0.907, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.44507137700906735;  // std dev = 0.191, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.6336257889576432;  // std dev = 0.083, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3947852098040357;  // std dev = 0.741, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6510583952571997;  // std dev = 1.036, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.7617022293869425;  // std dev = 0.117, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.11532824144549192;  // std dev = 0.006, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.17802193989087442;  // std dev = 0.163, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.31314422010796433;  // std dev = 0.985, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.04163795588506747;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.33088388834113946;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5079816980642412;  // std dev = 0.226, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.01903581080618022;  // std dev = 1.183, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3309713130413465;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5201061225681304;  // std dev = 0.950, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08882486550943668;  // std dev = 2.106, 245.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=9 */
%   | | else return -0.09302628667287437;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.21381786056010807;  // std dev = 1.647, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.2768044413547515;  // std dev = 0.076, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3569571606557674;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.28676717163901116;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05277945706204921;  // std dev = 1.844, 157.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=12 */
%   | | | else return -0.06360032166182837;  // std dev = 0.874, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2627535696215968;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4811492948176884;  // std dev = 0.123, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.1259386979133983;  // std dev = 0.033, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22434455400907638;  // std dev = 0.016, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.4909100645935031;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08739703490537229;  // std dev = 0.049, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.39643090436042006;  // std dev = 0.391, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.0960848770362132;  // std dev = 0.016, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.18639357341875962;  // std dev = 0.998, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.13511683852628498;  // std dev = 0.142, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09030114880353937;  // std dev = 0.799, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10360693989857034;  // std dev = 1.300, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.15319225766052902;  // std dev = 1.384, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.1835959202576155;  // std dev = 0.036, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.059610763880740186;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.23682162311123428;  // std dev = 0.065, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.27291594919339307;  // std dev = 0.224, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.0827869320807234;  // std dev = 0.082, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.22528032941105794;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.023686112862332027;  // std dev = 0.913, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.03316703524902536;  // std dev = 1.553, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.14391341633299928;  // std dev = 0.991, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.16203144055904573;  // std dev = 0.030, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.039887460121952656;  // std dev = 0.335, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.21671315864800467;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2275881366282546;  // std dev = 0.072, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07658730367931907;  // std dev = 0.073, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.25453985521061406;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.45590185277496315;  // std dev = 0.229, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14420073618928753;  // std dev = 0.028, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11730142912254875;  // std dev = 1.395, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.18526002378908232;  // std dev = 0.970, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.03273299056074386;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07090448872710398;  // std dev = 0.047, 212.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.14157428422084117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.02089510664727337;  // std dev = 0.140, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.2932271798909126;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.036212337294593354;  // std dev = 0.566, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.05465786082213878;  // std dev = 0.994, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.622', 'seconds']
Refined model CLL: -0.106188


******************************************
Best model found
******************************************
Results 

CLL : -0.10803 

AUC ROC : 0.994714 

AUC PR : 0.416865 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 11.975 

Total Inference Time : 13.626819610595703 

Total revision time: 36.09651280021667
Best scored revision CLL: -0.106188


Results 

CLL : -0.10803 

AUC ROC : 0.994714 

AUC PR : 0.416865 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 63.744230037689206 

Total Inference Time : 13.626819610595703 

