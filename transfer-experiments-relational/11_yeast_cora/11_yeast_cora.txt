Starting experiment 11_yeast_cora 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.412
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( venue(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | | then return 0.2843492907604439;  // std dev = 20.312, 1,687.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   | | | else return 0.07689893509951148;  // std dev = 4.677, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( sameauthor(D, A), sameauthor(E, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( sameauthor(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | | then return 0.24609748798177272;  // std dev = 20.312, 1,687.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   | | | else return 0.06727784200614993;  // std dev = 4.677, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( sameauthor(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( sameauthor(D, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( venue(A, E), haswordvenue(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19639811064739618;  // std dev = 20.906, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( author(D, A), sameauthor(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( author(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1040953422701556;  // std dev = 15.350, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( author(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( sameauthor(A, E), author(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( sametitle(A, G), title(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08443130730621574;  // std dev = 15.343, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( author(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( sametitle(A, E), title(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( author(A, G), author(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06775890736540924;  // std dev = 15.338, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), title(C, D) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( author(E, A), author(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( sametitle(A, F), author(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( author(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053926440055484075;  // std dev = 15.334, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( author(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( author(D, A), author(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( sameauthor(A, E), venue(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.042640304590356115;  // std dev = 15.331, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( author(D, A), title(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( sameauthor(A, F), title(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( author(H, A), sametitle(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033548168236946764;  // std dev = 15.329, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), sametitle(C, D) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( venue(A, E), title(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( author(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( author(H, A), author(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02629373864225291;  // std dev = 15.327, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.645', 'seconds']
Parameter learned model CLL:-0.63652 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A)', 'false': 'venue(A, D)', 'false,false': 'haswordauthor(A, E)', 'false,false,false': 'haswordvenue(A, F), haswordvenue(B, F)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [20.312, 968, 719], 'false,false,false,false': [4.677, 100, 28]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(C, A)', 'false': 'sameauthor(D, A), sameauthor(E, D)', 'false,false': 'sameauthor(A, F)', 'false,false,false': 'haswordvenue(A, G), haswordvenue(B, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [20.312, 968, 719], 'false,false,false,false': [4.677, 100, 28]}]
['samevenue(A, B)', {'': 'sameauthor(A, C)', 'false': 'sameauthor(A, A)', 'false,false': 'sameauthor(D, A)', 'false,false,false': 'venue(A, E), haswordvenue(A, F)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [20.906, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(A, C)', 'false': 'author(D, A), sameauthor(D, E)', 'false,false': 'author(A, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [15.35, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C)', 'false': 'author(D, A)', 'false,false': 'sameauthor(A, E), author(A, F)', 'false,false,false': 'sametitle(A, G), title(A, H)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [15.343, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(A, C)', 'false': 'author(D, A)', 'false,false': 'sametitle(A, E), title(A, F)', 'false,false,false': 'author(A, G), author(G, H)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [15.338, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), title(C, D)', 'false': 'author(E, A), author(E, E)', 'false,false': 'sametitle(A, F), author(A, G)', 'false,false,false': 'author(A, H)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [15.334, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A)', 'false': 'author(A, A)', 'false,false': 'author(D, A), author(A, D)', 'false,false,false': 'sameauthor(A, E), venue(A, F)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [15.331, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C)', 'false': 'author(D, A), title(D, E)', 'false,false': 'sameauthor(A, F), title(A, G)', 'false,false,false': 'author(H, A), sametitle(A, I)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [15.329, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), sametitle(C, D)', 'false': 'venue(A, E), title(A, F)', 'false,false': 'author(A, G)', 'false,false,false': 'author(H, A), author(H, H)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [15.327, 688, 368]}]
{}
{}
{}
{'': [nan, 0.2231267016272788], 'false': [nan, 0.2231267016272788], 'false,false': [nan, 0.2231267016272788]}
{'': [nan, 0.22293636714283244], 'false': [nan, 0.22293636714283244], 'false,false': [nan, 0.22293636714283244], 'false,false,false': [nan, 0.22293636714283244]}
{'': [nan, 0.2227872185563604], 'false': [nan, 0.2227872185563604], 'false,false': [nan, 0.2227872185563604], 'false,false,false': [nan, 0.2227872185563604]}
{'': [nan, 0.22267175533354386], 'false': [nan, 0.22267175533354386], 'false,false': [nan, 0.22267175533354386], 'false,false,false': [nan, 0.22267175533354386]}
{'': [nan, 0.22258298409454502], 'false': [nan, 0.22258298409454502], 'false,false': [nan, 0.22258298409454502], 'false,false,false': [nan, 0.22258298409454502]}
{'': [nan, 0.2225149594811448], 'false': [nan, 0.2225149594811448], 'false,false': [nan, 0.2225149594811448], 'false,false,false': [nan, 0.2225149594811448]}
{'': [nan, 0.22246288602647932], 'false': [nan, 0.22246288602647932], 'false,false': [nan, 0.22246288602647932], 'false,false,false': [nan, 0.22246288602647932]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
