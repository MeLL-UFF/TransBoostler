Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.057
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10613677918620204;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7264677333541003;  // std dev = 0.107, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.032344729676275524;  // std dev = 3.765, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10163770954154148;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12058814526804336;  // std dev = 2.983, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5633891378555328;  // std dev = 0.929, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7315493690970485;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7944288934001411;  // std dev = 0.123, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5643290406600241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5606216125634919;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5606216125634919;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.042504917029176;  // std dev = 3.676, 218.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=21 */
%   | | | else return 0.048622478498835935;  // std dev = 2.471, 53.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4799923079857521;  // std dev = 1.988, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | else return -0.12021830690792791;  // std dev = 0.145, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.48594072695811963;  // std dev = 0.114, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.11059434206853648;  // std dev = 0.089, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12448117947797493;  // std dev = 1.998, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3297194058339968;  // std dev = 0.547, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.3892092517658552;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.26264782210723847;  // std dev = 0.989, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6282224338620659;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09342025287996157;  // std dev = 1.416, 199.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=4 */
%   | | else return -0.008052172296839714;  // std dev = 0.281, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03073288837573038;  // std dev = 3.391, 274.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2616560535861171;  // std dev = 0.054, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5339475257965717;  // std dev = 0.725, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1226509618655908;  // std dev = 0.162, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.11880475227465757;  // std dev = 0.140, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28874655806547705;  // std dev = 1.599, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.08223141743914933;  // std dev = 2.053, 238.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0018739648342089936;  // std dev = 0.716, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17980148465910034;  // std dev = 1.000, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.26066448116801266;  // std dev = 0.073, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03541491409254299;  // std dev = 1.850, 142.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=17 */
%   | | | else return -0.039973396896139025;  // std dev = 1.191, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02524776438521251;  // std dev = 1.520, 76.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=13 */
%   | | | else return 0.1240288229240377;  // std dev = 1.476, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12384809384379264;  // std dev = 0.234, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3016566386397264;  // std dev = 0.777, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09216881971079291;  // std dev = 0.103, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38270209785578274;  // std dev = 0.379, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09059319064371725;  // std dev = 0.000706, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06558104468394127;  // std dev = 1.499, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16312482377386078;  // std dev = 1.908, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.042757707326755955;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08534658599071528;  // std dev = 0.081, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08191219252995828;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.03185345538030956;  // std dev = 0.477, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12998447272244945;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06410102631039921;  // std dev = 1.752, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.961', 'seconds']
Parameter learned model CLL:-0.115495 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 178, 0], 'true,false,false,true': [0.982, 27, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 1, 0], 'false,false': [6.97e-09, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.107, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.765, 179, 22], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.986, 35, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.983, 41, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.929, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.123, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 9], 'false,false,true,false': [3.65e-08, 0, 8], 'false,false,false,true': [3.676, 197, 21], 'false,false,false,false': [2.471, 42, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.988, 2, 97], 'true,false': [0.145, 202, 0], 'false,true,true': [0.114, 0, 19], 'false,true,false': [0.089, 36, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.998, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.547, 0, 73], 'true,false': [0.096, 0, 4], 'false,true,true': [0.989, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.06, 0, 17], 'false,false,true,false': [1.416, 195, 4], 'false,false,false': [0.281, 61, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.391, 183, 91], 'false,true': [0.054, 0, 13], 'false,false,true': [0.725, 0, 22], 'false,false,false,true': [0.162, 42, 0], 'false,false,false,false': [0.14, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.599, 1, 107], 'true,false': [2.053, 227, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.716, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.0, 1, 80], 'true,false,true': [0.073, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.85, 125, 17], 'false,false,true,false': [1.191, 35, 5], 'false,false,false,true': [1.52, 63, 13], 'false,false,false,false': [1.476, 13, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.234, 5, 77], 'false,true,true,true': [0.777, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.103, 208, 0], 'false,false,true,true': [0.379, 0, 9], 'false,false,true,false': [0.000706, 24, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.499, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.908, 3, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.081, 180, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.477, 13, 2], 'false,true': [0.058, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.752, 30, 17]}]
{'': [0.22222222222222435, 0.2204589843750001], 'true': [0.027500889996442155, 0.009477804995306718], 'false': [0.07939508506616269, 4.603363760640893e-17], 'false,true': [0.04338842975206614, 0.0], 'true,false': [-1.9709577291098283e-16, 0.060353798126951116], 'true,false,false': [0.034438775510204134, 0.22222222222222224]}
{'': [0.0001406536908220866, 0.09152219448579064], 'false': [0.06961118049025136, 0.13071367617305166], 'false,false': [0.027006172839506192, 0.16582061784901225], 'false,false,false': [0.0, 0.1534098009326071], 'false,true': [nan, 0.06961118049025136], 'false,true,false': [0.0705226887300325, 2.3129646346357427e-18], 'false,false,true': [nan, 0.027006172839506192]}
{'': [0.01291285960929127, 0.08838051018792445], 'false': [nan, 0.08838051018792456], 'false,false': [2.0898315757650005e-16, 0.07370285417533598], 'false,false,false': [0.061994711110396755, 0.11518074344568838], 'true': [0.012361109513107019, 0.01429933445149493], 'true,false': [0.00760070853380268, 0.0], 'true,true': [0.012142461544716649, 0.0], 'false,false,true': [1.4802973661668753e-16, 1.6653345369377348e-16]}
{'': [0.09271072321162124, 0.10865458348221593], 'false': [0.08940223212206484, 0.14786483333424802], 'false,false': [nan, 0.14786483333424802], 'false,false,false': [nan, 0.14786483333424802], 'true': [0.03990202056671317, 0.00010375947784736593], 'false,true': [0.01304639015162976, 0.007875780184690406]}
{'': [0.004173637695691498, 0.05992479715128313], 'false': [0.054305048036124175, 0.05525606643395795], 'false,false': [0.04706357573882575, 0.07922126362898389], 'false,true': [0.054305048036124175, nan], 'false,false,true': [0.00021154978612776133, 0.010079626576970232], 'true': [0.004091289148820166, 0.0023213032327577543]}
{'': [0.041956187571520115, 0.07854450443030961], 'false': [0.00022823494006732123, 0.08298144511474458], 'false,false': [0.02386103850096162, 0.0006371643559542216], 'true': [nan, 0.04195618757151957], 'true,false': [nan, 0.041956187571520115], 'false,false,false': [0.0006221881024219066, 0.0006495016694394044]}
{'': [0.04912226840267313, 0.019010878632293796], 'true': [0.023684270193210732, 0.017707575877092704], 'false': [nan, 0.019010878632293796], 'false,false': [nan, 0.019010878632293796], 'false,false,false': [nan, 0.019010878632293796]}
{'': [0.012265866377881298, 0.03513985607441187], 'false': [nan, 0.035139856074412244], 'false,false': [0.026606617867373547, 0.049689696980341515], 'false,false,false': [0.03040620356496, 0.0990243202468078], 'false,false,true': [0.024103753138311923, 0.03547557487149483], 'true': [0.01234482809581392, 0.002686654626231258], 'true,false': [0.002686654626231258, nan]}
{'': [0.054753663700902955, 0.030814773847196057], 'false': [0.020479369234186372, 0.06785152790609361], 'false,false': [0.048789123875399965, 0.09363734630994847], 'false,false,false': [nan, 0.09363734630994847], 'false,false,true': [0.01597817691681073, 2.077146414244946e-08], 'false,true': [0.018843196880854576, 5.128917177641391e-05], 'false,true,true': [0.018843196880854576, nan]}
{'': [0.027825287060368836, 0.060592748362834424], 'false': [0.0008274028607478182, 0.06533871929413743], 'false,false': [nan, 0.06533871929413743], 'true': [0.04366611324675997, 0.0013085929848071773], 'true,true': [0.03751370047702066, 0.09021031576730884], 'true,false': [3.660596660328327e-05, 0.008462960050813206], 'true,false,false': [-1.982541115402065e-18, 0.015151988961103905]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.36
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8155957436101503;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6830059751214587;  // std dev = 0.200, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | else return 0.7308259971691815;  // std dev = 0.142, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.03535572457927854;  // std dev = 3.305, 158.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=17 */
%   | | | else return 0.0017274959852359752;  // std dev = 1.754, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1170570166679058;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13294298333209426;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7816289395752953;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07100894815870135;  // std dev = 3.053, 73.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5346173915127165;  // std dev = 0.224, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | else if ( follows(E, A) )
%   | | then return 0.805726960273637;  // std dev = 0.067, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.42094364914143234;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.39768570145994603;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5525613581895996;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5525613581895996;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.0625647225501927;  // std dev = 0.219, 210.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07614698918155417;  // std dev = 2.178, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.15816097686538283;  // std dev = 1.915, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.41063974130601827;  // std dev = 0.167, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4128267905445864;  // std dev = 1.293, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.6729101862027529;  // std dev = 0.963, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.11960853011624871;  // std dev = 0.148, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.4597367576475521;  // std dev = 0.059, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5901479565239908;  // std dev = 0.349, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11996864410340137;  // std dev = 0.028, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20024497669071017;  // std dev = 1.079, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.14140143342505881;  // std dev = 1.477, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F), follows(G, A) )
%   | | then return 0.34798194615523204;  // std dev = 0.124, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.08242392321476004;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2014842156166138;  // std dev = 1.342, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0.4471545587042307;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.32677601474432516;  // std dev = 0.084, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then if ( follows(K, L), recursion_accounttype(L, B) )
%   | | | then return 0.515047562612002;  // std dev = 1.019, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09066912977732562;  // std dev = 1.263, 158.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=4 */
%   | | else if ( follows(M, A) )
%   | | | then return -0.06815693505165392;  // std dev = 1.192, 58.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=3 */
%   | | | else return 0.133371702948856;  // std dev = 1.800, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.28611088827800224;  // std dev = 0.383, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.05131769898640608;  // std dev = 1.943, 156.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=14 */
%   | | | else return -0.03247203649419549;  // std dev = 0.526, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return -0.025793681575416897;  // std dev = 0.202, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2710800439103001;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14259327224323937;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.4521981416625968;  // std dev = 0.296, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5691650516247919;  // std dev = 0.283, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13600626928944407;  // std dev = 0.041, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22386842561226872;  // std dev = 0.192, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.2109408550020912;  // std dev = 0.917, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.49266028669153755;  // std dev = 0.275, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.0922895013333545;  // std dev = 0.062, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.33389008256758834;  // std dev = 0.251, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11727580948192258;  // std dev = 0.154, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.0766650004926036;  // std dev = 0.891, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.03795199156858969;  // std dev = 1.196, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then if ( follows(A, C), tweets(A, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.1295226385677243;  // std dev = 1.376, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return 0.015487550848425976;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.19652582005813762;  // std dev = 0.158, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(C, F), follows(A, F) )
%   | | then return -0.07515941852095695;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.09710694896929786;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(G, A) )
%   | then return -0.053901524338963995;  // std dev = 0.155, 247.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then return 0.04182942029374111;  // std dev = 0.197, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.014967076759203831;  // std dev = 0.757, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.004846450778584685;  // std dev = 1.421, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.18070295183108814;  // std dev = 0.363, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( tweets(A, F) )
%   | | then return -0.041583177919251035;  // std dev = 0.851, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.08506651850479387;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.26754316482327145;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.03848168747134303;  // std dev = 0.144, 246.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=32 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.30935424881100076;  // std dev = 0.274, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10107172119235919;  // std dev = 0.030, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.012432295421414916;  // std dev = 0.755, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.019223951067885332;  // std dev = 1.229, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.13482574533775657;  // std dev = 1.017, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | | else return 0.0707127818219167;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.3633057602212871;  // std dev = 0.082, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.0742670862371606;  // std dev = 0.033, 197.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.19603194442489308;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07652076297521165;  // std dev = 0.479, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.02186778203829448;  // std dev = 0.843, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02056154856439818;  // std dev = 0.754, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.023839819189109074;  // std dev = 1.180, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.892', 'seconds']
Refined model CLL: -0.111498


******************************************
Best model found
******************************************
Results 

CLL : -0.114157 

AUC ROC : 0.994415 

AUC PR : 0.364819 

Precision : 0.343387 

Recall : 0.948718 

F1 : 0.504259 

Total Learning Time : 9.36 

Total Inference Time : 17.721322536468506 

Total revision time: 42.28315085601807
Best scored revision CLL: -0.111498


Results 

CLL : -0.114157 

AUC ROC : 0.994415 

AUC PR : 0.364819 

Precision : 0.343387 

Recall : 0.948718 

F1 : 0.504259 

Total Learning Time : 43.75419921112061 

Total Inference Time : 17.721322536468506 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.316
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1067633456022421;  // std dev = 1.389, 57.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7157632251699306;  // std dev = 1.006, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03747300104535762;  // std dev = 3.516, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.055108941140330193;  // std dev = 1.794, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7247539622367456;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11054536953015211;  // std dev = 4.567, 143.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5609351166100627;  // std dev = 1.069, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7118180400920281;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4494434195883163;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.46834356595506804;  // std dev = 0.767, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5006915970388813;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020571872499562667;  // std dev = 4.623, 271.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=34 */
%   | | | else return 0.07937459948810785;  // std dev = 3.462, 91.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.510468771766151;  // std dev = 2.133, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else return -0.12499217385300466;  // std dev = 0.211, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46028559488091564;  // std dev = 0.094, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.130424827227594;  // std dev = 0.000722, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4466492781914613;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.073427356112262;  // std dev = 3.403, 81.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.32903151202897785;  // std dev = 0.540, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.011977370367638268;  // std dev = 0.552, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32286775921789096;  // std dev = 0.025, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4618929166440642;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6087318731389355;  // std dev = 0.091, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09805496111308726;  // std dev = 1.350, 190.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=3 */
%   | | else return 0.005576310703731384;  // std dev = 0.303, 156.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03558821599563091;  // std dev = 3.034, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2653783559561689;  // std dev = 0.173, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5260145083923418;  // std dev = 1.369, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12571113486391172;  // std dev = 0.197, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.12446131200607882;  // std dev = 0.167, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2987151908938182;  // std dev = 1.653, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09223285459595287;  // std dev = 1.682, 250.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.032137260047873414;  // std dev = 2.192, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18915369017837697;  // std dev = 0.098, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2548561721643084;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03874337797822464;  // std dev = 1.875, 156.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=18 */
%   | | | else return -0.08618956678262811;  // std dev = 0.630, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01146086475486287;  // std dev = 2.180, 124.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=28 */
%   | | | else return 0.024216676209589824;  // std dev = 2.630, 90.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13884917843840028;  // std dev = 0.191, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29315695513382456;  // std dev = 0.914, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09340620743651472;  // std dev = 0.119, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.28091938798404703;  // std dev = 0.958, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.0948267697406669;  // std dev = 0.053, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05619206553128588;  // std dev = 2.408, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1522521952527676;  // std dev = 1.782, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.16465522354482473;  // std dev = 0.372, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08453877529227745;  // std dev = 0.057, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09214993993283532;  // std dev = 0.015, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.007383671439074661;  // std dev = 0.965, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13171287238723392;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03008380473366177;  // std dev = 2.795, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.091', 'seconds']
Parameter learned model CLL:-0.115728 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 160, 0], 'true,false,false,true': [1.389, 55, 2], 'true,false,false,false': [1.095, 3, 2], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 88, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.006, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.516, 163, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.794, 44, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.567, 103, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.069, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.767, 1, 6], 'false,false,true,false': [0.968, 1, 15], 'false,false,false,true': [4.623, 237, 34], 'false,false,false,false': [3.462, 68, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.133, 2, 115], 'true,false': [0.211, 246, 0], 'false,true,true': [0.094, 0, 17], 'false,true,false': [0.000722, 32, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.403, 58, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.54, 0, 77], 'true,false': [0.552, 1, 1], 'false,true,true': [0.025, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.091, 0, 26], 'false,false,true,false': [1.35, 187, 3], 'false,false,false': [0.303, 128, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.034, 154, 82], 'false,true': [0.173, 0, 22], 'false,false,true': [1.369, 1, 52], 'false,false,false,true': [0.197, 74, 0], 'false,false,false,false': [0.167, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.653, 1, 121], 'true,false': [1.682, 243, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.192, 60, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.098, 0, 83], 'true,false,true': [0.028, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.875, 138, 18], 'false,false,true,false': [0.63, 25, 1], 'false,false,false,true': [2.18, 96, 28], 'false,false,false,false': [2.63, 66, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.191, 3, 78], 'false,true,true,true': [0.914, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.119, 236, 0], 'false,false,true,true': [0.958, 1, 19], 'false,false,true,false': [0.053, 41, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.408, 47, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.782, 3, 85], 'true,true,false': [0.372, 0, 19], 'true,false,true': [0.057, 145, 0], 'true,false,false,true': [0.015, 24, 0], 'true,false,false,false': [0.965, 18, 4], 'false,true': [0.06, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.795, 92, 40]}]
{'': [0.22050794061400245, 0.22760935585273656], 'false': [0.019991670137443407, 7.569702440626067e-17], 'true': [0.02725128832212642, 0.01769336904472029], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.4432899320127036e-16, 0.060353798126950985], 'true,false,false': [0.033856571252693084, 0.24000000000000005]}
{'': [0.011767041741458997, 0.11128948765692151], 'false': [0.0679057531314943, 0.1425485215743632], 'false,false': [0.0670167278554693, 0.15708373626948607], 'false,false,false': [0.0, 0.14588476632218117], 'false,true': [nan, 0.0679057531314943], 'false,true,false': [0.0679057531314943, nan], 'false,false,true': [nan, 0.0670167278554693]}
{'': [0.02822258470630663, 0.10566420203722947], 'false': [nan, 0.10566420203722933], 'false,false': [0.06657320715454337, 0.0940204110928284], 'false,false,false': [0.07884753019707674, 0.1317274082951108], 'false,false,true': [0.08408403932840744, 0.05859375000000011], 'true': [0.016808622121465715, 0.09111107030801362], 'true,false': [0.016517653822407885, 0.09876543209876555], 'true,true': [0.016808622121465715, nan]}
{'': [0.10086233797546112, 0.12020245388432262], 'false': [0.08215113133752623, 0.14293595278517268], 'false,false': [0.0, 0.14300187950538107], 'false,false,false': [nan, 0.14300187950538104], 'true': [0.0388955637481565, 0.0001805062784701646], 'false,true': [0.008909172387399862, 5.210626496700288e-07]}
{'': [0.010028205248036706, 0.0760630633440647], 'false': [0.0009069341492844547, 0.0743202426621474], 'false,false': [0.06136532760908806, 0.09205790647711985], 'false,false,true': [0.0003176532427951419, 0.009588486761754316], 'true': [0.0037880972214691644, 0.15229392992487362], 'false,true': [3.1900171159593425e-05, 0.0]}
{'': [0.03901236101981344, 0.08978109770083585], 'false': [0.001356117839374696, 0.09549213945922379], 'false,false': [0.035347320200884706, 0.00048685531757054664], 'true': [nan, 0.03901236101981342], 'true,false': [nan, 0.03901236101981344], 'false,false,false': [0.0005249538800665128, 0.0004412608862022991]}
{'': [0.04863167137728515, 0.05458071939133923], 'false': [nan, 0.05458071939133931], 'false,false': [nan, 0.05458071939133923], 'false,false,false': [nan, 0.05458071939133923], 'true': [0.022390932203060834, 0.011312083112539928]}
{'': [0.00022046034544265366, 0.04023621887527854], 'false': [nan, 0.040236218875278444], 'false,false': [0.021776544062487444, 0.054829143896580196], 'false,false,false': [0.03832848327504957, 0.07682582676897254], 'false,false,true': [0.022537379982513445, 0.015281979257706392], 'true': [0.00011496994313581801, 0.0003830680465145425], 'true,false': [0.0003830680465145425, nan]}
{'': [0.036444927341126046, 0.037174962704779976], 'false': [0.020947356922141232, 0.06697817131178857], 'false,false': [0.04620664462318524, 0.08524538634516514], 'false,false,false': [nan, 0.08524538634516514], 'false,false,true': [0.04589644524569135, 6.774006650256539e-05], 'false,true': [0.021962355253532673, 5.99067796063017e-05], 'false,true,true': [0.021962355253532673, nan]}
{'': [0.026958695642713196, 0.05639058735232056], 'false': [0.00045113400724875255, 0.059190659115328524], 'false,false': [nan, 0.0591906591153285], 'true': [0.030992485918724846, 0.005528690628806378], 'true,true': [0.03608276784811138, 0.007289924702599026], 'true,false': [2.2257726024048783e-05, 0.0220627394065099], 'true,false,false': [9.893353561230464e-06, 0.042371526894252165]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 15.792
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.06867525088898598;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 2.11e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else if ( recursion_accounttype(K, B) )
%   | then return 0.8581489350995121;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7056818150476124;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7382393028622304;  // std dev = 0.166, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6724640623802378;  // std dev = 0.980, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12544463852839113;  // std dev = 7.30e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.08807720755583032;  // std dev = 0.183, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.007561065381489885;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.0720625942818756;  // std dev = 1.283, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13476248837999946;  // std dev = 4.455, 129.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.5213506557500609;  // std dev = 0.200, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | else return 0.6378055076964548;  // std dev = 0.085, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return -0.12190542151448505;  // std dev = 0.207, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.5663986353244149;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, F), follows(F, H) )
%   | | | then return -0.11623407549485208;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.1184267430448582;  // std dev = 0.812, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return 0.3404124492575164;  // std dev = 0.863, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17315354524998183;  // std dev = 2.580, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return 0.15037732497893871;  // std dev = 1.776, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4065487340368705;  // std dev = 0.982, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.4688273225130575;  // std dev = 0.496, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.5134682444715054;  // std dev = 0.063, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.11027338792792424;  // std dev = 0.214, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.47401212676095017;  // std dev = 0.114, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11741148192381146;  // std dev = 0.126, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.4183735912429456;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.07503788318277761;  // std dev = 2.712, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0.06022204805393798;  // std dev = 1.852, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.28678531073334224;  // std dev = 1.380, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.1309083338872241;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.322027093082351;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.373090206594438;  // std dev = 0.124, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.321665698010939;  // std dev = 0.035, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.30497338093954396;  // std dev = 1.374, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return -0.08847027080452291;  // std dev = 1.050, 177.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06064437029532465;  // std dev = 1.293, 58.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=3 */
%   | | | else return 0.0763595007521871;  // std dev = 3.222, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2693403448853534;  // std dev = 0.102, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2177648750497266;  // std dev = 0.971, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.08409659836878268;  // std dev = 2.36e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else return -0.06448409673357056;  // std dev = 0.150, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2597668751179328;  // std dev = 0.185, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3590994480731951;  // std dev = 0.594, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.6054849042242819;  // std dev = 0.307, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13612971975959562;  // std dev = 0.308, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.12722204836847617;  // std dev = 0.296, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.2153167928781187;  // std dev = 0.120, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.2625164784078228;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, F) )
%   | | | then return -0.0710775786697892;  // std dev = 0.435, 92.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=2 */
%   | | | else return -0.08718093529950346;  // std dev = 0.079, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.22310659704121064;  // std dev = 1.429, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return -0.08729797323846605;  // std dev = 0.119, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1867320732688073;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.0036159463931243496;  // std dev = 1.458, 78.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=19 */
%   | | | else return 0.03844691950625442;  // std dev = 2.409, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1832077354429675;  // std dev = 0.017, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.19808015482600297;  // std dev = 0.077, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5214447168680045;  // std dev = 0.214, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.07480768172279027;  // std dev = 0.068, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return -0.08791600682728244;  // std dev = 0.471, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, J), recursion_accounttype(J, B) )
%   | | | then return 0.22637695763962812;  // std dev = 0.267, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09131516496660322;  // std dev = 0.995, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03347189397422945;  // std dev = 1.840, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return -0.002122189222053516;  // std dev = 1.857, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.16562643406365848;  // std dev = 0.022, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return 0.14433393503313688;  // std dev = 0.031, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.17045729820077365;  // std dev = 0.324, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.28569267025175876;  // std dev = 0.368, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07184090534257274;  // std dev = 0.142, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2603336188265702;  // std dev = 0.230, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09009799594666083;  // std dev = 0.060, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.04471568353939703;  // std dev = 1.893, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0.14805458368128063;  // std dev = 1.296, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.14332033091799679;  // std dev = 0.041, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.5304866279051874;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.14613501561308043;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.0627069992703525;  // std dev = 0.054, 212.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=4 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.010253209714478973;  // std dev = 0.325, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J) )
%   | | | then return 0.003734468392721941;  // std dev = 1.959, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return -0.026996720340335595;  // std dev = 0.944, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.020075771862836763;  // std dev = 0.593, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.040770972115423874;  // std dev = 1.306, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.663', 'seconds']
Refined model CLL: -0.110288


******************************************
Best model found
******************************************
Results 

CLL : -0.10253 

AUC ROC : 0.993101 

AUC PR : 0.361155 

Precision : 0.346369 

Recall : 0.984127 

F1 : 0.512397 

Total Learning Time : 15.792 

Total Inference Time : 31.15302014350891 

Total revision time: 66.13257976341248
Best scored revision CLL: -0.110288


Results 

CLL : -0.10253 

AUC ROC : 0.993101 

AUC PR : 0.361155 

Precision : 0.346369 

Recall : 0.984127 

F1 : 0.512397 

Total Learning Time : 67.60362811851502 

Total Inference Time : 31.15302014350891 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.209
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8126943896449649;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6977861707984718;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5640044639620104;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360694;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3990194759064378;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43180636115233867;  // std dev = 9.13e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2846422688739468;  // std dev = 2.574, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 8.16e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.268964564883689;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21845459105041368;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.83e-08, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16711848991688627;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.25e-07, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10745941559175835;  // std dev = 0.232, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420278;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14371564880921184;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.61e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.490', 'seconds']
Parameter learned model CLL:-0.092889 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 232, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 274, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 232, 0], 'false,true,true': [9.13e-09, 0, 8], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.574, 7, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 238, 0], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 255, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.83e-08, 232, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.25e-07, 233, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.232, 8, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 258, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 246, 0]}]
{'': [0.043388429752070364, -2.029028286383907e-16], 'false': [-2.029028286383907e-16, nan]}
{'': [0.029822485207098848, -8.584624130930579e-17], 'false': [-8.584624130930579e-17, nan]}
{'': [0.007812015624030647, -1.1021192069271627e-16], 'false': [nan, -1.1021192069271627e-16]}
{'': [0.06753338966858982, 0.060607476294428454], 'true': [0.03171190540177344, -7.656710514656253e-17], 'false': [0.060607476294428454, nan], 'false,true': [8.326672684688674e-17, -3.0839528461809902e-18]}
{'': [0.04981832208802296, 4.545795061457334e-17], 'true': [0.04981832208802296, nan], 'false': [nan, 4.545795061457334e-17], 'false,false': [2.7988815746852685e-17, -5.204170427930421e-18], 'false,false,true': [nan, 2.7988815746852685e-17]}
{'': [0.007808056533715162, 3.395976310618126e-17], 'false': [nan, 3.395976310618126e-17], 'false,false': [nan, 3.395976310618126e-17]}
{'': [0.007808280185048598, 2.0098865100972662e-17], 'false': [nan, 2.0098865100972662e-17], 'false,false': [nan, 2.0098865100972662e-17], 'false,false,false': [2.0098865100972662e-17, nan]}
{'': [0.02270199337879472, 5.4630021846634684e-17], 'true': [0.02270199337879472, nan], 'false': [6.670867959121113e-17, -6.573688961596321e-18], 'false,false': [nan, -6.573688961596321e-18]}
{'': [0.053922964163597265, -2.5042624615605033e-17], 'false': [nan, -2.5042624615605033e-17], 'false,false': [-1.7212760071707853e-17, 0.0], 'false,false,true': [nan, -1.7212760071707853e-17]}
{'': [0.007808902988758871, 2.7078610356711136e-18], 'false': [nan, 2.7078610356711136e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 29.961
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048816;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7200165983377761;  // std dev = 0.015, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.6742534501269809;  // std dev = 0.980, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7248217063827322;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( tweets(H, G), follows(A, H) )
%   | | | then return 0.6682685311077186;  // std dev = 0.980, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.39693316398137063;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.7214971156679073;  // std dev = 0.031, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.6285643213018635;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.12544463852839186;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5240662351954527;  // std dev = 1.368, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.35278994287270715;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5686663283769056;  // std dev = 0.103, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5612885039981843;  // std dev = 0.030, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4527996829020412;  // std dev = 0.910, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.44662579613642717;  // std dev = 0.946, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4348301717019037;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360676;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.43511612072935396;  // std dev = 0.248, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.33670134266258245;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783621;  // std dev = 9.13e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.3081072919738119;  // std dev = 0.995, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.34147202449402747;  // std dev = 0.095, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3613319141311502;  // std dev = 0.112, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.32578286848054655;  // std dev = 0.067, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.255640776857268;  // std dev = 0.935, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.1660138517097938;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2904429144261971;  // std dev = 0.856, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926049;  // std dev = 7.60e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(F, B) )
%   | | | then return 0.2624965670844526;  // std dev = 0.110, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.2792685972218464;  // std dev = 0.120, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.3068858163101058;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.05790661580516247;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2626844500953938;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2915048410692052;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.08518475138839678;  // std dev = 5.19e-09, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.08518475138839678;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.1907862205204155;  // std dev = 1.387, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | | else return -0.1298679692541997;  // std dev = 1.344, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.17318668436562903;  // std dev = 0.985, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.23133370342684678;  // std dev = 0.057, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.05429329618611587;  // std dev = 0.386, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.07877675473109147;  // std dev = 8.23e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.07877675473109168;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.07877675473109166;  // std dev = 1.67e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.18396384675420668;  // std dev = 0.043, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.20106726692022434;  // std dev = 0.101, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.008568349309136813;  // std dev = 1.218, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.19465979155260127;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2463396314910793;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.18617133726692478;  // std dev = 0.048, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2374395339971082;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333675;  // std dev = 7.79e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.14060998036234054;  // std dev = 0.995, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.057519266545588164;  // std dev = 1.643, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.18499193872029396;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16601097847969018;  // std dev = 0.045, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.20371336299538959;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.15961049031985045;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.19715169668308932;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 4.27e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.06842697784420268;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(E, A), tweets(F, G) )
%   | | | then return 0.14341030810107824;  // std dev = 0.078, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.12920716584079744;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1691605049253027;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.164802787432968;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.04585299016888253;  // std dev = 1.263, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.15504847015461992;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14185564286570787;  // std dev = 0.029, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return -0.06419184008202618;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.381', 'seconds']
Refined model CLL: -0.091363


******************************************
Best model found
******************************************
Results 

CLL : -0.085309 

AUC ROC : 0.996846 

AUC PR : 0.573658 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 29.961 

Total Inference Time : 4.823976993560791 

Total revision time: 51.062409324646
Best scored revision CLL: -0.091363


Results 

CLL : -0.085309 

AUC ROC : 0.996846 

AUC PR : 0.573658 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.09583298683167 

Total Inference Time : 4.823976993560791 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.51
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 1.69e-07, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6994914035015026;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839216;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5537863633693071;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360696;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3912849088077688;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4288788937701737;  // std dev = 1.05e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.1015963294878361;  // std dev = 4.56e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2995846921108773;  // std dev = 2.321, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926044;  // std dev = 1.21e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2532566920834329;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21227274932546975;  // std dev = 1.404, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 3.94e-08, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14127690628264028;  // std dev = 2.760, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.26e-07, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14429749356276741;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | | else return -0.06842697784420262;  // std dev = 2.63e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12539634524592347;  // std dev = 0.153, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202587;  // std dev = 7.57e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.660', 'seconds']
Parameter learned model CLL:-0.087202 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [1.69e-07, 323, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 327, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 286, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.194, 5, 128], 'true,false': [0.0, 248, 0], 'false,true,true': [1.05e-08, 0, 28], 'false,true,false': [4.56e-09, 75, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.321, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.21e-07, 265, 0], 'false,false,false': [0.0, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.714, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 342, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.404, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.94e-08, 307, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.76, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 234, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 256, 0], 'false,false,false': [2.63e-09, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.153, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.57e-09, 321, 0]}]
{'': [0.024375000000006076, 8.799290845326319e-17], 'false': [8.799290845326319e-17, nan]}
{'': [0.02437499999999968, -1.1407796216331884e-16], 'false': [-1.1407796216331884e-16, nan]}
{'': [0.012497997115847155, -1.1024592272501555e-16], 'false': [nan, -1.1024592272501555e-16]}
{'': [0.06782985612603419, 0.055702547010117454], 'true': [0.03618067725705192, -7.162729191130042e-17], 'false': [0.055702547010117454, nan], 'false,true': [1.2688263138573217e-16, 2.2204460492503132e-17]}
{'': [0.03325332399171348, 1.0489223668237675e-16], 'true': [0.03325332399171348, nan], 'false': [nan, 1.0489223668237675e-16], 'false,false': [5.530167518887572e-17, -2.912060392459427e-17], 'false,false,true': [nan, 5.530167518887572e-17]}
{'': [0.018470674715986332, 3.765668738494683e-17], 'false': [nan, 3.765668738494683e-17], 'false,false': [nan, 3.765668738494683e-17]}
{'': [0.01247496962192294, 5.062906301222212e-18], 'false': [nan, 5.062906301222212e-18], 'false,false': [nan, 5.062906301222212e-18], 'false,false,false': [5.062906301222212e-18, nan]}
{'': [0.04644347129882306, 3.936961080231052e-17], 'true': [0.04644347129882306, nan], 'false': [6.737250833195394e-17, -1.0408340855860843e-17], 'false,false': [nan, -1.0408340855860843e-17]}
{'': [0.02433308369085414, -6.009127922063554e-17], 'false': [nan, -6.009127922063554e-17], 'false,false': [-1.3877787807814457e-17, 7.086529944415892e-18], 'false,false,true': [nan, -1.3877787807814457e-17]}
{'': [0.023522835491499382, 5.810513026075585e-17], 'false': [nan, 5.810513026075585e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 45.424
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.8581489350995118;  // std dev = 2.67e-07, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.7249115523374756;  // std dev = 0.063, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.6689588667184831;  // std dev = 0.986, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.44516201752484313;  // std dev = 1.172, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.6610941491928664;  // std dev = 0.912, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I), follows(A, I) )
%   | | | then return 0.7279113422921071;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6634497975065878;  // std dev = 0.974, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.7196130910816015;  // std dev = 0.004, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5668401313979491;  // std dev = 0.276, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else return -0.1123163781936068;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.42934361129021875;  // std dev = 0.193, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | | else return 0.3426524167863605;  // std dev = 0.981, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22483961267164143;  // std dev = 1.497, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.3927209390911314;  // std dev = 0.979, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4146919929165201;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783619;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.31946732724605664;  // std dev = 0.028, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.23935968651369208;  // std dev = 0.945, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.349423245696661;  // std dev = 0.197, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.32824075141186976;  // std dev = 0.187, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1521328667244257;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.28720821531467383;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926042;  // std dev = 1.62e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | else return -0.092691276189261;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.2197820031305659;  // std dev = 1.363, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.27424029896850494;  // std dev = 0.092, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.31219283262994113;  // std dev = 0.146, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.26307164534715055;  // std dev = 0.036, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.1806541851665175;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.0812505767382445;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2867079141668991;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.25989730799403454;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 6.11e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.21624319145027415;  // std dev = 0.052, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.24334086016945067;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.29706248837410826;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.2168280104086678;  // std dev = 0.075, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.13219516970564787;  // std dev = 1.242, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.22044167667905;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.22624024428680828;  // std dev = 0.070, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, G), recursion_accounttype(F, B) )
%   | | | then return 0.13775020526567908;  // std dev = 1.371, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.19360216853874143;  // std dev = 0.096, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( recursion_accounttype(E, B), follows(E, H) )
%   | | | then return -0.05495414921756246;  // std dev = 1.205, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.12664125675661445;  // std dev = 0.984, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return 0.18489572354131248;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, K), follows(L, A) )
%   | | | then return 0.18862019145463702;  // std dev = 0.105, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.19235596921941023;  // std dev = 0.064, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, M) )
%   | then return -0.07324622576333686;  // std dev = 6.72e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.16001593236893474;  // std dev = 0.054, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.014004262474805906;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.16454444556082898;  // std dev = 0.050, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.19890398069065118;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.05771661192093694;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.1588879021257105;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.17323661679985983;  // std dev = 0.080, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.09821456533413105;  // std dev = 1.361, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   else return -0.06842697784420307;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), follows(F, D) )
%   | | | then return 0.14100847096538083;  // std dev = 0.060, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.16726203867815317;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.14170683881364982;  // std dev = 0.034, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.18959830170805878;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.04254389112492427;  // std dev = 1.299, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.3380868183283095;  // std dev = 0.989, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.1394048406084779;  // std dev = 0.045, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.14889546384047106;  // std dev = 0.034, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.06419184008202594;  // std dev = 6.91e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.887', 'seconds']
Refined model CLL: -0.085151


******************************************
Best model found
******************************************
Results 

CLL : -0.090911 

AUC ROC : 0.994557 

AUC PR : 0.465645 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.424 

Total Inference Time : 13.495222806930542 

Total revision time: 81.44398306274414
Best scored revision CLL: -0.085151


Results 

CLL : -0.090911 

AUC ROC : 0.994557 

AUC PR : 0.465645 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 81.4774067249298 

Total Inference Time : 13.495222806930542 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.045
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10959300038435871;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7229894122819326;  // std dev = 0.129, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.0138829499870365;  // std dev = 3.701, 167.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=22 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09331229762407448;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09645485940701404;  // std dev = 3.033, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5058218917198389;  // std dev = 2.160, 75.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=70 */
%   | | else return 0.7241915646448782;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8079262911067545;  // std dev = 0.103, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5643290406600241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5568720724481437;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5568720724481437;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.036122947914785285;  // std dev = 3.661, 196.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=21 */
%   | | | else return -0.005237245575719422;  // std dev = 2.588, 74.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4850017564791895;  // std dev = 1.959, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | else return -0.12015182019360249;  // std dev = 0.073, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4542183575260911;  // std dev = 0.200, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.10496144673980809;  // std dev = 0.097, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1972714826546025;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3246412600047668;  // std dev = 1.144, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.3919399045008474;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.25996631385071983;  // std dev = 0.989, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.621147603336311;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09321051631571929;  // std dev = 1.421, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   | | else return -0.011091052690798096;  // std dev = 0.271, 78.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018445265160911415;  // std dev = 3.703, 288.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26172682047921136;  // std dev = 0.081, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4506998739435866;  // std dev = 1.604, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11575203620374873;  // std dev = 0.084, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.12219246424989981;  // std dev = 0.157, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29215991395390717;  // std dev = 1.680, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07556185675527;  // std dev = 1.962, 216.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01736648741949576;  // std dev = 0.677, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1628784600931996;  // std dev = 1.696, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.26963231176724173;  // std dev = 0.059, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04958146752929587;  // std dev = 2.044, 156.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=17 */
%   | | | else return -0.03470503787150702;  // std dev = 1.210, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011951622887887139;  // std dev = 1.690, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | | else return 0.012759001304777487;  // std dev = 1.731, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13727404155186962;  // std dev = 0.223, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.30107483097089627;  // std dev = 0.783, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09198660136792942;  // std dev = 0.075, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4007207475115701;  // std dev = 0.381, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09114334205683883;  // std dev = 0.001, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06585874494311247;  // std dev = 1.622, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1796175257852081;  // std dev = 1.602, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.1411494654349747;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08537954197711876;  // std dev = 0.066, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0847853918708036;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.007387546373746929;  // std dev = 0.470, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.1952967512921174;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05089680917986822;  // std dev = 1.908, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.719', 'seconds']
Parameter learned model CLL:-0.113353 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 183, 0], 'true,false,false,true': [0.984, 30, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [7.21e-09, 47, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.129, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.701, 145, 22], 'false,true,false,false': [0.0, 8, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.033, 48, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.16, 5, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.103, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.661, 175, 21], 'false,false,false,false': [2.588, 63, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.959, 2, 97], 'true,false': [0.073, 188, 0], 'false,true,true': [0.2, 1, 19], 'false,true,false': [0.097, 29, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.897, 13, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.144, 1, 73], 'true,false': [0.106, 0, 4], 'false,true,true': [0.989, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.033, 0, 17], 'false,false,true,false': [1.421, 177, 4], 'false,false,false': [0.271, 67, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.703, 197, 91], 'false,true': [0.081, 0, 13], 'false,false,true': [1.604, 2, 22], 'false,false,false,true': [0.084, 19, 0], 'false,false,false,false': [0.157, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.68, 2, 107], 'true,false': [1.962, 205, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.677, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.696, 3, 80], 'true,false,true': [0.059, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.044, 139, 17], 'false,false,true,false': [1.21, 35, 5], 'false,false,false,true': [1.69, 49, 13], 'false,false,false,false': [1.731, 32, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.223, 5, 77], 'false,true,true,true': [0.783, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.075, 215, 0], 'false,false,true,true': [0.381, 0, 9], 'false,false,true,false': [0.001, 20, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.622, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.602, 2, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.066, 173, 0], 'true,false,false,true': [6.45e-09, 12, 0], 'true,false,false,false': [0.47, 8, 2], 'false,true': [1.155, 2, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.908, 38, 17]}]
{'': [0.2194020837926196, 0.21172022684310035], 'true': [0.009522928994084868, 0.009049018994599615], 'false': [0.04338842975206614, 5.196788625904988e-17], 'false,true': [0.04338842975206614, nan], 'true,false': [-2.0627094446587609e-16, 0.05246913580246913], 'true,false,false': [0.031217481789802347, 0.16000000000000003]}
{'': [0.00020205870764777054, 0.09909706437240368], 'false': [0.07882350685932661, 0.1308339765396847], 'false,false': [0.03443877551020413, 0.15515365197757858], 'false,false,false': [0.0, 0.14153918668033333], 'false,true': [nan, 0.07882350685932661], 'false,true,false': [0.08203052276266942, -6.938893903907228e-18], 'false,false,true': [nan, 0.03443877551020413]}
{'': [0.059839986241975826, 0.08925514127584751], 'false': [nan, 0.08925514127584765], 'false,false': [-5.224578939412501e-17, 0.07463629810330401], 'false,false,false': [0.06837746888100538, 0.0905212576081809], 'true': [0.06201224351540166, 0.014971466292977556], 'true,true': [0.06221163508613249, 0.0], 'true,false': [0.005354651928794363, 0.0], 'false,false,true': [-4.9343245538895844e-17, -5.551115123125783e-17]}
{'': [0.0961343526622437, 0.11840524077315116], 'false': [0.09665829755024313, 0.16354411733919355], 'false,false': [nan, 0.16354411733919355], 'false,false,false': [nan, 0.16354411733919355], 'false,true': [0.03985404022167414, 0.009454981036416442], 'true': [0.038752105813635536, 2.7995893758305472e-05]}
{'': [0.01714797195248521, 0.0614868360632184], 'false': [0.054378319043624, 0.05694360792397082], 'false,false': [0.050256533248435764, 0.0736085446609776], 'false,true': [0.054378319043624, nan], 'false,false,true': [6.426106645745728e-05, 0.011156442270883702], 'true': [0.017690837328896664, 0.0028081168635566978]}
{'': [0.04760228203931332, 0.0922490874783606], 'false': [0.0005050974399744343, 0.10096228627214043], 'false,false': [0.10720303362823709, 0.0005756702322871046], 'true': [nan, 0.04760228203931391], 'true,false': [nan, 0.04760228203931332], 'false,false,false': [0.0003724743432174046, 0.0006659407965909194]}
{'': [0.05067254410451226, 0.020835850929166958], 'true': [0.025902586369489496, 0.01782172556003], 'false': [nan, 0.020835850929166958], 'false,false': [nan, 0.020835850929166958], 'false,false,false': [nan, 0.020835850929166958]}
{'': [0.034145255465780164, 0.03894885169952207], 'false': [nan, 0.038948851699522065], 'false,false': [0.02880981241962325, 0.05694854167835981], 'false,false,false': [0.04604078766570473, 0.07307563945885298], 'true': [0.0346580276457922, 0.0017369753797363968], 'false,false,true': [0.026773983340745468, 0.03657340259836647], 'true,false': [0.0017369753797363968, nan]}
{'': [0.04976993185538184, 0.032016531300132316], 'false': [0.019924698481739556, 0.07641963181659436], 'false,false': [0.05679900709451674, 0.0974838162110461], 'false,false,false': [nan, 0.0974838162110461], 'false,false,true': [0.016170433816058427, 5.3226283686091946e-08], 'false,true': [0.01913785399403929, 2.5967033403552918e-05], 'false,true,true': [0.01913785399403929, nan]}
{'': [0.02463869402117367, 0.08693127296355892], 'false': [0.22252896562771293, 0.06617703321483197], 'false,false': [nan, 0.06617703321483197], 'true': [0.024549563845194286, 0.0014499918937535786], 'true,true': [0.026723009239654105, 1.3193922932653991e-05], 'true,false': [2.500870382757339e-05, 0.011520085002719371], 'true,false,false': [3.469446951953614e-18, 0.022076681649117406]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.698
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.14185106490048782;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7067620564067597;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.44399761434482066;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.05260687553361997;  // std dev = 3.128, 174.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=15 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0628828751040869;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1297677816274735;  // std dev = 0.034, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1300061548775243;  // std dev = 2.913, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5508165961886561;  // std dev = 0.929, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.5050363236885278;  // std dev = 0.973, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.6508672428564407;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6354828473685983;  // std dev = 0.117, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5606628090165641;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09986846279975528;  // std dev = 1.463, 126.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=3 */
%   | | | else return -0.003787894615035749;  // std dev = 2.742, 86.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08169611480147705;  // std dev = 2.017, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.21654947346545245;  // std dev = 1.889, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.4356068828528533;  // std dev = 0.375, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.1337973942793632;  // std dev = 1.120, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.41931797378978336;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7036435775748479;  // std dev = 0.176, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.11773903339219882;  // std dev = 0.233, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else if ( follows(I, A) )
%   | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | then return 0.492559950321869;  // std dev = 0.102, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1197922432217726;  // std dev = 0.117, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.2621346878122503;  // std dev = 1.011, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.103883654088355;  // std dev = 0.373, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3067092679616757;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.12438135254170636;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.06250301926159733;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4504277867454731;  // std dev = 0.290, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3210356972608935;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5129897870957459;  // std dev = 0.794, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09391188574867591;  // std dev = 1.167, 157.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0625502865759179;  // std dev = 1.256, 52.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=3 */
%   | | | else return 0.036577567851616026;  // std dev = 1.934, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.25371783528089537;  // std dev = 0.123, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return -0.001238432232787227;  // std dev = 0.908, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2764616091847982;  // std dev = 1.566, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.09180820690967252;  // std dev = 0.033, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else return -0.028601875368567665;  // std dev = 0.197, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2716882429847088;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.4034712335165408;  // std dev = 0.334, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5725539602587344;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13241081729657003;  // std dev = 0.037, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.19633532266751;  // std dev = 0.121, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return 0.23367649867045243;  // std dev = 0.176, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07814041949757673;  // std dev = 0.079, 167.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=3 */
%   | | else if ( follows(A, F), tweets(F, H) )
%   | | | then return 0.031081909623404336;  // std dev = 1.941, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return -0.07881846624713354;  // std dev = 0.543, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3129998893540225;  // std dev = 0.334, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13300844544732554;  // std dev = 0.140, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.06436734984511386;  // std dev = 0.834, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.05199006357070047;  // std dev = 1.176, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18120337656144883;  // std dev = 0.038, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.06630522606688011;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.27829604279381764;  // std dev = 0.089, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.34772798459018234;  // std dev = 0.139, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.15678052651801191;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3711648987602008;  // std dev = 1.060, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.0837517778968454;  // std dev = 0.141, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.010185429917973839;  // std dev = 1.094, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return -0.015760804909721125;  // std dev = 1.473, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.13503454986115732;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.03624063103757439;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.22913053097312616;  // std dev = 0.079, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.15603566946217795;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.04396433053782205;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.010707885667092382;  // std dev = 0.829, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.03228340421202674;  // std dev = 0.121, 232.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=32 */
%   | else if ( tweets(A, J) )
%   | | then return -0.014475611684406258;  // std dev = 0.174, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | else return 0.018855104603199006;  // std dev = 0.279, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.05548568654519335;  // std dev = 2.507, 79.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=72 */
%   | | | else return 0.2693141774460199;  // std dev = 1.174, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.08776099954845187;  // std dev = 0.249, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07147431114431782;  // std dev = 0.037, 220.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0746999768695121;  // std dev = 0.868, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21145550553359657;  // std dev = 0.898, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.10878968587415132;  // std dev = 0.084, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.01954947574235677;  // std dev = 0.814, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.01253050471573143;  // std dev = 1.297, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.270', 'seconds']
Refined model CLL: -0.109619


******************************************
Best model found
******************************************
Results 

CLL : -0.113016 

AUC ROC : 0.994434 

AUC PR : 0.355519 

Precision : 0.343681 

Recall : 0.99359 

F1 : 0.510708 

Total Learning Time : 9.698 

Total Inference Time : 24.82038927078247 

Total revision time: 50.13935515213013
Best scored revision CLL: -0.109619


Results 

CLL : -0.113016 

AUC ROC : 0.994434 

AUC PR : 0.355519 

Precision : 0.343681 

Recall : 0.99359 

F1 : 0.510708 

Total Learning Time : 50.16769573020935 

Total Inference Time : 24.82038927078247 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.215
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10018439823382107;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.33e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7310982782150964;  // std dev = 0.146, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.0408043751629168;  // std dev = 3.538, 190.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07460326318863672;  // std dev = 1.808, 67.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6185952159767028;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.15375559325391167;  // std dev = 4.433, 121.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5357626373343598;  // std dev = 1.667, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7160726367967617;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5925550383268731;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5875531147367387;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5638063010507882;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01339374707567843;  // std dev = 4.593, 254.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=34 */
%   | | | else return 0.058510927122854585;  // std dev = 3.500, 100.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4964291449455147;  // std dev = 2.421, 119.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=115 */
%   | else return -0.125552421811237;  // std dev = 0.169, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.42416609865805893;  // std dev = 0.192, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12755756191175768;  // std dev = 0.000337, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41801465667008875;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11687383363762362;  // std dev = 3.204, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3378356062865799;  // std dev = 0.539, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return -0.10212327412084292;  // std dev = 0.636, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.310398118996608;  // std dev = 0.027, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.44854213627260997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5727526739198774;  // std dev = 1.010, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.10007166562635848;  // std dev = 1.353, 204.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=3 */
%   | | else return 0.008112575110564913;  // std dev = 0.308, 149.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01890892207194847;  // std dev = 3.355, 264.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25995279162728974;  // std dev = 0.212, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49339556177318245;  // std dev = 1.985, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13765783769408374;  // std dev = 0.237, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.12699781694648482;  // std dev = 0.194, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3005742386487232;  // std dev = 1.895, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.09688878909194934;  // std dev = 1.852, 254.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03728208372434022;  // std dev = 2.272, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.193618919221777;  // std dev = 0.098, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.27006334280372185;  // std dev = 0.058, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04441659247378366;  // std dev = 2.112, 164.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=18 */
%   | | | else return -0.08252296440740564;  // std dev = 0.649, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.00441451549420132;  // std dev = 2.139, 121.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=28 */
%   | | | else return 0.03640539990368704;  // std dev = 2.553, 82.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16369699889816183;  // std dev = 0.126, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.26945799030248063;  // std dev = 1.489, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09213033339008705;  // std dev = 0.129, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2863882899693306;  // std dev = 0.959, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.0978724617291228;  // std dev = 0.058, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.035184587413275306;  // std dev = 2.477, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15946002058044784;  // std dev = 1.771, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.1656871383987074;  // std dev = 0.410, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08171511226841553;  // std dev = 0.043, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0914886984499047;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.030926075916586523;  // std dev = 1.009, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.016451616976269772;  // std dev = 0.954, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04590044151274051;  // std dev = 2.866, 113.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.649', 'seconds']
Parameter learned model CLL:-0.116485 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 165, 0], 'true,false,false,true': [1.384, 46, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true': [1.377, 2, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 105, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.146, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.538, 171, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.808, 63, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.433, 81, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.667, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.13, 0, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false,true': [4.593, 220, 34], 'false,false,false,false': [3.5, 77, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.421, 4, 115], 'true,false': [0.169, 211, 0], 'false,true,true': [0.192, 1, 17], 'false,true,false': [0.000337, 39, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.204, 47, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.539, 0, 77], 'true,false': [0.636, 2, 1], 'false,true,true': [0.027, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.01, 1, 26], 'false,false,true,false': [1.353, 201, 3], 'false,false,false': [0.308, 121, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.355, 182, 82], 'false,true': [0.212, 0, 22], 'false,false,true': [1.985, 2, 52], 'false,false,false,true': [0.237, 82, 0], 'false,false,false,false': [0.194, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.895, 2, 121], 'true,false': [1.852, 247, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.272, 51, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.098, 0, 83], 'true,false,true': [0.058, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.112, 146, 18], 'false,false,true,false': [0.649, 26, 1], 'false,false,false,true': [2.139, 93, 28], 'false,false,false,false': [2.553, 58, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.126, 2, 78], 'false,true,true,true': [1.489, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.129, 205, 0], 'false,false,true,true': [0.959, 1, 19], 'false,false,true,false': [0.058, 44, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.477, 50, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.771, 3, 85], 'true,true,false': [0.41, 0, 19], 'true,false,true': [0.043, 148, 0], 'true,false,false,true': [0.021, 28, 0], 'true,false,false,false': [1.009, 27, 4], 'false,true': [0.954, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.866, 73, 40]}]
{'': [0.2208506841165995, 0.21377731529656693], 'true': [0.04376735964986345, 0.017931235795750608], 'false': [0.0384000000000006, 7.190015778524824e-17], 'false,true': [0.04865220249835817, -1.6148698540002277e-16], 'true,false': [-1.6417843515668981e-16, 0.06858710562414251], 'true,false,false': [0.03993055555555552, 0.22222222222222224]}
{'': [0.0002512260951802733, 0.11108388332256358], 'false': [0.06589378055190265, 0.1453007057554863], 'false,false': [0.04878445584541942, 0.17195722264153476], 'false,false,false': [0.09876543209876523, 0.16244214109163257], 'false,true': [nan, 0.06589378055190265], 'false,true,false': [0.06589378055190265, nan], 'false,false,true': [nan, 0.04878445584541942]}
{'': [0.03628592642120826, 0.10675506006250395], 'false': [nan, 0.10675506006250204], 'false,false': [0.0009206712820165766, 0.09524065801372697], 'false,false,false': [0.08303671145209075, 0.12252893179557825], 'true': [0.03969299298520837, 0.007529881414460588], 'true,true': [0.03969299298520837, nan], 'true,false': [0.016513858181432955, 0.0], 'false,false,true': [0.002819555801176173, 1.1842378929335003e-16]}
{'': [0.10705247594317757, 0.11676848254435782], 'false': [0.07743940162322933, 0.14587463270537826], 'false,false': [0.0, 0.14668129130725252], 'false,false,false': [nan, 0.14668129130725252], 'true': [0.049270590523655414, 0.00013591769575748469], 'false,true': [0.03695152788197917, 1.1332834237424804e-07]}
{'': [0.015673160597887946, 0.0747190622798704], 'false': [0.0008990267115226912, 0.07320489438739514], 'false,false': [0.05906289324520038, 0.0945991983482074], 'false,false,true': [0.03777197032993807, 0.008968688383884533], 'true': [0.003773476384764987, 0.13479321540220787], 'false,true': [3.522711809155199e-05, 0.0]}
{'': [0.042642370632169545, 0.09174531184395357], 'false': [0.002040556459617941, 0.09646292399819055], 'false,false': [0.07294219832867552, 0.0006577383702353757], 'true': [nan, 0.042642370632170155], 'true,false': [nan, 0.042642370632169545], 'false,false,false': [0.0006848828454070822, 0.0005619788175698894]}
{'': [0.053350080998006484, 0.06536777520029095], 'false': [nan, 0.06536777520029106], 'false,false': [nan, 0.06536777520029095], 'false,false,false': [nan, 0.06536777520029095], 'true': [0.02920456587095695, 0.013501072781192404]}
{'': [0.00028774051320100365, 0.041794858090249416], 'false': [nan, 0.04179485809024937], 'false,false': [0.025736353328712422, 0.055047975647086446], 'false,false,false': [0.03779521822125568, 0.07951312009189213], 'false,false,true': [0.027199843925671985, 0.015600177510212365], 'true': [0.00011595895673718446, 0.001710425207246638], 'true,false': [0.001710425207246638, nan]}
{'': [0.01584564821956217, 0.04212082426752821], 'false': [0.02671422464873288, 0.06738159148656196], 'false,false': [0.046141588471672795, 0.08644769208898488], 'false,false,false': [nan, 0.08644769208898488], 'false,false,true': [0.04597325689948549, 7.550116771055937e-05], 'false,true': [0.05685756203518109, 8.169376835128993e-05], 'false,true,true': [0.05685756203518109, nan]}
{'': [0.02652934019159307, 0.07486161362636855], 'false': [0.10103172750970264, 0.07271329204824484], 'false,false': [nan, 0.07271329204824492], 'true': [0.03090321708731581, 0.0052897475928798225], 'true,true': [0.03565972066611028, 0.008841203887227178], 'true,false': [1.2263506440178427e-05, 0.018180639517330562], 'true,false,false': [1.5202287960255714e-05, 0.032847465531304]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.724
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12591480992040868;  // std dev = 0.125, 251.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=4 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7263360048661199;  // std dev = 0.213, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.23427361232387178;  // std dev = 0.990, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7378343978629699;  // std dev = 0.204, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.12720343874399653;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17276524893709144;  // std dev = 2.789, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | | else return 0.13386675663669387;  // std dev = 2.397, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5428866138085666;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return 0.4474804310880285;  // std dev = 0.835, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6215547518836181;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.441496710679733;  // std dev = 0.370, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.4911711879954525;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5705107674310536;  // std dev = 0.232, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11373767859701099;  // std dev = 5.58e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07749488679382326;  // std dev = 3.478, 105.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=29 */
%   | | | else return 0.24829236326911522;  // std dev = 2.073, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.359965606375408;  // std dev = 0.266, 68.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=63 */
%   | | else return 0.4838360679471905;  // std dev = 0.078, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.10821348454655445;  // std dev = 0.189, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3515141218234451;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.42045374783803535;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10276657271773681;  // std dev = 2.69e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.44374379012149345;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.11995485737728102;  // std dev = 2.729, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.035928129762943496;  // std dev = 1.921, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.34312787167657666;  // std dev = 0.215, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.005644920991847879;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.04430868871583928;  // std dev = 0.467, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.35206453159034645;  // std dev = 0.215, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18825317391323906;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33497310482596376;  // std dev = 0.053, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then return -0.06478164145861293;  // std dev = 0.118, 225.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.025173195052901463;  // std dev = 2.975, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09074965561139141;  // std dev = 2.397, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2787229157838153;  // std dev = 0.301, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.31769261467023385;  // std dev = 0.127, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08787585272636153;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else return -0.0770910031115926;  // std dev = 0.067, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.33486961856825687;  // std dev = 0.246, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25288086363327933;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.02471908905937775;  // std dev = 1.653, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.5092343957864363;  // std dev = 1.167, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12892450049325416;  // std dev = 0.041, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.20316919930249724;  // std dev = 0.111, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.2884446471417955;  // std dev = 0.195, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.08524115720209954;  // std dev = 0.947, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.279654258293275;  // std dev = 0.278, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.08079063860649373;  // std dev = 0.030, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( tweets(K, I), recursion_accounttype(K, B) )
%   | | | then return 0.23149702259314575;  // std dev = 1.017, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.10010582068920937;  // std dev = 0.012, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.04062313057918316;  // std dev = 2.263, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | | else return 0.0720735412589518;  // std dev = 1.654, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.13087418434824147;  // std dev = 1.688, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.10358327467431197;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.18658620538448403;  // std dev = 0.059, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.328266751331234;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.07522600760124584;  // std dev = 0.088, 131.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=2 */
%   | | else return -0.02535538384587413;  // std dev = 0.130, 117.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=21 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.35146860809269964;  // std dev = 0.823, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.1211245072571242;  // std dev = 0.298, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.003708273915782352;  // std dev = 0.283, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.10062247597005738;  // std dev = 1.934, 51.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=47 */
%   | | | else return -0.12506620413347483;  // std dev = 1.211, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.23744792876311602;  // std dev = 0.194, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return 0.16177618261479956;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15201394166353333;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.03983129275575829;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then return -0.038630636748898356;  // std dev = 0.118, 260.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=38 */
%   | else if ( tweets(A, J) )
%   | | then return -0.030367122972522746;  // std dev = 0.203, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | else return 0.027729847746820295;  // std dev = 0.281, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16142215438789462;  // std dev = 0.107, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.0646145943398868;  // std dev = 0.065, 215.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.1226268022663306;  // std dev = 1.022, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.41177710340424456;  // std dev = 0.073, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.11349477966550436;  // std dev = 0.036, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30212531345421084;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.139064337786646;  // std dev = 0.112, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0659005122725345;  // std dev = 0.617, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.08924486949381896;  // std dev = 1.370, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.350', 'seconds']
Refined model CLL: -0.104593


******************************************
Best model found
******************************************
Results 

CLL : -0.099896 

AUC ROC : 0.99359 

AUC PR : 0.364961 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 11.724 

Total Inference Time : 19.457160711288452 

Total revision time: 47.662872661590576
Best scored revision CLL: -0.104593


Results 

CLL : -0.099896 

AUC ROC : 0.99359 

AUC PR : 0.364961 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 47.6912132396698 

Total Inference Time : 19.457160711288452 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.129
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8118526388032147;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09837280403092258;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7061561654548685;  // std dev = 1.403, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.030312858327310628;  // std dev = 3.781, 196.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=22 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09695941836460235;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10981382215708406;  // std dev = 2.971, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5293293164621314;  // std dev = 2.010, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.7346725603990812;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7958703414069903;  // std dev = 0.119, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5700343243500483;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5700343243500483;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038249144250240584;  // std dev = 3.661, 207.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=21 */
%   | | | else return 0.01376279079104611;  // std dev = 2.524, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4715847014034049;  // std dev = 2.364, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | else return -0.1201533978485487;  // std dev = 0.109, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5002647968625294;  // std dev = 0.112, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.10708368743900504;  // std dev = 0.092, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10950523992446574;  // std dev = 2.017, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31812990039503913;  // std dev = 1.516, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.18943199632256474;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3260074373694172;  // std dev = 0.133, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6293427806399012;  // std dev = 0.082, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09327075025111861;  // std dev = 1.402, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   | | else return -0.009209170495354314;  // std dev = 0.276, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03492137882197171;  // std dev = 3.561, 268.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2606718611067827;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45402275835621464;  // std dev = 1.510, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12344350854024642;  // std dev = 0.125, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.11900413705446879;  // std dev = 0.140, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3025487364895278;  // std dev = 1.533, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07899862200539794;  // std dev = 1.962, 248.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0030841443863767392;  // std dev = 0.698, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16375102388564197;  // std dev = 1.699, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return -0.08369305806185738;  // std dev = 0.876, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0421959059179103;  // std dev = 1.881, 159.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=17 */
%   | | | else return -0.03970266231141909;  // std dev = 1.210, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.022634347171967144;  // std dev = 1.702, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
%   | | | else return 0.051419738395294345;  // std dev = 1.669, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14768195833778774;  // std dev = 0.220, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3031414900403593;  // std dev = 0.792, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09268432330444887;  // std dev = 0.095, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.39101876851507206;  // std dev = 0.386, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09049756971392026;  // std dev = 0.000764, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.057717793086933866;  // std dev = 1.609, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1788114575945868;  // std dev = 1.700, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14101045627303593;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08517868514691676;  // std dev = 0.066, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08361737950405615;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.031922140233451815;  // std dev = 0.527, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15019807395801865;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.034087472399602047;  // std dev = 1.919, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.571', 'seconds']
Parameter learned model CLL:-0.113011 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.184, 5, 103], 'true,false,true': [0.0, 154, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [7.9e-09, 52, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.403, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.781, 174, 22], 'false,true,false,false': [0.0, 7, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.971, 43, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.01, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.119, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.661, 186, 21], 'false,false,false,false': [2.524, 54, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.364, 4, 97], 'true,false': [0.109, 195, 0], 'false,true,true': [0.112, 0, 19], 'false,true,false': [0.092, 34, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.017, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.516, 2, 73], 'true,false': [0.898, 1, 4], 'false,true,true': [0.133, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.082, 0, 17], 'false,false,true,false': [1.402, 177, 4], 'false,false,false': [0.276, 65, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.561, 177, 91], 'false,true': [0.109, 0, 13], 'false,false,true': [1.51, 2, 22], 'false,false,false,true': [0.125, 32, 0], 'false,false,false,false': [0.14, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.533, 1, 107], 'true,false': [1.962, 237, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.698, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.699, 3, 80], 'true,false,true': [0.876, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.881, 142, 17], 'false,false,true,false': [1.21, 37, 5], 'false,false,false,true': [1.702, 55, 13], 'false,false,false,false': [1.669, 24, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.22, 4, 77], 'false,true,true,true': [0.792, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.095, 210, 0], 'false,false,true,true': [0.386, 0, 9], 'false,false,true,false': [0.000764, 22, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.609, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.7, 2, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.066, 188, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.527, 15, 2], 'false,true': [0.093, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.919, 44, 17]}]
{'': [0.2316623263888914, 0.2049164946519049], 'true': [0.04415294924554408, 0.010987654320987488], 'false': [0.0, 5.551115123125783e-17], 'true,false': [-1.2688263138573217e-16, 0.07100591715976336], 'true,false,false': [0.041587901701323295, 0.22222222222222224], 'false,true': [0.0, nan]}
{'': [0.023430276623514854, 0.0924479369149523], 'false': [0.07073808116689843, 0.13203014013897219], 'false,false': [0.032222222222222166, 0.15967742253308853], 'false,false,false': [0.0, 0.1470922830512536], 'false,true': [nan, 0.07073808116689843], 'false,true,false': [0.07295237032566904, -1.982541115402065e-18], 'false,false,true': [nan, 0.032222222222222166]}
{'': [0.05225289014711248, 0.0885339870486194], 'false': [nan, 0.08853398704861927], 'false,false': [-1.5673736818237505e-16, 0.07318252811138193], 'false,false,false': [0.06473206121921299, 0.09803524672213441], 'true': [0.054421702690303136, 0.015230273130941718], 'true,true': [0.05459491980062971, 0.0], 'true,false': [0.007129400621461057, 0.0], 'false,false,true': [-9.868649107779169e-17, 0.0]}
{'': [0.0976277477742944, 0.11015483454043418], 'false': [0.09397203784471875, 0.14028287572553216], 'false,false': [nan, 0.14028287572553216], 'false,false,false': [nan, 0.14028287572553216], 'true': [0.055322859427247996, 6.129495411909803e-05], 'false,true': [0.01244395673025728, 0.008441778904769324]}
{'': [0.039798446489527, 0.06147333334336779], 'false': [0.0010420106142585836, 0.0580201562378192], 'false,false': [0.05094220386369964, 0.07610972846578086], 'false,false,true': [0.00039956705763695015, 0.010856497522714144], 'true': [0.030661014174145802, 0.16133197761463705], 'false,true': [0.0010420106142585836, nan]}
{'': [0.047308804131397084, 0.08287898065858784], 'false': [0.0009058541820617169, 0.08751281614413672], 'false,false': [0.09501670676518836, 0.0005086220103853195], 'true': [nan, 0.04730880413139706], 'true,false': [nan, 0.047308804131397084], 'false,false,false': [0.0004864739389239814, 0.0005182636377311324]}
{'': [0.04818148448491606, 0.01946717427050559], 'true': [0.02176462981878705, 0.015521368918093107], 'false': [nan, 0.01946717427050559], 'false,false': [nan, 0.01946717427050559], 'false,false,false': [nan, 0.01946717427050559]}
{'': [0.044533830989943096, 0.03619666143535566], 'true': [0.034765987535588794, 0.2556848066804919], 'true,false': [0.2556848066804919, nan], 'false': [nan, 0.036196661435355784], 'false,false': [0.024881947307108312, 0.057469864503152376], 'false,false,false': [0.04258960213270163, 0.0844400201977475], 'false,false,true': [0.022243326750052656, 0.03486609350162123]}
{'': [0.04820580621478978, 0.03196231459771058], 'false': [0.020604917250382517, 0.07149758475484382], 'false,false': [0.052575060250936605, 0.09241026932087355], 'false,false,false': [nan, 0.09241026932087355], 'false,false,true': [0.016547433628227488, 2.6525727370920536e-08], 'false,true': [0.019583854206881565, 4.274589070429245e-05], 'false,true,true': [0.019583854206881565, nan]}
{'': [0.024433421991467332, 0.05756899966441112], 'false': [0.002177471043894489, 0.06037158970817795], 'false,false': [nan, 0.06037158970817795], 'true': [0.027651780003481525, 0.0014950684720682892], 'true,true': [0.030120698097494528, 1.0216455080853794e-05], 'true,false': [2.3216057054388062e-05, 0.009897644746599772], 'true,false,false': [-3.2025664171879517e-18, 0.016308392875024794]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.991
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(F, G), follows(F, E) )
%   | | | then return 0.8473962469274686;  // std dev = 0.995, 93.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=92 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6763307532813304;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( recursion_accounttype(J, B) )
%   | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.727837793008735;  // std dev = 0.146, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.6628879139151683;  // std dev = 0.243, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.037098543053182345;  // std dev = 3.305, 163.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=17 */
%   | | | else return -0.012407633764306494;  // std dev = 1.791, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.039718729734897804;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.13019508831067014;  // std dev = 0.056, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09789807395747518;  // std dev = 2.991, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5446973959656792;  // std dev = 1.002, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.728211604459335;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7837393367481506;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6864708403060001;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5808665685475418;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.728048102101239;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12330345769341569;  // std dev = 0.138, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.049167007524202194;  // std dev = 2.085, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.05210312915048927;  // std dev = 2.220, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42657531090877293;  // std dev = 0.166, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.44395289844645713;  // std dev = 1.044, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.61798659283309;  // std dev = 0.280, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.11431205108023385;  // std dev = 0.193, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.4650746984008059;  // std dev = 0.055, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5064679671582326;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11037980837402464;  // std dev = 0.018, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2952622101413786;  // std dev = 1.028, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.04603448627200871;  // std dev = 1.634, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.29889550259370457;  // std dev = 1.346, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return 0.3215829391540415;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.35399833141084003;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.4224728900961832;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33602783331940733;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.45074102934829563;  // std dev = 0.248, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09046139812988636;  // std dev = 1.293, 201.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=4 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.0738693729584003;  // std dev = 0.912, 59.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=3 */
%   | | | else return 0.11240053490141574;  // std dev = 1.917, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.248585508730597;  // std dev = 0.133, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.2791530582111453;  // std dev = 0.245, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(A, G) )
%   | | | then return -0.055978616803219014;  // std dev = 1.560, 151.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=15 */
%   | | | else return -0.09054269756993312;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.03583378351846941;  // std dev = 0.157, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2802998734624078;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1478363213851223;  // std dev = 0.980, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5573871511854647;  // std dev = 0.360, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13177722789288845;  // std dev = 0.035, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(C, E) )
%   | | | then return 0.19249526640270959;  // std dev = 0.988, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.013655958251794376;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.041808538832886544;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, F), follows(F, C) )
%   | | then return 0.2638723323420621;  // std dev = 0.073, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.0705129356040481;  // std dev = 0.802, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.23601622511622378;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.026542504490925278;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.05764816874860659;  // std dev = 0.113, 215.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=15 */
%   | | else return 0.00810718972533537;  // std dev = 0.253, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.19343981130043905;  // std dev = 0.314, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(C, E), tweets(C, F) )
%   | | then if ( follows(G, A) )
%   | | | then return -0.014582135860897655;  // std dev = 0.893, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.11055724850244024;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22608410849020574;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.1962303423081997;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1108143717879315;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(J, A) )
%   | | then return -0.05493148970610425;  // std dev = 0.108, 244.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=15 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.006302939461612916;  // std dev = 1.245, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.03142730858880677;  // std dev = 1.620, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1549529414808672;  // std dev = 0.048, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.03538939110985839;  // std dev = 1.269, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.18070052417307014;  // std dev = 0.107, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.24135892403508466;  // std dev = 0.154, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then return -0.03894809393492577;  // std dev = 0.139, 244.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3539278392169595;  // std dev = 0.171, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10720122473757603;  // std dev = 0.008, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09310118376307226;  // std dev = 0.834, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.02261038341971524;  // std dev = 1.267, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09218570791783057;  // std dev = 1.963, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | | else return 0.3239874962595586;  // std dev = 0.465, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2047942844958091;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.07544718271035085;  // std dev = 0.023, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else return -0.07998031616421211;  // std dev = 0.168, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1774757415121766;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.27868348815128613;  // std dev = 0.151, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0980446332767214;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.07889904155880068;  // std dev = 0.314, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.473', 'seconds']
Refined model CLL: -0.110785


******************************************
Best model found
******************************************
Results 

CLL : -0.11731 

AUC ROC : 0.994079 

AUC PR : 0.393789 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 9.991 

Total Inference Time : 17.178487062454224 

Total revision time: 41.77912342071533
Best scored revision CLL: -0.110785


Results 

CLL : -0.11731 

AUC ROC : 0.994079 

AUC PR : 0.393789 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 47.36670004844665 

Total Inference Time : 17.178487062454224 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.216
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7950858720364479;  // std dev = 2.561, 111.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10103473836987548;  // std dev = 1.385, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7115109001366666;  // std dev = 1.409, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.045891111866747;  // std dev = 3.564, 203.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04903423051372388;  // std dev = 1.785, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7247539622367456;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10123774282488499;  // std dev = 4.601, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5584610136382986;  // std dev = 1.349, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7227721240681134;  // std dev = 0.214, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5605545306994274;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.597363098075101;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5728290945546786;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01019028489027508;  // std dev = 4.606, 252.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=34 */
%   | | | else return 0.06980343093345988;  // std dev = 3.498, 96.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5225237104799513;  // std dev = 1.832, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else return -0.12355448607128616;  // std dev = 0.109, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4682350783586406;  // std dev = 0.095, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12856568562865056;  // std dev = 0.001, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4245897465295354;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11765680905048378;  // std dev = 3.348, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.311521990029468;  // std dev = 1.273, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.42539371517201885;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.310532210758489;  // std dev = 0.025, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.45629657802121526;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6095942133055747;  // std dev = 0.111, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09795689676600094;  // std dev = 1.341, 179.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=3 */
%   | | else return 0.02002985535895175;  // std dev = 0.316, 140.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019922341641403992;  // std dev = 3.338, 261.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2552343967438156;  // std dev = 0.126, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47133064012599;  // std dev = 2.232, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1303370477263455;  // std dev = 0.217, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.12692750210526704;  // std dev = 0.190, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3075694384141549;  // std dev = 1.558, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09605746550630011;  // std dev = 1.930, 236.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03675966751621566;  // std dev = 2.156, 87.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1599178780400987;  // std dev = 1.671, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.22426218980626783;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.029895577923562313;  // std dev = 1.887, 139.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=18 */
%   | | | else return -0.07929520549811847;  // std dev = 0.635, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 5.916977451930978E-4;  // std dev = 2.071, 117.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=28 */
%   | | | else return 0.038383716236570595;  // std dev = 2.598, 82.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17237720828831424;  // std dev = 0.110, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2660621989757904;  // std dev = 1.447, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09534657262806832;  // std dev = 0.135, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.27547821526823113;  // std dev = 1.127, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09457066757633291;  // std dev = 0.057, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07799333965322151;  // std dev = 2.351, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18012929856842988;  // std dev = 1.176, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.08512439401874246;  // std dev = 1.266, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08362996872351741;  // std dev = 0.059, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09491752942027167;  // std dev = 0.039, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.0032510361341357022;  // std dev = 0.946, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.006805443756006557;  // std dev = 0.954, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0012703743490951218;  // std dev = 2.866, 163.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.773', 'seconds']
Parameter learned model CLL:-0.116563 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.561, 7, 104], 'true,false,true': [0.0, 172, 0], 'true,false,false,true': [1.385, 47, 2], 'true,false,false,false': [1.195, 5, 2], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 98, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.409, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.564, 184, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.785, 42, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.601, 109, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.349, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.214, 0, 3], 'true,false,false': [2.98e-08, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.134, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.606, 218, 34], 'false,false,false,false': [3.498, 73, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.832, 1, 115], 'true,false': [0.109, 228, 0], 'false,true,true': [0.095, 0, 17], 'false,true,false': [0.001, 36, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.348, 43, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.273, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.025, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.111, 0, 26], 'false,false,true,false': [1.341, 176, 3], 'false,false,false': [0.316, 112, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.338, 179, 82], 'false,true': [0.126, 0, 22], 'false,false,true': [2.232, 3, 52], 'false,false,false,true': [0.217, 70, 0], 'false,false,false,false': [0.19, 73, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.558, 1, 121], 'true,false': [1.93, 229, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.156, 59, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.671, 3, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.887, 121, 18], 'false,false,true,false': [0.635, 21, 1], 'false,false,false,true': [2.071, 89, 28], 'false,false,false,false': [2.598, 58, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.11, 1, 78], 'false,true,true,true': [1.447, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.135, 206, 0], 'false,false,true,true': [1.127, 1, 19], 'false,false,true,false': [0.057, 50, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.351, 39, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.176, 1, 85], 'true,true,false': [1.266, 2, 19], 'true,false,true': [0.059, 180, 0], 'true,false,false,true': [0.039, 33, 0], 'true,false,false,false': [0.946, 16, 4], 'false,true': [0.954, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.866, 123, 40]}]
{'': [0.21708826063121833, 0.21990837151187081], 'false': [0.019991670137443407, 7.703588334133739e-17], 'true': [0.05908611314016963, 0.01723607263773458], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.8073398075293246e-16, 0.06632653061224474], 'true,false,false': [0.039150354019158645, 0.20408163265306126]}
{'': [0.022834358495905663, 0.10617886651408841], 'false': [0.06258798993505442, 0.14029609950019928], 'false,false': [0.06923158645657422, 0.1536080296820038], 'false,false,false': [0.0, 0.1420453782069449], 'false,false,true': [nan, 0.06923158645657422], 'false,true': [nan, 0.06258798993505442], 'false,true,false': [0.06258798993505442, nan]}
{'': [0.024283571259465474, 0.10923597083139502], 'false': [nan, 0.10923597083139279], 'false,false': [0.0009827221693715586, 0.09741024451406821], 'false,false,false': [0.08419764375983169, 0.12745956680438467], 'true': [0.02636378530772333, 0.00938325248741871], 'true,true': [0.02636378530772333, nan], 'true,false': [0.015267406321750757, 1.1102230246251565e-16], 'false,false,true': [0.0030095866437006937, 1.7763568394002506e-16]}
{'': [0.1030828643528286, 0.13057263431933708], 'false': [0.08047841401835092, 0.16864225720924922], 'false,false': [0.0, 0.16979135593783165], 'false,false,false': [nan, 0.16979135593783165], 'true': [0.028931956470435276, 5.1857346164561136e-05], 'false,true': [0.00897190822806491, 1.798062800271542e-06]}
{'': [0.020403979619292835, 0.0797128858300472], 'false': [0.0009931037401136322, 0.0788391265222343], 'false,false': [0.06428017425823027, 0.09968342954400397], 'false,false,true': [0.00047797493685636667, 0.010053177172772565], 'true': [0.020500173219985082, 0.0], 'false,true': [3.098508123819954e-05, 0.0]}
{'': [0.042701754085963314, 0.0923252387385877], 'false': [0.0007265504820636643, 0.09778596108473743], 'false,false': [0.09057623480157746, 0.0005832143988496469], 'true': [nan, 0.04270175408596341], 'true,false': [nan, 0.042701754085963314], 'false,false,false': [0.000669755978112068, 0.0004945387627470187]}
{'': [0.05378368931709141, 0.053407915295976854], 'true': [0.019891831246810827, 0.015785646950458292], 'false': [nan, 0.053407915295976924], 'false,false': [nan, 0.053407915295976854], 'false,false,false': [nan, 0.053407915295976854]}
{'': [0.031821187506478936, 0.042683899812626665], 'false': [nan, 0.0426838998126264], 'false,false': [0.024900411551610494, 0.05582428383714064], 'false,false,false': [0.03667278971418464, 0.08231047915108188], 'true': [0.032465549432749916, 6.752945781658692e-05], 'false,false,true': [0.02560607320904434, 0.018335050006977594], 'true,false': [6.752945781658692e-05, nan]}
{'': [0.01214839398655991, 0.0422365493294724], 'false': [0.026105096610663302, 0.06847548497799785], 'false,false': [0.046131255690940454, 0.0921384350169539], 'false,false,false': [nan, 0.0921384350169539], 'false,false,true': [0.06348342181903964, 6.576761269790566e-05], 'false,true': [0.05369938074272177, 8.895354297867984e-05], 'false,true,true': [0.05369938074272177, nan]}
{'': [0.024653936017214072, 0.05305696775755319], 'false': [0.10108219009462546, 0.0504036652662202], 'false,false': [nan, 0.05040366526622014], 'true': [0.02932890384742368, 0.0044924406974102635], 'true,true': [0.01608196762956216, 0.07632377437975107], 'true,false': [1.9083005104948548e-05, 0.019172453391998617], 'true,false,false': [4.710761514673231e-05, 0.04472883581664707]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 15.487
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8434430527465715;  // std dev = 0.993, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.12366924671867016;  // std dev = 0.134, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7265566952368359;  // std dev = 0.150, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0.6849952347764712;  // std dev = 0.212, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7299724186538795;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12745295606301707;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return -0.10116018064472947;  // std dev = 0.153, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.15835550217594843;  // std dev = 0.880, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.07672984393301467;  // std dev = 1.597, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.45335122265222444;  // std dev = 1.478, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.10372350559085172;  // std dev = 4.584, 148.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5309233836056289;  // std dev = 0.168, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.7263775206306923;  // std dev = 0.216, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5169267220237359;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6039181822552961;  // std dev = 0.188, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5063255949470328;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5810993275068489;  // std dev = 0.921, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11567233918294963;  // std dev = 0.050, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.06141583406131506;  // std dev = 2.871, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | | | else return 0.1411749750426595;  // std dev = 3.410, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.32084581222774355;  // std dev = 2.116, 48.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=43 */
%   | | | else return 0.4335904351643087;  // std dev = 0.921, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.6031931907807898;  // std dev = 0.225, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return -0.11289177797253348;  // std dev = 0.257, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4691704724846705;  // std dev = 0.085, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10566151349892004;  // std dev = 0.006, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.42843508699262234;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.1075445486833864;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10278677256247436;  // std dev = 3.248, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.3244721555644497;  // std dev = 0.126, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.18873252480315905;  // std dev = 1.002, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.27078812753062237;  // std dev = 0.978, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.4669337918902239;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.34486084056613797;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.39628825873098017;  // std dev = 1.248, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.08901261156266527;  // std dev = 1.251, 167.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.04723693973991917;  // std dev = 1.156, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | else return 0.07827836383705418;  // std dev = 3.296, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2738953019127936;  // std dev = 0.089, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.24314824284911046;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08559091281410439;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.0647508401060669;  // std dev = 0.135, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2735961144041345;  // std dev = 0.184, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.4256655106392872;  // std dev = 1.094, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.6064157615972753;  // std dev = 0.305, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13604365276066974;  // std dev = 0.278, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.13085564451221196;  // std dev = 0.357, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.22341605170056555;  // std dev = 0.108, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.08781242176237977;  // std dev = 0.990, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.2030056524339103;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2524816873861325;  // std dev = 0.397, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.0803344651336758;  // std dev = 0.036, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.21541708031833295;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.06986215676031239;  // std dev = 0.944, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.05140159675076451;  // std dev = 1.060, 59.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=3 */
%   | | | else return 0.003965715860596716;  // std dev = 3.185, 158.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.1469507642329565;  // std dev = 1.382, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.18454466596182006;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18119305315684484;  // std dev = 0.039, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.3090932766707589;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.12019641832677691;  // std dev = 0.362, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else return -0.07555231728277144;  // std dev = 0.045, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19261050445308095;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.01818032930678656;  // std dev = 2.569, 107.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=29 */
%   | | | else return 0.08433468236118358;  // std dev = 1.553, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1670286887300875;  // std dev = 0.076, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.10105090287111936;  // std dev = 0.226, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.014829448994554037;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.09349423680514002;  // std dev = 0.318, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(G, A) )
%   | then return -0.03613668395471451;  // std dev = 0.114, 273.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=38 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3670421341919856;  // std dev = 0.155, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11699532559829234;  // std dev = 0.109, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.030071249191982886;  // std dev = 2.034, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | | else return 0.08524581540272168;  // std dev = 1.277, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13683907253924504;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.20875178556775528;  // std dev = 0.118, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.05926969028004138;  // std dev = 0.069, 197.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), tweets(A, I) )
%   | | | then return 0.2301660017055893;  // std dev = 0.259, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.4229235372674067;  // std dev = 0.383, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.1279241171303016;  // std dev = 0.034, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.09618588908792243;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1311172112207086;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.0024878914586527806;  // std dev = 0.286, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.553', 'seconds']
Refined model CLL: -0.108768


******************************************
Best model found
******************************************
Results 

CLL : -0.103158 

AUC ROC : 0.992512 

AUC PR : 0.330078 

Precision : 0.339726 

Recall : 0.984127 

F1 : 0.505092 

Total Learning Time : 15.487 

Total Inference Time : 26.828118324279785 

Total revision time: 58.84223501968384
Best scored revision CLL: -0.108768


Results 

CLL : -0.103158 

AUC ROC : 0.992512 

AUC PR : 0.330078 

Precision : 0.339726 

Recall : 0.984127 

F1 : 0.505092 

Total Learning Time : 64.42981164741516 

Total Inference Time : 26.828118324279785 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.163
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8031030635398779;  // std dev = 2.381, 109.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09837280403092258;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7317011816742409;  // std dev = 0.102, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03107326654200349;  // std dev = 3.791, 198.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07766117275056723;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09362547303851176;  // std dev = 3.004, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5279977360029934;  // std dev = 1.938, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.7365221881518909;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.43103758619922444;  // std dev = 0.893, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5659130917486309;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5659130917486309;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.046093871362080846;  // std dev = 3.692, 227.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=21 */
%   | | | else return 0.023095005108387964;  // std dev = 2.513, 62.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.48329204681333077;  // std dev = 2.151, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.1197902091528052;  // std dev = 0.113, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.49777454287899314;  // std dev = 0.113, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.112915366107549;  // std dev = 0.078, 49.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1411333427901871;  // std dev = 1.974, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.30476889300021215;  // std dev = 1.739, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.43043665003553033;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32131019212589856;  // std dev = 0.136, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.631128130749162;  // std dev = 0.079, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09102523797573203;  // std dev = 1.401, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   | | else return -0.03735095890935016;  // std dev = 0.248, 97.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03222266402462749;  // std dev = 3.619, 271.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25902608135892957;  // std dev = 0.131, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.542809581011889;  // std dev = 0.697, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11303414489078316;  // std dev = 0.113, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.11659712718075836;  // std dev = 0.136, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2820257185880585;  // std dev = 2.130, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07882522557791466;  // std dev = 1.898, 236.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.017715696591658284;  // std dev = 0.723, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20147181468961967;  // std dev = 0.076, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.28611303656699494;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04784951695731475;  // std dev = 1.988, 173.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=17 */
%   | | | else return -0.021322547427646336;  // std dev = 1.197, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013897556962948589;  // std dev = 1.615, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | | else return 0.12775597503767588;  // std dev = 1.475, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13436598058433605;  // std dev = 0.239, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2648333362984965;  // std dev = 1.252, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09117620626505542;  // std dev = 0.093, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3740409222889973;  // std dev = 0.373, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09013199065748191;  // std dev = 0.000638, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07993869390881662;  // std dev = 1.472, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19087000501061843;  // std dev = 1.396, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.10230539817736188;  // std dev = 0.368, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08392534839818172;  // std dev = 0.063, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08176113099392232;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.012513171356983268;  // std dev = 0.553, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1452416790856225;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02953056540318718;  // std dev = 1.813, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.112', 'seconds']
Parameter learned model CLL:-0.113515 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.381, 6, 103], 'true,false,true': [0.0, 189, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 1, 0], 'false,false': [7.21e-09, 49, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.102, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.791, 176, 22], 'false,true,false,false': [0.0, 4, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.973, 18, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.004, 48, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.938, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.893, 1, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.692, 206, 21], 'false,false,false,false': [2.513, 51, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.151, 3, 97], 'true,false': [0.113, 177, 0], 'false,true,true': [0.113, 0, 19], 'false,true,false': [0.078, 48, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.974, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.739, 3, 73], 'true,false': [0.102, 0, 4], 'false,true,true': [0.136, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.079, 0, 17], 'false,false,true,false': [1.401, 177, 4], 'false,false,false': [0.248, 86, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.619, 180, 91], 'false,true': [0.131, 0, 13], 'false,false,true': [0.697, 0, 22], 'false,false,false,true': [0.113, 36, 0], 'false,false,false,false': [0.136, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.13, 3, 107], 'true,false': [1.898, 225, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.723, 24, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.076, 0, 80], 'true,false,true': [0.027, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.988, 156, 17], 'false,false,true,false': [1.197, 29, 5], 'false,false,false,true': [1.615, 49, 13], 'false,false,false,false': [1.475, 13, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.239, 5, 77], 'false,true,true,true': [1.252, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.093, 229, 0], 'false,false,true,true': [0.373, 0, 9], 'false,false,true,false': [0.000638, 22, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.472, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.396, 1, 94], 'true,true,false': [0.368, 1, 9], 'true,false,true': [0.063, 176, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.553, 10, 2], 'false,true': [0.056, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.813, 42, 17]}]
{'': [0.21905006858710765, 0.20829200555445368], 'true': [0.05201582358387565, 0.009215792320172904], 'false': [0.04338842975206614, 5.437827059388522e-17], 'false,true': [0.0, 0.0], 'true,false': [-2.2086976574553378e-16, 0.07100591715976336], 'true,false,false': [0.041587901701323295, 0.22222222222222224]}
{'': [0.00012719907232923265, 0.09430795319106779], 'false': [0.07132899127198787, 0.13735094201187845], 'false,false': [0.04986149584487529, 0.15213993720165656], 'false,false,false': [0.0, 0.13879598079059635], 'false,true': [nan, 0.07132899127198787], 'false,true,false': [0.07259362543325643, 0.0], 'false,false,true': [nan, 0.04986149584487529]}
{'': [0.0670308172578226, 0.08466670113537884], 'false': [nan, 0.08466670113537896], 'false,false': [-5.224578939412501e-17, 0.06983573674089182], 'false,false,false': [0.060058428044861834, 0.10187319226928745], 'true': [0.05065408325209039, 0.20102720925932702], 'true,false': [0.2658270645709996, 0.16], 'true,true': [0.050758831928712236, 0.0], 'false,false,true': [-1.4802973661668753e-16, -1.1102230246251565e-16]}
{'': [0.10064652929602325, 0.10289660467339758], 'false': [0.0830291130431129, 0.14982427332034365], 'false,false': [nan, 0.14982427332034365], 'false,false,false': [nan, 0.14982427332034365], 'true': [0.0462580169485113, 7.190040215910559e-05], 'false,true': [0.012840703265857312, 0.006040598599818833]}
{'': [0.03868472258907152, 0.05790976795313018], 'false': [0.0010879630494320391, 0.05439192110997585], 'false,false': [0.05088067860412228, 0.06151264029043466], 'false,false,true': [0.00036986575311229663, 0.010849064384616827], 'true': [0.03979530074955331, 0.002580971639544183], 'false,true': [0.0010879630494320391, nan]}
{'': [0.048321111995437864, 0.07457664220270853], 'false': [0.0013250996792056025, 0.07770996425378653], 'false,false': [0.022088127174625483, 0.00038908297709598725], 'true': [nan, 0.04832111199543801], 'true,false': [nan, 0.048321111995437864], 'false,false,false': [0.000355537024704843, 0.0004102775866539041]}
{'': [0.05175297139708485, 0.016317279454220665], 'true': [0.041230285732364584, 0.015260288079425057], 'false': [nan, 0.016317279454220665], 'false,false': [nan, 0.016317279454220665], 'false,false,false': [nan, 0.016317279454220665]}
{'': [0.00024957304714260845, 0.0370512309992234], 'false': [nan, 0.037051230999223375], 'false,false': [0.02611888274675982, 0.06082749795323704], 'false,false,false': [0.042055079929193266, 0.09892117042200549], 'false,false,true': [0.022855397252066555, 0.042136165018591236], 'true': [7.211138943502004e-05, 0.00035863794969526186], 'true,false': [0.00035863794969526186, nan]}
{'': [0.057183613811727395, 0.030022363850355078], 'false': [0.020257036866356576, 0.06846756159382002], 'false,false': [0.04887575009554227, 0.09415813020386174], 'false,false,false': [nan, 0.09415813020386174], 'false,false,true': [0.01544515264113349, 1.850223228668084e-08], 'false,true': [0.04608354909437587, 3.753283141203528e-05], 'false,true,true': [0.04608354909437587, nan]}
{'': [0.023513893051268463, 0.05302279502534884], 'false': [0.0007924281840963956, 0.055713737681308766], 'false,false': [nan, 0.055713737681308766], 'true': [0.020532057286495303, 0.0017906222255929171], 'true,true': [0.02051843854629615, 0.013564763790432182], 'true,false': [2.283615741916691e-05, 0.011703831677395748], 'true,false,false': [0.0, 0.025473233730627837]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.307
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.8242506300147667;  // std dev = 1.390, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.0418510649004878;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7294997262873005;  // std dev = 0.017, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.6018263533874247;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.03693986617811875;  // std dev = 3.310, 161.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=17 */
%   | | | else return 0.0065738068996313995;  // std dev = 1.735, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06316748255992503;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11800632524396264;  // std dev = 2.939, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5449714844973138;  // std dev = 0.186, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | else return 0.6382611999286365;  // std dev = 0.296, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.3966583344959554;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5607160606023387;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5801678451385232;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7251235356539794;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12255159703327874;  // std dev = 0.096, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09559636731486075;  // std dev = 2.121, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.08343350221348741;  // std dev = 2.020, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4158874515566166;  // std dev = 0.123, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4639324399651349;  // std dev = 0.967, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6107968824773558;  // std dev = 0.252, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.11321484790266108;  // std dev = 0.014, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.4651678396727411;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.525745702475034;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11260066454153547;  // std dev = 0.017, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15807430930652236;  // std dev = 1.207, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06819889359257321;  // std dev = 1.586, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2820695282874351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.3285811561944118;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.35201543819577286;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.4419067168103387;  // std dev = 0.115, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3436821312847807;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.33735844253741115;  // std dev = 1.402, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.09275721535146751;  // std dev = 1.275, 175.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0672896166071821;  // std dev = 0.876, 50.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=3 */
%   | | | else return 0.14844987232256246;  // std dev = 1.819, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.27025722669964414;  // std dev = 0.125, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.15604905564728525;  // std dev = 1.670, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return -0.14310490015205546;  // std dev = 1.056, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.052458025011639986;  // std dev = 0.135, 203.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=20 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.2997386972475595;  // std dev = 0.158, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1546425133096772;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2800600748898298;  // std dev = 0.311, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5527174654132878;  // std dev = 0.308, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12990459816527936;  // std dev = 0.038, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.23512032083201087;  // std dev = 0.172, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.08902505908641276;  // std dev = 0.009, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.22866207203802733;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return -0.11124073915489914;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2524838859416255;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2583835667169796;  // std dev = 0.890, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.10087031527561267;  // std dev = 0.415, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06818321319448353;  // std dev = 0.881, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.019138684336305424;  // std dev = 1.263, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.1659733616066335;  // std dev = 1.001, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.19981276899706196;  // std dev = 0.137, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.003140250384100307;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.27440494300261303;  // std dev = 0.042, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return -0.039170807226251825;  // std dev = 0.117, 176.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2453956009116378;  // std dev = 1.094, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.09993386635582988;  // std dev = 0.210, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.005760920255228682;  // std dev = 1.001, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -2.9878520763940153E-4;  // std dev = 1.282, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.10948035629866835;  // std dev = 1.655, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | | else return -0.2898412027798961;  // std dev = 0.892, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.2398734559019958;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(F, A) )
%   | | then return -0.008574145869741626;  // std dev = 0.875, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06610554863011575;  // std dev = 0.853, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.02645445860016704;  // std dev = 0.119, 206.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=32 */
%   | else if ( tweets(A, H) )
%   | | then return -0.011333333795265297;  // std dev = 0.164, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.04814340288244203;  // std dev = 0.863, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.10817305291306101;  // std dev = 1.112, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14529275769748887;  // std dev = 0.108, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.296859060231903;  // std dev = 0.093, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.13214588165411162;  // std dev = 0.880, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.07335591017208908;  // std dev = 0.060, 220.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13169914502793637;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2919879216351189;  // std dev = 0.248, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12319212659341075;  // std dev = 0.126, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12862172437523423;  // std dev = 0.657, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.06750494446720466;  // std dev = 1.122, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.349', 'seconds']
Refined model CLL: -0.108226


******************************************
Best model found
******************************************
Results 

CLL : -0.111607 

AUC ROC : 0.994383 

AUC PR : 0.351457 

Precision : 0.344988 

Recall : 0.948718 

F1 : 0.505983 

Total Learning Time : 9.307 

Total Inference Time : 16.344895839691162 

Total revision time: 40.111151666641234
Best scored revision CLL: -0.108226


Results 

CLL : -0.111607 

AUC ROC : 0.994383 

AUC PR : 0.351457 

Precision : 0.344988 

Recall : 0.948718 

F1 : 0.505983 

Total Learning Time : 40.129039974212645 

Total Inference Time : 16.344895839691162 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.242
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10481402786345068;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7276409855946083;  // std dev = 0.151, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.037473001045357626;  // std dev = 3.516, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07068643688703773;  // std dev = 1.801, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5194734122109546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.14179879336727216;  // std dev = 4.423, 126.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5297128577063633;  // std dev = 1.756, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.4711082261127589;  // std dev = 0.875, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6040520610480192;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5847235006698984;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5602674265140112;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0295891850659898;  // std dev = 4.621, 289.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=34 */
%   | | | else return 0.03190364258896693;  // std dev = 3.560, 114.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5211925456352586;  // std dev = 1.721, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else return -0.12345988497702359;  // std dev = 0.165, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.40525330985717317;  // std dev = 0.257, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12492103454342977;  // std dev = 0.000169, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41520814344656265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22679187217382957;  // std dev = 2.865, 50.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.310281859418899;  // std dev = 1.428, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.47217277790777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3040448433012667;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.44397640770057756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6013309722880116;  // std dev = 0.127, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09969486425379885;  // std dev = 1.341, 201.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=3 */
%   | | else return -0.012751319120801491;  // std dev = 0.294, 162.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02263720309744916;  // std dev = 3.381, 254.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2542026426888462;  // std dev = 0.145, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5277513879386462;  // std dev = 1.010, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.133627080182276;  // std dev = 0.286, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.12683729636120267;  // std dev = 0.243, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29278082700347763;  // std dev = 1.783, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.0902366389391859;  // std dev = 1.627, 260.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011982998009590396;  // std dev = 2.224, 94.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17149168535682907;  // std dev = 1.402, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2363476583226093;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03772547171623282;  // std dev = 1.902, 160.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=18 */
%   | | | else return -0.10040238180160063;  // std dev = 0.855, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008002792656682614;  // std dev = 2.055, 133.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=28 */
%   | | | else return 0.04085758633576122;  // std dev = 2.431, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1614780419341192;  // std dev = 0.158, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2956198495517121;  // std dev = 0.954, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09045553515455851;  // std dev = 0.100, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31647443650191304;  // std dev = 0.438, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09614256013737289;  // std dev = 0.055, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012488453024722486;  // std dev = 2.390, 77.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.156870847479445;  // std dev = 1.861, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.16539127867265738;  // std dev = 0.404, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0821938871731058;  // std dev = 0.030, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08607680786972842;  // std dev = 0.021, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.0056587829289304345;  // std dev = 0.989, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1276954773858848;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02268766903881484;  // std dev = 2.678, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.392', 'seconds']
Parameter learned model CLL:-0.116 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 168, 0], 'true,false,false,true': [1.388, 52, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 99, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.151, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.516, 163, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.801, 59, 4], 'false,false,false,true': [1.265, 2, 8], 'false,false,false,false': [4.423, 86, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.756, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.875, 1, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.134, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.621, 255, 34], 'false,false,false,false': [3.56, 91, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.721, 1, 115], 'true,false': [0.165, 244, 0], 'false,true,true': [0.257, 1, 17], 'false,true,false': [0.000169, 34, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.865, 27, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.428, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.039, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.127, 0, 26], 'false,false,true,false': [1.341, 198, 3], 'false,false,false': [0.294, 134, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.381, 172, 82], 'false,true': [0.145, 0, 22], 'false,false,true': [1.01, 0, 52], 'false,false,false,true': [0.286, 88, 0], 'false,false,false,false': [0.243, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.783, 2, 121], 'true,false': [1.627, 253, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.224, 66, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.402, 2, 83], 'true,false,true': [0.011, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.902, 142, 18], 'false,false,true,false': [0.855, 37, 1], 'false,false,false,true': [2.055, 105, 28], 'false,false,false,false': [2.431, 52, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.158, 2, 78], 'false,true,true,true': [0.954, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 216, 0], 'false,false,true,true': [0.438, 0, 19], 'false,false,true,false': [0.055, 58, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.39, 56, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.861, 3, 85], 'true,true,false': [0.404, 0, 19], 'true,false,true': [0.03, 151, 0], 'true,false,false,true': [0.021, 30, 0], 'true,false,false,false': [0.989, 18, 4], 'false,true': [0.035, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.678, 92, 40]}]
{'': [0.21845399866340154, 0.21990837151187081], 'false': [5.921189464667501e-16, 8.074349270001139e-17], 'true': [0.02725128832212642, 0.017236072637734582], 'true,false': [-1.691768418476429e-16, 0.062222222222222096], 'true,false,false': [0.035665294924554135, 0.22222222222222224], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.00026852686386701286, 0.11076315258133623], 'false': [0.0679057531314943, 0.14176407372577443], 'false,false': [0.051468184682787896, 0.16531830591086186], 'false,false,false': [0.15999999999999984, 0.1552522967904817], 'false,true': [nan, 0.0679057531314943], 'false,true,false': [0.0679057531314943, nan], 'false,false,true': [nan, 0.051468184682787896]}
{'': [0.047618305992800036, 0.09683285714908367], 'false': [nan, 0.09683285714908299], 'false,false': [0.0009764890826418389, 0.08519817081629877], 'false,false,false': [0.07388434131401865, 0.11116802052586836], 'true': [0.044042507777528786, 0.06770757614133471], 'true,false': [0.19134001959247496, -1.1102230246251565e-16], 'true,true': [0.044042507777528786, nan], 'false,false,true': [0.002990497815591242, -1.7763568394002506e-16]}
{'': [0.09906545744942134, 0.13106473273293406], 'false': [0.08643219428394854, 0.1616566937457232], 'false,false': [0.0, 0.16419373563474904], 'false,false,false': [nan, 0.16419373563474904], 'true': [0.025541205748691332, 0.00011154398025149192], 'false,true': [0.06590671309404719, 2.8611920992591297e-08]}
{'': [0.02580431427817048, 0.07135580188021318], 'false': [0.000961681899816084, 0.06966775005149972], 'false,false': [0.05783203311576532, 0.08622656109105867], 'false,false,true': [0.0006162488233538027, 0.008945115915144798], 'true': [0.025803342799152935, 0.0], 'false,true': [7.734491312884062e-05, 0.0]}
{'': [0.04501055945501473, 0.08394364275994705], 'false': [0.0009553295053656177, 0.08836262072125418], 'false,false': [0.019624059845674776, 0.000943128749559289], 'true': [nan, 0.04501055945501436], 'true,false': [nan, 0.04501055945501473], 'false,false,false': [0.0009307779320901085, 0.000933513781352343]}
{'': [0.047195292718724115, 0.05262391645607723], 'false': [nan, 0.052623916456077176], 'false,false': [nan, 0.05262391645607723], 'false,false,false': [nan, 0.05262391645607723], 'true': [0.025849499793257177, 0.010180198036676524]}
{'': [0.022688488410565942, 0.03704519434274272], 'false': [nan, 0.037045194342743275], 'false,false': [0.022567131312006283, 0.04903787064076796], 'false,false,false': [0.03175272021470911, 0.07776766966391657], 'true': [0.023124241340306117, 5.9388155301168255e-05], 'false,false,true': [0.02260464131641433, 0.019234733798533493], 'true,false': [5.9388155301168255e-05, nan]}
{'': [0.024871147684720773, 0.0349266461663536], 'false': [0.022583208668429212, 0.05419878486517066], 'false,false': [0.03417526098894991, 0.07419907688531059], 'false,false,false': [nan, 0.07419907688531059], 'false,false,true': [0.010099950180240663, 5.1573043164705685e-05], 'false,true': [0.023932023469089812, 4.6469531265148754e-05], 'false,true,true': [0.023932023469089812, nan]}
{'': [0.027494357993409997, 0.051845044912004645], 'false': [0.00015282905726300006, 0.05434781277530989], 'false,false': [nan, 0.054347812775309826], 'true': [0.03390684786440901, 0.005398893004269269], 'true,true': [0.0393625561351758, 0.008578597735670525], 'true,false': [6.033697697177652e-06, 0.020383201747631457], 'true,false,false': [1.5119272417213337e-05, 0.04442686424412109]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 10.387
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.09423201728144012;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7209358952077619;  // std dev = 0.087, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7352380330186129;  // std dev = 0.200, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.12745859181840133;  // std dev = 0.134, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.5984861696068178;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.40800997913062725;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.0822047129244985;  // std dev = 3.952, 118.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=29 */
%   | | | else return 0.10690782542492834;  // std dev = 2.386, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.49117548274011474;  // std dev = 1.676, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.5550052699741579;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.3033144113458342;  // std dev = 0.459, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.6302943138083691;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5683578438628502;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4925052699741579;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(I, A) )
%   | | then return -0.05835752481050296;  // std dev = 0.189, 203.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09279133077419763;  // std dev = 3.573, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.16162916346579775;  // std dev = 2.595, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.4314308034210813;  // std dev = 0.180, 93.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=90 */
%   | | else return 0.5877379883034782;  // std dev = 0.203, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return -0.11804833332108675;  // std dev = 0.312, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.42656070023983983;  // std dev = 0.029, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.23252443645213264;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.10765815799948587;  // std dev = 0.012, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.4140027029948463;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.10471874512191401;  // std dev = 2.502, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
%   | | | else return 0.08311162349294277;  // std dev = 2.088, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3384445699967948;  // std dev = 0.341, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.37578525210939717;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.31531669085742337;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2687777391471769;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.3904216584363822;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5015703429122345;  // std dev = 0.220, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09689992536898706;  // std dev = 1.217, 197.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.075725569483727;  // std dev = 1.101, 58.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=3 */
%   | | | else return 0.13981324217951674;  // std dev = 3.133, 66.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.259938436066872;  // std dev = 0.022, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.18103653392688812;  // std dev = 1.352, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0.33343866033583713;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04924455101005229;  // std dev = 0.125, 167.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.27112381699946503;  // std dev = 0.064, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.10804410360994299;  // std dev = 0.556, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.2830726331217296;  // std dev = 1.748, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return 0.5786096516680159;  // std dev = 0.392, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.1380773417778591;  // std dev = 0.038, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.21921908193349246;  // std dev = 0.101, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return 0.2308393546539428;  // std dev = 0.932, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3941908719282196;  // std dev = 0.319, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.08486195001804979;  // std dev = 0.104, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2170327603658162;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4168492303891364;  // std dev = 0.332, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12946442415049478;  // std dev = 0.211, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.0843805378347432;  // std dev = 0.687, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.03153950376739704;  // std dev = 1.769, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.16250900507236746;  // std dev = 0.984, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.15541731304057552;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18811290000142245;  // std dev = 0.050, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.20590466724888357;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.04782742930921213;  // std dev = 0.120, 243.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=23 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.23034956526333203;  // std dev = 1.061, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.10617406402113838;  // std dev = 0.124, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.00592515596103733;  // std dev = 1.976, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | | else return -0.0261003880099049;  // std dev = 1.469, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.15662022320274954;  // std dev = 0.004, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.0748754099751722;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.15791452345313664;  // std dev = 0.058, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.19464741925906723;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then return -0.03259630240237169;  // std dev = 0.137, 245.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=38 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25561279326186365;  // std dev = 0.251, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09191689879150093;  // std dev = 0.090, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.012244541960475393;  // std dev = 1.579, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
%   | | | else return 0.1665327510287289;  // std dev = 1.311, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14892601578325965;  // std dev = 0.147, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.22001353070734828;  // std dev = 0.950, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.3488936143987286;  // std dev = 0.140, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06651657165241714;  // std dev = 0.052, 235.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=4 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.13577053097864134;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2791939666586731;  // std dev = 0.510, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.10779129911404257;  // std dev = 0.259, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.011369107949492302;  // std dev = 0.800, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.012795698511486684;  // std dev = 1.589, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.825', 'seconds']
Refined model CLL: -0.109618


******************************************
Best model found
******************************************
Results 

CLL : -0.108519 

AUC ROC : 0.992796 

AUC PR : 0.352499 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 10.387 

Total Inference Time : 18.478910207748413 

Total revision time: 45.54185943984986
Best scored revision CLL: -0.109618


Results 

CLL : -0.108519 

AUC ROC : 0.992796 

AUC PR : 0.352499 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 45.55974774742127 

Total Inference Time : 18.478910207748413 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.118
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.699360372847024;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5409172169336304;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360689;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4131004124878064;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42976707915447243;  // std dev = 9.13e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3246149944894057;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23390880264570676;  // std dev = 1.972, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1984792897113645;  // std dev = 1.713, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.66e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1512313919201985;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.27e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12180973328653506;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.50e-08, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12017411693043596;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.61e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.103', 'seconds']
Parameter learned model CLL:-0.09265 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 242, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 259, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 229, 0], 'false,true,true': [9.13e-09, 0, 8], 'false,true,false': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.996, 1, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 208, 0], 'false,false,false': [1.32e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.972, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 259, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.713, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.66e-08, 236, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.27e-07, 227, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 224, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 236, 0]}]
{'': [0.015380859375004219, -5.943201321413477e-17], 'false': [-5.943201321413477e-17, nan]}
{'': [0.022714981070850224, -6.055761952500853e-17], 'false': [-6.055761952500853e-17, nan]}
{'': [0.022714981070849287, -9.7733918770091e-17], 'false': [nan, -9.7733918770091e-17]}
{'': [0.06540314658707237, 0.06274379378754956], 'true': [0.016388888888888224, -7.757016765939958e-17], 'false': [0.06274379378754956, nan], 'false,true': [8.326672684688674e-17, 3.469446951953614e-18]}
{'': [0.007809158856593108, 2.5005023077143166e-17], 'true': [0.007809158856593108, nan], 'false': [nan, 2.5005023077143166e-17], 'false,false': [1.814787636406506e-17, 2.9738116731030977e-18], 'false,false,true': [nan, 1.814787636406506e-17]}
{'': [0.029907398434471842, 3.429260307722491e-17], 'false': [nan, 3.429260307722491e-17], 'false,false': [nan, 3.429260307722491e-17]}
{'': [0.02275063111322884, 1.881733940042638e-17], 'false': [nan, 1.881733940042638e-17], 'false,false': [nan, 1.881733940042638e-17], 'false,false,false': [1.881733940042638e-17, nan]}
{'': [0.03669964521256466, 6.558279470359575e-17], 'true': [0.03669964521256466, nan], 'false': [7.140641479967967e-17, -6.938893903907229e-19], 'false,false': [nan, -6.938893903907229e-19]}
{'': [0.043376005532573474, 1.827527612551698e-18], 'false': [nan, 1.827527612551698e-18], 'false,false': [1.883414059631962e-17, -2.1912296538654404e-18], 'false,false,true': [nan, 1.883414059631962e-17]}
{'': [0.029878144037978865, 1.8817339400426382e-18], 'false': [nan, 1.8817339400426382e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 37.913
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.723001732163229;  // std dev = 0.014, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.5331449684399192;  // std dev = 2.006, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | else return 0.7319527998438633;  // std dev = 0.057, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.7316502224202313;  // std dev = 0.090, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839197;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.5546530009351447;  // std dev = 1.013, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.4597163692091623;  // std dev = 0.952, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.30075079488612555;  // std dev = 1.465, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.5676391822029203;  // std dev = 0.068, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.5679313007042666;  // std dev = 0.118, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.11231637819360688;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.3797352834274875;  // std dev = 1.883, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | | | else return 0.17049482650630685;  // std dev = 1.770, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | else if ( follows(F, A), tweets(F, G) )
%   | | | then return 0.4524290144283882;  // std dev = 0.262, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.37658954751011503;  // std dev = 0.997, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.42527319084122445;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.3494636313743668;  // std dev = 0.320, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( tweets(A, F) )
%   | | then return 0.3380657244816886;  // std dev = 0.093, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2368628855394064;  // std dev = 0.313, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926047;  // std dev = 9.19e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.274526282442484;  // std dev = 0.151, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.25542535891587564;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22310453102161043;  // std dev = 0.838, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2758714955965407;  // std dev = 0.180, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.2783190390678464;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.12046562154158305;  // std dev = 0.916, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.25777170529021487;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.31154503338479245;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.16175797998670888;  // std dev = 1.857, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   | | | else return 0.2451834849075697;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.09157729649878524;  // std dev = 0.935, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.062030073403284446;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2780247749507437;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20260881984700146;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2046875423676421;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22559867872018005;  // std dev = 0.080, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07877675473109143;  // std dev = 4.47e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(D, E), follows(D, A) )
%   | | | then return 0.18137958735871018;  // std dev = 0.982, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.11187746733775564;  // std dev = 1.683, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, G) )
%   | | | then return 0.24891096783427555;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19019079213530116;  // std dev = 0.062, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.06408812142187224;  // std dev = 0.317, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333667;  // std dev = 1.11e-07, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | | else return -0.073246225763337;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.07324622576333698;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.14207085528166158;  // std dev = 0.970, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.1706291785304385;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.17114015078699102;  // std dev = 0.053, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.1955080101356099;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.2180853901192059;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20036508783072157;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.16056461524274918;  // std dev = 0.103, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.17373535887392155;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420264;  // std dev = 2.95e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.050336839289754756;  // std dev = 1.885, 42.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=38 */
%   | | | else return 0.11118196733324377;  // std dev = 1.359, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15928838341749238;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13213086296219703;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.17234264105950378;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13080454206606643;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14647400701079075;  // std dev = 0.037, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06419184008202625;  // std dev = 1.83e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.512', 'seconds']
Refined model CLL: -0.09099


******************************************
Best model found
******************************************
Results 

CLL : -0.086136 

AUC ROC : 0.995748 

AUC PR : 0.468318 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.913 

Total Inference Time : 9.093594551086426 

Total revision time: 64.48271880722046
Best scored revision CLL: -0.09099


Results 

CLL : -0.086136 

AUC ROC : 0.995748 

AUC PR : 0.468318 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 64.51502309417725 

Total Inference Time : 9.093594551086426 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.181
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048788;  // std dev = 5.96e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7056234789732008;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5338821350133606;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360668;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4093547601736122;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3655888568657254;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783617;  // std dev = 1.32e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3004750954946002;  // std dev = 2.408, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.60e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2490416336204598;  // std dev = 1.970, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17282417326674196;  // std dev = 2.914, 165.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.71e-08, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1381118912923984;  // std dev = 3.067, 166.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333677;  // std dev = 1.20e-07, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14025410996040716;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420278;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1267378874471157;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202604;  // std dev = 5.74e-09, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.733', 'seconds']
Parameter learned model CLL:-0.086611 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [5.96e-08, 293, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 306, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 319, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 255, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [1.32e-09, 56, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.408, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.6e-07, 286, 0], 'false,false,false': [0.0, 80, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.97, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 314, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.914, 9, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.71e-08, 334, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [3.067, 10, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.2e-07, 247, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 255, 0], 'false,false,false': [2.28e-09, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [5.74e-09, 285, 0]}]
{'': [0.024375000000006076, 1.2125302658022188e-17], 'false': [1.2125302658022188e-17, nan]}
{'': [0.0185119259522958, -8.707631565687502e-17], 'false': [-8.707631565687502e-17, nan]}
{'': [0.03009143165772608, -5.011665064138638e-17], 'false': [nan, -5.011665064138638e-17]}
{'': [0.06612632692412185, 0.07128359796624256], 'false': [0.07128359796624256, nan], 'false,true': [0.06222222222222209, 3.96508223080413e-18], 'true': [0.022376318396364104, -6.617799989922502e-17]}
{'': [0.035804973807835774, 9.585532125178947e-17], 'true': [0.035804973807835774, nan], 'false': [nan, 9.585532125178947e-17], 'false,false': [9.006004955001269e-17, -1.9428902930940238e-17], 'false,false,true': [nan, 9.006004955001269e-17]}
{'': [0.024249813287417377, 3.677171801306251e-17], 'false': [nan, 3.677171801306251e-17], 'false,false': [nan, 3.677171801306251e-17]}
{'': [0.05145650016984534, 6.648042063623692e-18], 'false': [nan, 6.648042063623692e-18], 'false,false': [nan, 6.648042063623692e-18], 'false,false,false': [6.648042063623692e-18, nan]}
{'': [0.056682259403920215, 3.004563961031777e-17], 'true': [0.056682259403920215, nan], 'false': [5.843279076974508e-17, -1.0903976134711359e-17], 'false,false': [nan, -1.0903976134711359e-17]}
{'': [0.035753710511960905, -6.41462192005646e-17], 'false': [nan, -6.41462192005646e-17], 'false,false': [-3.483052626275001e-18, 5.551115123125783e-18], 'false,false,true': [nan, -3.483052626275001e-18]}
{'': [0.03008927450631919, 3.350146670798718e-17], 'false': [nan, 3.350146670798718e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 54.198
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995118;  // std dev = 2.23e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(G, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8126943896449668;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else return -0.14185106490048763;  // std dev = 1.93e-07, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.6942535035886238;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.7228249321600525;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7227109105478973;  // std dev = 0.064, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), follows(H, A) )
%   | | | then return 0.5944734122109543;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.7265123987759795;  // std dev = 0.091, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.523106207953653;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7240144068893276;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1254446385283921;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | | then return 0.49973181943067085;  // std dev = 1.678, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | | else return 0.5592571843540556;  // std dev = 0.065, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.42123351056551017;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.49007662994183904;  // std dev = 1.341, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | else return 0.57135102561914;  // std dev = 0.131, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360676;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( tweets(A, G), recursion_accounttype(F, B) )
%   | | | then return 0.4185704034846294;  // std dev = 0.944, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.4285816194219394;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.43921095434027346;  // std dev = 0.138, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.3825082340363726;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.42613503292854615;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then return 0.335998307949806;  // std dev = 0.091, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(E, A), follows(D, E) )
%   | | | then return 0.08801549391093036;  // std dev = 0.812, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.32200584744383015;  // std dev = 0.058, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.3378841074109432;  // std dev = 0.151, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, F) )
%   | then return -0.0926912761892605;  // std dev = 1.19e-07, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, D) )
%   | | | then return 0.27082008855975087;  // std dev = 0.038, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.28259110680886473;  // std dev = 0.062, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2638368371590922;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2479728227585899;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.08631844770491348;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2520849154664827;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.18196277389518;  // std dev = 0.933, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2596936298347545;  // std dev = 0.080, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), follows(A, F) )
%   | | | then return 0.22075976378710757;  // std dev = 0.033, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.2290008654546781;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.21588592170756343;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2046605334179729;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.16978099572284147;  // std dev = 0.969, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.4107101586525414;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20873624383695238;  // std dev = 0.017, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.21796761634587888;  // std dev = 0.063, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.16185117030777188;  // std dev = 0.989, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.1851976081224493;  // std dev = 0.068, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.1386335759181182;  // std dev = 0.972, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.028235571907569756;  // std dev = 0.908, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.1794148246788632;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2138463639505705;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1828181563746562;  // std dev = 0.040, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1764521114542612;  // std dev = 0.041, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07324622576333696;  // std dev = 5.74e-09, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.13867655882475222;  // std dev = 0.989, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.15888951922568453;  // std dev = 0.060, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.19082221416652972;  // std dev = 0.168, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16327449781429854;  // std dev = 0.063, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.15816312246089398;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14879233348528692;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.057001958170980166;  // std dev = 1.713, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return 0.15678605662022022;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420308;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), follows(E, G) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(G, B) )
%   | | | then return 0.14431584903260786;  // std dev = 0.053, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.05220957031869862;  // std dev = 1.358, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return -0.1599397563688289;  // std dev = 1.307, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.08215793215763673;  // std dev = 0.976, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return 0.1397087495672349;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1307093800959946;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16424858225303246;  // std dev = 0.073, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.14170350003149007;  // std dev = 0.051, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.06419184008202596;  // std dev = 6.72e-09, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.328', 'seconds']
Refined model CLL: -0.085684


******************************************
Best model found
******************************************
Results 

CLL : -0.091613 

AUC ROC : 0.994581 

AUC PR : 0.432779 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 54.198 

Total Inference Time : 13.288091897964478 

Total revision time: 90.26961403274537
Best scored revision CLL: -0.085684


Results 

CLL : -0.091613 

AUC ROC : 0.994581 

AUC PR : 0.432779 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 90.30191831970215 

Total Inference Time : 13.288091897964478 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.247
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1073683062797981;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7085007341817332;  // std dev = 0.999, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.0320366128185137;  // std dev = 3.738, 199.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09532678961362827;  // std dev = 0.997, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1524820240859856;  // std dev = 2.896, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5466122968670128;  // std dev = 1.361, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7258937158588983;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7783099020321511;  // std dev = 0.145, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5643290406600241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5580742978986555;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5580742978986555;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.042912688637754014;  // std dev = 3.652, 215.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=21 */
%   | | | else return -0.0020706888645646276;  // std dev = 2.543, 74.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.45135477487310477;  // std dev = 2.539, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | else return -0.11945778827273959;  // std dev = 0.126, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.433750773555085;  // std dev = 0.258, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.11074201998382437;  // std dev = 0.076, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13759395648516984;  // std dev = 1.983, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.32410712554934246;  // std dev = 1.149, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.3855996685791113;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3233518484648692;  // std dev = 0.127, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6280932732912072;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09122897077512376;  // std dev = 1.415, 164.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=4 */
%   | | else return -0.014686687221400227;  // std dev = 0.264, 83.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0324574011480095;  // std dev = 3.654, 258.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2534041853919043;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5358218701605821;  // std dev = 0.723, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1271993706935859;  // std dev = 0.148, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11646004513814039;  // std dev = 0.148, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2636763395971991;  // std dev = 2.317, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07906770423206975;  // std dev = 1.915, 231.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.006624442601447356;  // std dev = 0.710, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18785063379320222;  // std dev = 0.996, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.25044404435693274;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03941943610003115;  // std dev = 1.889, 153.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=17 */
%   | | | else return -0.02410753698155056;  // std dev = 1.215, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.007008357011516522;  // std dev = 1.443, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | | else return 0.055234117558430475;  // std dev = 1.607, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10766566751171085;  // std dev = 0.279, 84.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.26998927586617794;  // std dev = 1.379, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0922957467069361;  // std dev = 0.106, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.37980594587726807;  // std dev = 0.368, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09517223033708538;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014559848612640891;  // std dev = 1.633, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18255113888555907;  // std dev = 1.726, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.1423613461319667;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08567910634125639;  // std dev = 0.065, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08300959147764947;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.04218092951516029;  // std dev = 0.509, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.06627775804324361;  // std dev = 0.911, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.004457823868870412;  // std dev = 2.149, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.998', 'seconds']
Parameter learned model CLL:-0.112619 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [4.46e-07, 0, 103], 'true,false,true': [0.0, 178, 0], 'true,false,false,true': [0.983, 28, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [7.21e-09, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.999, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.738, 177, 22], 'false,true,false,false': [0.0, 4, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.997, 24, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.896, 35, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.361, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.145, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.652, 194, 21], 'false,false,false,false': [2.543, 63, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.539, 5, 97], 'true,false': [0.126, 177, 0], 'false,true,true': [0.258, 1, 19], 'false,true,false': [0.076, 49, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.983, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.149, 1, 73], 'true,false': [0.095, 0, 4], 'false,true,true': [0.127, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.061, 0, 17], 'false,false,true,false': [1.415, 160, 4], 'false,false,false': [0.264, 72, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.654, 167, 91], 'false,true': [0.041, 0, 13], 'false,false,true': [0.723, 0, 22], 'false,false,false,true': [0.148, 31, 0], 'false,false,false,false': [0.148, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.317, 5, 107], 'true,false': [1.915, 220, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.71, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.996, 1, 80], 'true,false,true': [0.074, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.889, 136, 17], 'false,false,true,false': [1.215, 31, 5], 'false,false,false,true': [1.443, 50, 13], 'false,false,false,false': [1.607, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.279, 7, 77], 'false,true,true,true': [1.379, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.106, 204, 0], 'false,false,true,true': [0.368, 0, 9], 'false,false,true,false': [0.002, 18, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.633, 26, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.726, 2, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.065, 159, 0], 'true,false,false,true': [1.05e-08, 22, 0], 'true,false,false,false': [0.509, 14, 2], 'false,true': [0.911, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.149, 49, 17]}]
{'': [0.22328032544378915, 0.21345155709342578], 'true': [1.9315724855614373e-15, 0.009477804995306718], 'false': [0.04338842975206614, 5.3097622916855314e-17], 'false,true': [0.04338842975206614, nan], 'true,false': [-1.9709577291098283e-16, 0.060353798126951116], 'true,false,false': [0.03329369797859696, 0.25]}
{'': [0.012023801860629194, 0.09565876837694288], 'false': [0.06898240900376867, 0.14883809156110464], 'false,false': [0.03976245688517565, 0.171762171004533], 'false,false,false': [0.0, 0.1612703216798186], 'false,true': [nan, 0.06898240900376867], 'false,true,false': [0.07019706773918256, 0.0], 'false,false,true': [nan, 0.03976245688517565]}
{'': [0.02541125093941548, 0.08332978273654247], 'false': [nan, 0.08332978273654251], 'false,false': [1.0449157878825003e-16, 0.06885793995719583], 'false,false,false': [0.0620423976442084, 0.08741890248852457], 'true': [0.025804753615251856, 0.013695616266691912], 'true,true': [0.025722853968337747, 0.0], 'true,false': [0.010561642777704106, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.09872366517642811, 0.10357574769770521], 'false': [0.08356813669526604, 0.15116744442588012], 'false,false': [nan, 0.15116744442588012], 'false,false,false': [nan, 0.15116744442588012], 'true': [0.06317636459700565, 8.900836002705427e-05], 'false,true': [0.06637509705379256, 0.005738951918768089]}
{'': [0.0172183900780595, 0.06286177142457225], 'false': [0.0009525374939473357, 0.059681056556238885], 'false,false': [0.055111501376057206, 0.06959068251235968], 'false,false,true': [0.00022202959606974852, 0.01220338334252358], 'true': [0.017832070165194103, 0.0022778901228411863], 'false,true': [0.0009525374939473357, nan]}
{'': [0.05174536939631284, 0.0780404515235627], 'false': [0.00012998750023263117, 0.08275276296379847], 'false,false': [0.02373571171870563, 0.0006258382019247154], 'true': [nan, 0.051745369396312905], 'true,false': [nan, 0.05174536939631284], 'false,false,false': [0.000702278905405468, 0.0005204406071415093]}
{'': [0.05217441508121762, 0.017982985142711645], 'true': [0.047930580414649544, 0.01587334467931162], 'false': [nan, 0.017982985142711645], 'false,false': [nan, 0.017982985142711645], 'false,false,false': [nan, 0.017982985142711645]}
{'': [0.012107401016113812, 0.03517334943573956], 'false': [nan, 0.035173349435739465], 'false,false': [0.02672860577187154, 0.05048164031579574], 'false,false,false': [0.03304532513564464, 0.08332024399485613], 'false,false,true': [0.02332070204329075, 0.04102240031698512], 'true': [0.012243967635056894, 0.0027529259763159064], 'true,false': [0.0027529259763159064, nan]}
{'': [0.07771001116366681, 0.033989316317749756], 'false': [0.023803749571197044, 0.06873409323210666], 'false,false': [0.055150721632853894, 0.07847568961193892], 'false,false,false': [nan, 0.07847568961193892], 'false,false,true': [0.015048912344419494, 2.0365043333790842e-07], 'false,true': [0.05763860669053176, 5.508647604768324e-05], 'false,true,true': [0.05763860669053176, nan]}
{'': [0.0263168922855514, 0.0770504929538861], 'false': [0.16581716082542267, 0.06997338464501231], 'false,false': [nan, 0.06997338464501231], 'true': [0.028503299250514685, 0.001475362688394325], 'true,true': [0.03103628226975896, 8.041651038724771e-06], 'true,false': [2.6676165984756447e-05, 0.007218616418069809], 'true,false,false': [5.046468293750712e-18, 0.016179120518488445]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.321
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.6569734122109542;  // std dev = 0.242, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7293663053300808;  // std dev = 0.124, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03389959532699347;  // std dev = 3.346, 158.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=17 */
%   | | | else return -0.029201250160969295;  // std dev = 1.834, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.10100387045363599;  // std dev = 0.180, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12174730153810653;  // std dev = 2.931, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5770569367664814;  // std dev = 0.113, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else return 0.6352079254223794;  // std dev = 0.119, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.401512437456621;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.552922220713354;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.552922220713354;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7260772323463333;  // std dev = 0.001, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12215356892235871;  // std dev = 0.097, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07572174855113997;  // std dev = 2.031, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.1607033011744187;  // std dev = 2.001, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4289667794627648;  // std dev = 0.183, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.5994726631410181;  // std dev = 0.086, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.11407971614128713;  // std dev = 0.205, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.42747042615239567;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21224816867491042;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5656497650229267;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4473044026326416;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.06051706049765501;  // std dev = 1.118, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | | | else return 0.13036360445811376;  // std dev = 1.877, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.26309879234613265;  // std dev = 1.919, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   | | | else return 0.33125390725769177;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4683263319705502;  // std dev = 0.116, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3834731293069241;  // std dev = 0.228, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.3415654494315035;  // std dev = 0.072, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20549688396149213;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then return -0.042582048347116624;  // std dev = 0.180, 189.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=21 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.05673197513447876;  // std dev = 1.132, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | | else return 0.12537706613024838;  // std dev = 1.848, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2564541894744765;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.3950139507733135;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04694089357416975;  // std dev = 1.755, 143.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=14 */
%   | | | else return -0.051095386244816375;  // std dev = 0.496, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else return -0.034587987650141;  // std dev = 0.186, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2743233202423496;  // std dev = 0.126, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.08129667485134102;  // std dev = 1.027, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5701936738277765;  // std dev = 0.150, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13486801390720657;  // std dev = 0.039, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.22828770288726474;  // std dev = 0.149, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.16405247399420972;  // std dev = 0.246, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return 0.166163519686693;  // std dev = 0.908, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.46050306790417866;  // std dev = 0.303, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.09146860511023258;  // std dev = 0.071, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3417204847580981;  // std dev = 0.330, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11719191974440424;  // std dev = 0.016, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15745087726462448;  // std dev = 0.789, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.04474131936310026;  // std dev = 1.170, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.17360963587983075;  // std dev = 0.135, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( follows(A, C) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.12839368402408471;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.20125625768047625;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -2.6302330402054873E-4;  // std dev = 0.952, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.2635317092004172;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10420129294045022;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.04879829929719896;  // std dev = 0.120, 191.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.005811483679924081;  // std dev = 1.094, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.009121723408668582;  // std dev = 1.481, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.13766661637492758;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.08858704675577796;  // std dev = 0.867, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.1801827857127525;  // std dev = 0.083, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.20366777989983476;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then return -0.04140645610146536;  // std dev = 0.138, 255.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.21596174159106268;  // std dev = 0.959, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.10673143705814375;  // std dev = 0.017, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.02013749889422166;  // std dev = 0.887, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.06427755987581059;  // std dev = 1.403, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10972815625856;  // std dev = 1.687, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.3213776220956761;  // std dev = 0.467, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.16825650971387635;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07366984412290652;  // std dev = 0.033, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.231835932241542;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.09671055277438957;  // std dev = 0.018, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.4333337157670633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.19204149111674854;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.050395449495967616;  // std dev = 0.310, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.989', 'seconds']
Refined model CLL: -0.111389


******************************************
Best model found
******************************************
Results 

CLL : -0.114993 

AUC ROC : 0.993616 

AUC PR : 0.317758 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 7.321 

Total Inference Time : 12.389145374298096 

Total revision time: 34.66872302818298
Best scored revision CLL: -0.111389


Results 

CLL : -0.114993 

AUC ROC : 0.993616 

AUC PR : 0.317758 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 34.69535271453857 

Total Inference Time : 12.389145374298096 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.079
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10548742853685135;  // std dev = 1.388, 55.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   | | | else return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7145405098084748;  // std dev = 1.012, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.029790701496177525;  // std dev = 3.490, 167.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.023616985331199013;  // std dev = 1.750, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7247539622367456;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1327041117522323;  // std dev = 4.482, 131.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.544420665693385;  // std dev = 1.457, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7221479198619432;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5605545306994274;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5897060314928096;  // std dev = 0.156, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5115903411335246;  // std dev = 0.769, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020593239752060753;  // std dev = 4.613, 262.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=34 */
%   | | | else return 0.0720456543531582;  // std dev = 3.464, 93.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5049385327524454;  // std dev = 2.061, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | else return -0.12591923943198632;  // std dev = 0.139, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4201826744544173;  // std dev = 0.190, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.1309068168168795;  // std dev = 0.002, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41495284783545017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07713013479373439;  // std dev = 3.301, 82.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31828664882163704;  // std dev = 1.060, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return -0.076291666200544;  // std dev = 0.737, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31506329458598803;  // std dev = 0.042, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4776258941123509;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5690461989065201;  // std dev = 0.968, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.09780250291832947;  // std dev = 1.345, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | else return 0.011197399027106977;  // std dev = 0.307, 149.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.033734160554019926;  // std dev = 3.091, 244.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26493349425740526;  // std dev = 0.236, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48303174372761054;  // std dev = 2.022, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13534281723641228;  // std dev = 0.242, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return -0.13113933045270446;  // std dev = 0.188, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2807739451685172;  // std dev = 2.374, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.09057609275639368;  // std dev = 1.649, 224.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06039763776831104;  // std dev = 2.086, 75.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.181586213598696;  // std dev = 1.000, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.29052559822875745;  // std dev = 0.061, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04123719363628545;  // std dev = 1.997, 156.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=18 */
%   | | | else return -0.0909845545114874;  // std dev = 0.644, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 1.9013185500214193E-4;  // std dev = 2.081, 117.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=28 */
%   | | | else return 0.059075026454250223;  // std dev = 2.595, 72.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13653729734539904;  // std dev = 0.211, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2658635711477895;  // std dev = 1.461, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.094701532523977;  // std dev = 0.128, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.28071321125816634;  // std dev = 1.110, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.0980741798295386;  // std dev = 0.070, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03190212897188504;  // std dev = 2.469, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17071075325796617;  // std dev = 1.572, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.1272736696721292;  // std dev = 0.815, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08455847187713814;  // std dev = 0.055, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0950418566954942;  // std dev = 0.042, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.012803940108542;  // std dev = 0.989, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12577155640855947;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02964050744152881;  // std dev = 2.787, 136.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.524', 'seconds']
Parameter learned model CLL:-0.117415 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 173, 0], 'true,false,false,true': [1.388, 53, 2], 'true,false,false,false': [1.247, 7, 2], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 95, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.012, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.49, 148, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.75, 31, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.482, 91, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.457, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [2.98e-08, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.156, 0, 6], 'false,false,true,false': [0.769, 1, 15], 'false,false,false,true': [4.613, 228, 34], 'false,false,false,false': [3.464, 70, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.061, 3, 115], 'true,false': [0.139, 219, 0], 'false,true,true': [0.19, 1, 17], 'false,true,false': [0.002, 39, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.301, 59, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.06, 1, 77], 'true,false': [0.737, 1, 1], 'false,true,true': [0.042, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.968, 1, 26], 'false,false,true,false': [1.345, 156, 3], 'false,false,false': [0.307, 121, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.091, 162, 82], 'false,true': [0.236, 0, 22], 'false,false,true': [2.022, 3, 52], 'false,false,false,true': [0.242, 94, 0], 'false,false,false,false': [0.188, 68, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.374, 4, 121], 'true,false': [1.649, 217, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.086, 47, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.0, 1, 83], 'true,false,true': [0.061, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.997, 138, 18], 'false,false,true,false': [0.644, 31, 1], 'false,false,false,true': [2.081, 89, 28], 'false,false,false,false': [2.595, 48, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.211, 4, 78], 'false,true,true,true': [1.461, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.128, 218, 0], 'false,false,true,true': [1.11, 1, 19], 'false,false,true,false': [0.07, 48, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.469, 54, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.572, 2, 85], 'true,true,false': [0.815, 1, 19], 'true,false,true': [0.055, 150, 0], 'true,false,false,true': [0.042, 33, 0], 'true,false,false,false': [0.989, 20, 4], 'false,true': [0.053, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.787, 96, 40]}]
{'': [0.21572644051373357, 0.22222222222222296], 'false': [0.019991670137443407, 7.946859544685331e-17], 'true': [0.01851192595229848, 0.01659278249568257], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.8225626531418756e-16, 0.0585937499999999], 'true,false,false': [0.035041322314049536, 0.17283950617283952]}
{'': [0.011914076384147298, 0.1205935551015901], 'false': [0.07293873892724619, 0.15406338465508812], 'false,false': [0.08748776270758814, 0.16353524270655564], 'false,false,false': [0.0, 0.15334814068057526], 'false,false,true': [nan, 0.08748776270758814], 'false,true': [nan, 0.07293873892724619], 'false,true,false': [0.07293873892724619, nan]}
{'': [0.028271066398481804, 0.10693071733729739], 'false': [nan, 0.10693071733729749], 'false,false': [0.029202824939342707, 0.09540388434360002], 'false,false,false': [0.08121879048582764, 0.1290324600760196], 'false,false,true': [0.004052806828804527, 0.036969883254347025], 'true': [0.030746833869169155, 0.009615020397132457], 'true,true': [0.030746833869169155, nan], 'true,false': [0.016264221392373972, 1.1102230246251565e-16]}
{'': [0.1032196305804067, 0.11035621400580158], 'false': [0.07704370045007526, 0.13264312586427326], 'false,false': [0.0, 0.1328857347740722], 'false,false,false': [nan, 0.13288573477407217], 'true': [0.035994419021153, 8.885131046731334e-05], 'false,true': [0.036170486091983464, 3.1154315703714356e-06]}
{'': [0.02461811474375659, 0.08181760190459304], 'false': [0.001282871362237999, 0.08088659152709446], 'false,false': [0.06994245032727452, 0.09446577555199219], 'false,false,true': [0.03468714401449821, 0.01137783400215913], 'true': [0.014396515299967808, 0.2714607475329206], 'false,true': [8.860546536090252e-05, 0.0]}
{'': [0.039167489329505395, 0.08795087262494015], 'false': [0.0025349303076726507, 0.09120955287200333], 'false,false': [0.07430166814192751, 0.0005837864930810956], 'true': [nan, 0.03916748932950534], 'true,false': [nan, 0.039167489329505395], 'false,false,false': [0.0006224144191915801, 0.0005201365083589345]}
{'': [0.055645820674410505, 0.05803755331322636], 'false': [nan, 0.05803755331322641], 'false,false': [nan, 0.05803755331322636], 'false,false,false': [nan, 0.05803755331322636], 'true': [0.04509506883631832, 0.012142094854023889]}
{'': [0.011951641407568136, 0.04292433522401399], 'false': [nan, 0.042924335224013795], 'false,false': [0.02377663392807732, 0.059362044592711216], 'false,false,false': [0.036997891593552455, 0.09355728842798489], 'false,false,true': [0.02557270858198836, 0.012967212614774834], 'true': [0.011915789262272177, 0.0018656370916209225], 'true,false': [0.0018656370916209225, nan]}
{'': [0.0443434427941034, 0.04046153962796748], 'false': [0.02510137522381637, 0.06551209829929355], 'false,false': [0.04796630124666255, 0.08125633629616051], 'false,false,false': [nan, 0.08125633629616051], 'false,false,true': [0.0615637949384328, 0.00010071192008281882], 'false,true': [0.05471140763267792, 7.54494375467543e-05], 'false,true,true': [0.05471140763267792, nan]}
{'': [0.02658761846390044, 0.05445740667985816], 'false': [0.0003496887070851898, 0.05712681480968292], 'false,false': [nan, 0.057126814809682964], 'true': [0.029594436982659896, 0.005323140413812077], 'true,true': [0.028411182004442394, 0.03320748510941507], 'true,false': [2.0035348177128337e-05, 0.018856296302618394], 'true,false,false': [5.241067782003011e-05, 0.04079617460670632]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 11.601
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.797542874493451;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else if ( follows(H, A), follows(I, H) )
%   | | | then return -0.11243930019460534;  // std dev = 1.393, 68.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995121;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7283181653235039;  // std dev = 0.140, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.6606498827991895;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.054933128661958146;  // std dev = 2.960, 158.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=13 */
%   | | | else return -0.10319186106133679;  // std dev = 0.850, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.0046262759324857275;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return -0.08125069819317288;  // std dev = 1.174, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12224686704466882;  // std dev = 4.506, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5601832137621467;  // std dev = 0.040, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.7056054637406804;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7304280098341234;  // std dev = 0.168, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1187285267736544;  // std dev = 0.025, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5015575271155345;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.589478232157801;  // std dev = 0.113, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.09170715054222751;  // std dev = 1.304, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0.10565060573991021;  // std dev = 4.489, 140.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=41 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.383391501275486;  // std dev = 1.572, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | | else return 0.48640990028988995;  // std dev = 1.461, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.6052602570997038;  // std dev = 0.106, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.11846055015567768;  // std dev = 0.293, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4564909170933094;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11338472761622828;  // std dev = 0.079, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.4235353470187697;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.1314681782978822;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09001643285581667;  // std dev = 3.230, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.30877786077624425;  // std dev = 0.135, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.3244146531992116;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return 0.1341481028446995;  // std dev = 0.895, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21385425208984365;  // std dev = 0.315, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.345593398455771;  // std dev = 0.019, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.45620752007037424;  // std dev = 0.909, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09937612271227864;  // std dev = 0.150, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05731813031522213;  // std dev = 2.473, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
%   | | | else return 0.13070459331599804;  // std dev = 2.986, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.24701763265670068;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.011377802379472501;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.24360911703365665;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.05333929917200413;  // std dev = 0.117, 188.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.282074148119324;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2113410905776553;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.20140963154253866;  // std dev = 1.081, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5717075228619722;  // std dev = 0.388, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.13457954811259148;  // std dev = 0.035, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.21078233578486044;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return -0.02171883436819137;  // std dev = 0.711, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08398291999204303;  // std dev = 0.069, 138.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3581126577687533;  // std dev = 0.475, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.09309816403572002;  // std dev = 0.513, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3772990317162901;  // std dev = 0.563, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.15501944653225463;  // std dev = 1.004, 66.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.029443273973928867;  // std dev = 1.017, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.11209325253505341;  // std dev = 1.462, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17645111615705295;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.2730238505554884;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.03921519839474756;  // std dev = 1.311, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.30809904486050077;  // std dev = 0.252, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07883765485497556;  // std dev = 0.121, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2685013079327673;  // std dev = 1.168, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.12617302846018935;  // std dev = 0.120, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05155536116447226;  // std dev = 0.903, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.03040150685637198;  // std dev = 1.596, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1643004013328486;  // std dev = 0.384, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2084192667421346;  // std dev = 0.323, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.025253418540721218;  // std dev = 0.875, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07245154233746516;  // std dev = 0.072, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23474940747273215;  // std dev = 0.937, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.10934048332300927;  // std dev = 0.102, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.0015045743258220881;  // std dev = 1.536, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0.06022150711830002;  // std dev = 1.302, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.14235723049835933;  // std dev = 0.057, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.09088642083784441;  // std dev = 0.957, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.18969155463674717;  // std dev = 0.150, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06110339071904879;  // std dev = 0.054, 221.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11763178247014788;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2466945933241806;  // std dev = 1.018, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return -0.11385189661590776;  // std dev = 0.267, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06773143415084333;  // std dev = 0.642, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.03604025225447406;  // std dev = 1.312, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.762', 'seconds']
Refined model CLL: -0.106467


******************************************
Best model found
******************************************
Results 

CLL : -0.1039 

AUC ROC : 0.993355 

AUC PR : 0.363896 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 11.601 

Total Inference Time : 21.828985452651978 

Total revision time: 49.63821380615234
Best scored revision CLL: -0.106467


Results 

CLL : -0.1039 

AUC ROC : 0.993355 

AUC PR : 0.363896 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 49.664843492507934 

Total Inference Time : 21.828985452651978 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.239
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09423201728144018;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7146171163804227;  // std dev = 1.003, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.031688697613944286;  // std dev = 3.768, 198.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09372565307925439;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11355492036512249;  // std dev = 2.951, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5408407154675992;  // std dev = 1.586, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7314205147440211;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8079530945418967;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5635385863258856;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5635385863258856;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03436156783895925;  // std dev = 3.653, 193.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=21 */
%   | | | else return -3.20280544940018E-4;  // std dev = 2.545, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.47477273024892314;  // std dev = 2.166, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.1211443378708527;  // std dev = 0.109, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4932603773785294;  // std dev = 0.115, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.10880060995369481;  // std dev = 0.082, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09565052332680461;  // std dev = 2.119, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.28646141253230073;  // std dev = 1.977, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.17251268960524502;  // std dev = 1.005, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3212930869238337;  // std dev = 0.133, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5698362364720371;  // std dev = 0.963, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09211127088422577;  // std dev = 1.394, 176.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=4 */
%   | | else return -0.02864941906658883;  // std dev = 0.248, 97.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03047138389420718;  // std dev = 3.581, 280.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1251239221107335;  // std dev = 1.338, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5422528787487767;  // std dev = 0.706, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11590871244298716;  // std dev = 0.099, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.11735606535838566;  // std dev = 0.119, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28998064985924754;  // std dev = 1.847, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07925878597461453;  // std dev = 1.906, 265.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014108335083557738;  // std dev = 0.735, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1792748930718624;  // std dev = 1.407, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.3011078426057135;  // std dev = 0.000322, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03164337447874413;  // std dev = 1.900, 135.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=17 */
%   | | | else return -0.04947354237081445;  // std dev = 1.365, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.035393044422650594;  // std dev = 1.676, 80.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=13 */
%   | | | else return 0.03976617527013301;  // std dev = 1.657, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13513096575720793;  // std dev = 0.241, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2770309524257378;  // std dev = 1.358, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09235619528468371;  // std dev = 0.063, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.29311370013801186;  // std dev = 0.897, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.09055416855557415;  // std dev = 0.000247, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04933488492410273;  // std dev = 1.606, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1630541004657277;  // std dev = 2.176, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.057035585969791504;  // std dev = 0.938, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08509502138197984;  // std dev = 0.040, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08293585332175135;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.023674235799307046;  // std dev = 0.505, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.05944573321987005;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05844876261014287;  // std dev = 1.847, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.035', 'seconds']
Parameter learned model CLL:-0.111926 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 174, 0], 'true,false,false,true': [0.976, 20, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.003, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.768, 176, 22], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 26, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.951, 43, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.586, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.101, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.653, 172, 21], 'false,false,false,false': [2.545, 61, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.166, 3, 97], 'true,false': [0.109, 187, 0], 'false,true,true': [0.115, 0, 19], 'false,true,false': [0.082, 42, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.119, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.977, 4, 73], 'true,false': [1.005, 1, 4], 'false,true,true': [0.133, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.963, 1, 17], 'false,false,true,false': [1.394, 172, 4], 'false,false,false': [0.248, 86, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.581, 189, 91], 'false,true': [1.338, 2, 13], 'false,false,true': [0.706, 0, 22], 'false,false,false,true': [0.099, 34, 0], 'false,false,false,false': [0.119, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.847, 3, 107], 'true,false': [1.906, 254, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.735, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.407, 2, 80], 'true,false,true': [0.000322, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.9, 118, 17], 'false,false,true,false': [1.365, 38, 5], 'false,false,false,true': [1.676, 67, 13], 'false,false,false,false': [1.657, 26, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.241, 5, 77], 'false,true,true,true': [1.358, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.063, 186, 0], 'false,false,true,true': [0.897, 1, 9], 'false,false,true,false': [0.000247, 21, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.606, 21, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.176, 4, 94], 'true,true,false': [0.938, 1, 9], 'true,false,true': [0.04, 166, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.505, 11, 2], 'false,true': [0.926, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.847, 37, 17]}]
{'': [0.2253940792003098, 0.22222222222222235], 'true': [0.027500889996442155, 0.009899999999999833], 'false': [0.0, 4.7580986769649563e-17], 'true,false': [-1.8376105235175005e-16, 0.07100591715976336], 'true,false,false': [0.045351473922902535, 0.16000000000000003], 'false,true': [0.0, nan]}
{'': [0.012127837129509364, 0.09314395945375671], 'false': [0.0707715950318471, 0.13395961973542092], 'false,false': [0.03566529492455418, 0.15759603855344798], 'false,false,false': [0.0, 0.1451563649511324], 'false,true': [nan, 0.0707715950318471], 'false,true,false': [0.0717126952627354, 2.3129646346357427e-18], 'false,false,true': [nan, 0.03566529492455418]}
{'': [0.03373480523340007, 0.09013651612113291], 'false': [nan, 0.09013651612113294], 'false,false': [5.224578939412501e-17, 0.07502994372797384], 'false,false,false': [0.06913880950006306, 0.08997749335473758], 'true': [0.0344887533469875, 0.01588538542763196], 'true,true': [0.034470382294700064, 0.0], 'true,false': [0.0051228098186573146, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.09700488360116133, 0.10782591696695047], 'false': [0.08574248721799352, 0.15476763903727422], 'false,false': [nan, 0.15476763903727422], 'false,false,false': [nan, 0.15476763903727422], 'true': [0.04690246552864302, 6.342120855653531e-05], 'false,true': [0.013112398171077712, 0.0067530583250295]}
{'': [0.06071953850261536, 0.05834134703443408], 'true': [0.05075138271374694, 0.2020365525028179], 'false': [0.0010428178107472535, 0.05487679792629886], 'false,false': [0.05168276242600922, 0.061262083522136544], 'false,false,true': [0.0515407970346519, 0.011041915402870042], 'false,true': [0.0010428178107472535, nan]}
{'': [0.04579516460338616, 0.09097305783342732], 'false': [0.11940797277766609, 0.08532345821635623], 'false,false': [0.022651007487923935, 0.000348181246637961], 'true': [nan, 0.045795164603386576], 'true,false': [nan, 0.04579516460338616], 'false,false,false': [0.0002910146917921689, 0.00040268223604527563]}
{'': [0.047048191795433514, 0.02251748745142784], 'true': [0.03100313854975838, 0.01371599269068424], 'false': [nan, 0.02251748745142784], 'false,false': [nan, 0.02251748745142784], 'false,false,false': [nan, 0.02251748745142784]}
{'': [0.023904036992176064, 0.03828341193843751], 'false': [nan, 0.03828341193843748], 'false,false': [0.030815297402372724, 0.04950919200020142], 'false,false,false': [0.03511195343893507, 0.07848749051203534], 'false,false,true': [0.026750177423244776, 0.04333676816002501], 'true': [0.02413364988945644, 5.174470994739888e-08], 'true,false': [5.174470994739888e-08, nan]}
{'': [0.058261100102483726, 0.03707266953712156], 'false': [0.02590631514191869, 0.07309108127639248], 'false,false': [0.05810197410908715, 0.08897957481932425], 'false,false,false': [nan, 0.08897957481932425], 'false,false,true': [0.08039928452890835, 2.8980286530321833e-09], 'false,true': [0.05591629601120978, 2.1477206544473613e-05], 'false,true,true': [0.05591629601120978, nan]}
{'': [0.033017982936637484, 0.07341754783105106], 'false': [0.17141824221769514, 0.06316551860200088], 'false,false': [nan, 0.06316551860200088], 'true': [0.052922960802462234, 0.0016077334724156492], 'true,true': [0.04830189378380268, 0.08801022600420874], 'true,false': [9.76760947363142e-06, 0.012444695428062326], 'true,false,false': [-1.5419764230904951e-18, 0.019623551355773143]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.863
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.8242506300147667;  // std dev = 1.390, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7146508920879384;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.03374043645743423;  // std dev = 3.297, 157.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=17 */
%   | | | else return -0.004742059851341973;  // std dev = 1.749, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07085237758797633;  // std dev = 0.977, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10564989593542179;  // std dev = 2.971, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.516928238120759;  // std dev = 0.242, 75.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=70 */
%   | | else return 0.062090031790025924;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8051989670903201;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return 0.39461852148955406;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5601031319759122;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.47266914426748535;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(J, A) )
%   | | then return -0.06685812597190104;  // std dev = 0.209, 230.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=15 */
%   | | else return 0.08786098744079476;  // std dev = 0.371, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.41334411790557407;  // std dev = 0.167, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4188742573074035;  // std dev = 1.188, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.713391474773594;  // std dev = 0.137, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.11843303816099121;  // std dev = 0.152, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.5099198912394216;  // std dev = 0.115, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.11807899441191137;  // std dev = 0.020, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.678816925529064;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14825667197190984;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09266437936110661;  // std dev = 0.379, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.33633880174605724;  // std dev = 0.042, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.2322384708401704;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5313244747139129;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.1811107965827599;  // std dev = 0.914, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3520765507627593;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.589881925415614;  // std dev = 0.065, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10308500042984227;  // std dev = 0.051, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.022405182670297036;  // std dev = 1.677, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.07540124488150084;  // std dev = 1.799, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.22693460907815194;  // std dev = 1.311, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.2822754227532597;  // std dev = 0.217, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.03876671934248425;  // std dev = 0.946, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then return -0.044226174648250204;  // std dev = 0.151, 150.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=15 */
%   | | else return -0.045707412302797554;  // std dev = 0.153, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2802154731390498;  // std dev = 0.089, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2164743198408056;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4334599293445462;  // std dev = 1.415, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return -0.12868492902030793;  // std dev = 0.032, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21475670429833832;  // std dev = 0.118, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.11634472300290115;  // std dev = 0.291, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.22751886951578296;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.4202976467378782;  // std dev = 0.059, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.08786776311409196;  // std dev = 0.588, 192.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return -0.012588061203037083;  // std dev = 1.660, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0.0507249303629966;  // std dev = 0.423, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09677581206571248;  // std dev = 0.676, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.09370296446583609;  // std dev = 1.287, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.14513721674081861;  // std dev = 1.370, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.18693034469677514;  // std dev = 0.020, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.20411103338573425;  // std dev = 0.123, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.23821401094571337;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04835503051527052;  // std dev = 0.134, 241.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.019209677188969525;  // std dev = 1.137, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.16725174246752075;  // std dev = 0.553, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.08729393749984579;  // std dev = 0.806, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.010276035793694913;  // std dev = 1.395, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1662609581227813;  // std dev = 0.052, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.02547061871123335;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.29559068021751145;  // std dev = 0.073, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.26397770612136773;  // std dev = 0.098, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07909912638829038;  // std dev = 0.062, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3858700707645991;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12571712679475305;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.006140832646213419;  // std dev = 0.689, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.028386296229534418;  // std dev = 1.361, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14460376643537465;  // std dev = 0.114, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.2773403618631844;  // std dev = 0.232, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.07450297600346449;  // std dev = 0.015, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.0370012268946417;  // std dev = 0.104, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.04084695037822543;  // std dev = 0.864, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3139550545289773;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12710339094680512;  // std dev = 0.124, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01430739121958881;  // std dev = 0.709, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.029283163084011306;  // std dev = 1.299, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.887', 'seconds']
Refined model CLL: -0.10884


******************************************
Best model found
******************************************
Results 

CLL : -0.110633 

AUC ROC : 0.994913 

AUC PR : 0.456893 

Precision : 0.340326 

Recall : 0.935897 

F1 : 0.499145 

Total Learning Time : 8.863 

Total Inference Time : 13.87452483177185 

Total revision time: 40.02721238327027
Best scored revision CLL: -0.10884


Results 

CLL : -0.110633 

AUC ROC : 0.994913 

AUC PR : 0.456893 

Precision : 0.340326 

Recall : 0.935897 

F1 : 0.499145 

Total Learning Time : 45.61173200798035 

Total Inference Time : 13.87452483177185 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.417
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10481402786345068;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7022421816697872;  // std dev = 1.406, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.049372918054359095;  // std dev = 3.539, 208.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07255442707033276;  // std dev = 1.801, 65.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15198716093605225;  // std dev = 4.414, 122.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5768570679803879;  // std dev = 0.363, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7065241675622982;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5830365711551436;  // std dev = 0.103, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5642618206162193;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019034412900333187;  // std dev = 4.595, 262.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=34 */
%   | | | else return 0.032682742065632694;  // std dev = 3.573, 114.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4964336095750043;  // std dev = 2.271, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | else return -0.12363007280752289;  // std dev = 0.182, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.45764549260730936;  // std dev = 0.099, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12396033409672963;  // std dev = 0.000627, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4195649022873632;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11793701127406016;  // std dev = 3.218, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.26832819596435364;  // std dev = 2.135, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   | else return -0.15502055484931582;  // std dev = 0.765, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3102141398453309;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.41584316995367543;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6037988393382581;  // std dev = 0.134, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09798560403846052;  // std dev = 1.346, 175.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=3 */
%   | | else return 0.017520478384805933;  // std dev = 0.306, 149.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02936678762118168;  // std dev = 3.193, 253.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2585620404963378;  // std dev = 0.185, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5183129518239348;  // std dev = 1.381, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14058550064829836;  // std dev = 0.242, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return -0.11816087743375502;  // std dev = 0.158, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30284221121748284;  // std dev = 1.616, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08950496632199718;  // std dev = 1.629, 228.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.045128325589094805;  // std dev = 2.193, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1827976243645292;  // std dev = 0.997, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.25330483840283413;  // std dev = 0.059, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.041153481160299925;  // std dev = 1.983, 159.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=18 */
%   | | | else return -0.09639745732551885;  // std dev = 0.736, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.008074709301047329;  // std dev = 2.178, 99.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
%   | | | else return 0.047656167686627365;  // std dev = 2.486, 78.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14748330005403706;  // std dev = 0.189, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29192913599133713;  // std dev = 0.947, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09248068005941;  // std dev = 0.137, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.315312215110202;  // std dev = 0.448, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09934439550010615;  // std dev = 0.058, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0214958941857208;  // std dev = 2.452, 77.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15963332859716053;  // std dev = 1.757, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.160908994064763;  // std dev = 0.378, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08293218465165798;  // std dev = 0.040, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0937152332518591;  // std dev = 0.037, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.003468622388870515;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.08074119797502173;  // std dev = 1.278, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03326310096822182;  // std dev = 2.693, 129.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.204', 'seconds']
Parameter learned model CLL:-0.116925 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false,true': [1.388, 52, 2], 'true,false,false,false': [1.0, 2, 2], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.957, 1, 11], 'false,false': [8.33e-09, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.406, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.539, 189, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.801, 61, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.414, 82, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.363, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.225, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.103, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.595, 228, 34], 'false,false,false,false': [3.573, 91, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.271, 3, 115], 'true,false': [0.182, 223, 0], 'false,true,true': [0.099, 0, 17], 'false,true,false': [0.000627, 36, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.218, 47, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [2.135, 5, 77], 'true,false': [0.765, 1, 1], 'false,true,true': [0.019, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.134, 0, 26], 'false,false,true,false': [1.346, 172, 3], 'false,false,false': [0.306, 121, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.193, 171, 82], 'false,true': [0.185, 0, 22], 'false,false,true': [1.381, 1, 52], 'false,false,false,true': [0.242, 87, 0], 'false,false,false,false': [0.158, 69, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.616, 1, 121], 'true,false': [1.629, 221, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.193, 51, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.997, 1, 83], 'true,false,true': [0.059, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.983, 141, 18], 'false,false,true,false': [0.736, 28, 1], 'false,false,false,true': [2.178, 71, 28], 'false,false,false,false': [2.486, 54, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.189, 3, 78], 'false,true,true,true': [0.947, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.137, 211, 0], 'false,false,true,true': [0.448, 0, 19], 'false,false,true,false': [0.058, 41, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.452, 56, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.757, 3, 85], 'true,true,false': [0.378, 0, 19], 'true,false,true': [0.04, 134, 0], 'true,false,false,true': [0.037, 33, 0], 'true,false,false,false': [0.972, 15, 4], 'false,true': [1.278, 2, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.693, 89, 40]}]
{'': [0.2208506841165995, 0.23140495867768657], 'false': [0.019991670137443407, 7.490661370964911e-17], 'true': [0.01851192595229848, 0.01769336904472029], 'false,true': [1.8243664837083652e-15, 0.07638888888888877], 'true,false': [-1.5705594006892458e-16, 0.06420927467300819], 'true,false,false': [0.035665294924554135, 0.25]}
{'': [0.022714470958436976, 0.1063239206747723], 'false': [0.06023065963531985, 0.1439089801837132], 'false,false': [0.049898135552963956, 0.16847391140097515], 'false,false,false': [0.0, 0.15970349513112778], 'false,true': [nan, 0.06023065963531985], 'false,true,false': [0.06023065963531985, nan], 'false,false,true': [nan, 0.049898135552963956]}
{'': [0.0030254695303114157, 0.10235451295619373], 'false': [nan, 0.10235451295619286], 'false,false': [0.0005754959311004322, 0.09067264778177682], 'false,false,false': [0.08058012428993, 0.11200401691109696], 'true': [0.001967139176440501, 0.009137145538823005], 'true,false': [0.016885660004450614, -1.1102230246251565e-16], 'true,true': [0.001967139176440501, nan], 'false,false,true': [0.0017624562889942592, -1.7763568394002506e-16]}
{'': [0.10222931997142948, 0.117926979062792], 'false': [0.07684543518477203, 0.1470755878467696], 'false,false': [0.0, 0.14789526788953045], 'false,false,false': [nan, 0.14789526788953047], 'true': [0.04371003187203591, 0.00014917442803070237], 'false,true': [0.00981097655823107, 3.9355845509983193e-07]}
{'': [0.06541616347554202, 0.07789272742316213], 'false': [0.0005227787677835579, 0.0770275512468924], 'false,false': [0.06456853491920556, 0.0934835200174667], 'true': [0.05560027478140914, 0.2929106771389133], 'false,false,true': [0.0006923258382059044, 0.010352065155565079], 'false,true': [1.760856323800297e-05, 0.0]}
{'': [0.04030504730118353, 0.08532648344397441], 'false': [0.0015492229062095534, 0.08933848331741141], 'false,false': [0.0359823301254477, 0.0006607836285499069], 'true': [nan, 0.040305047301184005], 'true,false': [nan, 0.04030504730118353], 'false,false,false': [0.0006744020650661369, 0.0003631693244378322]}
{'': [0.0499970228169337, 0.060856729276063906], 'false': [nan, 0.06085672927606387], 'false,false': [nan, 0.060856729276063906], 'false,false,false': [nan, 0.060856729276063906], 'true': [0.021392706290299483, 0.011645042617170236]}
{'': [0.011715101638703849, 0.04399925363236258], 'false': [nan, 0.04399925363236265], 'false,false': [0.024195968097449984, 0.06212109643978239], 'false,false,false': [0.04793437300017231, 0.07925103707302694], 'false,false,true': [0.02473334606548811, 0.01866852883878888], 'true': [0.01183641154574546, 0.0017644291773611098], 'true,false': [0.0017644291773611098, nan]}
{'': [0.035607819468594266, 0.03742094620677709], 'false': [0.022784243769108002, 0.06170918463268912], 'false,false': [0.04060635632845774, 0.07810495946248339], 'false,false,false': [nan, 0.07810495946248339], 'false,false,true': [0.010558274322899715, 8.337742896688335e-05], 'false,true': [0.023581954227990358, 8.91969259730033e-05], 'false,true,true': [0.023581954227990358, nan]}
{'': [0.027615686939414144, 0.0647789898951414], 'false': [0.16329644490914408, 0.05620694333340508], 'false,false': [nan, 0.0562069433334051], 'true': [0.030171173346781155, 0.005826905857153476], 'true,true': [0.035061376607369764, 0.007520472518088935], 'true,false': [1.1925166531305024e-05, 0.02037119520584261], 'true,false,false': [4.1304292095690655e-05, 0.04968725267663851]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.328
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.8126943896449667;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.676415332035936;  // std dev = 0.208, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | else return 0.7333436179694918;  // std dev = 0.170, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6759238226203321;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1254446385283912;  // std dev = 6.99e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else return -0.09599636128369854;  // std dev = 0.156, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.018585643907066525;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return -0.08639463552118447;  // std dev = 1.191, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6302322013528495;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11451353728090688;  // std dev = 4.539, 139.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.569515613954473;  // std dev = 0.018, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.7112315795645836;  // std dev = 0.210, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.604136323919827;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5861286405720947;  // std dev = 0.156, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5548810480740449;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6230629970567181;  // std dev = 0.353, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11801965955556362;  // std dev = 0.184, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07648224111485653;  // std dev = 3.594, 97.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=25 */
%   | | | else return 0.16669330289674017;  // std dev = 2.573, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.38135777392287146;  // std dev = 0.226, 67.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   | | else return 0.5254053026227397;  // std dev = 0.126, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.11316752098486366;  // std dev = 0.020, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.35604287403750323;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5145422425627395;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10387697780396189;  // std dev = 0.001, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.40957648675974623;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.10587255265136485;  // std dev = 2.498, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return 0.1474796984089792;  // std dev = 1.943, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.3393805665444351;  // std dev = 0.023, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.4747581241410012;  // std dev = 0.255, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then return 0.2200509936339925;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.09533683372250527;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3059282040269397;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.42913686234918147;  // std dev = 0.648, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09191841712737145;  // std dev = 1.187, 194.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06965261638068758;  // std dev = 0.982, 67.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=3 */
%   | | | else return 0.08542092855611155;  // std dev = 3.295, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26705425558713647;  // std dev = 0.030, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.05062852485922309;  // std dev = 0.117, 153.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=18 */
%   | | else return -0.06960276016008302;  // std dev = 0.105, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.27936354457211837;  // std dev = 0.173, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23751037078826856;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.44967580910685123;  // std dev = 0.454, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.59986064829683;  // std dev = 0.319, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14193096792122625;  // std dev = 0.193, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.1254323550637324;  // std dev = 0.383, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.21885099135145786;  // std dev = 0.097, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0.15651906356724685;  // std dev = 0.214, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08056395056883767;  // std dev = 0.068, 154.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.29196664019813123;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08454652446692726;  // std dev = 0.079, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2390757352693737;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.512590512537287;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.019111978329788105;  // std dev = 1.541, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.054523889538956864;  // std dev = 2.531, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.1409351089606212;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.16918199086366237;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17970404981531146;  // std dev = 0.033, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2747547113544291;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.22343976535275548;  // std dev = 0.066, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07380372718985027;  // std dev = 0.063, 209.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2145330982920296;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.003588548483479766;  // std dev = 1.578, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.03734138980300035;  // std dev = 2.536, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.15464473274741114;  // std dev = 0.129, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.1606758697847417;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.17265746354859166;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08920143815043528;  // std dev = 0.689, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.03639039056759279;  // std dev = 0.096, 259.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=38 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.35806267222441085;  // std dev = 0.143, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11956886246662513;  // std dev = 0.109, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.002332280579954392;  // std dev = 1.880, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.04522754183670127;  // std dev = 1.477, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.005892351454524638;  // std dev = 0.112, 329.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=108 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), tweets(E, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2278178384679444;  // std dev = 0.239, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09957841787179787;  // std dev = 3.49e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.41823697377863867;  // std dev = 0.376, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1626169887162418;  // std dev = 0.092, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.31806367017678794;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.124127386758496;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.05781325469691369;  // std dev = 0.772, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.040630366603246024;  // std dev = 1.417, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.477', 'seconds']
Refined model CLL: -0.111277


******************************************
Best model found
******************************************
Results 

CLL : -0.107341 

AUC ROC : 0.993127 

AUC PR : 0.347368 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 11.328 

Total Inference Time : 22.56461000442505 

Total revision time: 51.19518911361695
Best scored revision CLL: -0.111277


Results 

CLL : -0.107341 

AUC ROC : 0.993127 

AUC PR : 0.347368 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 56.77970873832703 

Total Inference Time : 22.56461000442505 

